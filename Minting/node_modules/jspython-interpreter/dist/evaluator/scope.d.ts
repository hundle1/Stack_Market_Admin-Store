export interface CancellationToken {
    cancel?: boolean;
    message?: string;
}
export interface BlockContext {
    moduleName: string;
    blockScope: Scope;
    cancellationToken: CancellationToken;
    returnCalled?: boolean;
    breakCalled?: boolean;
    continueCalled?: boolean;
    returnObject?: unknown;
}
export declare function cloneContext(context: BlockContext): BlockContext;
export declare class Scope {
    private readonly scope;
    constructor(initialScope: Record<string, unknown>);
    getScope(): Record<string, unknown>;
    clone(): Scope;
    set(key: string, value: unknown): void;
    get(key: string): unknown;
}
//# sourceMappingURL=scope.d.ts.map