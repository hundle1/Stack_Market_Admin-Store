{"version":3,"file":"jspython-interpreter.js","sources":["../src/common/utils.ts","../src/common/operators.ts","../src/common/token-types.ts","../src/common/ast-types.ts","../src/evaluator/scope.ts","../src/evaluator/evaluator.ts","../src/evaluator/evaluatorAsync.ts","../src/initialScope.ts","../src/parser/parser.ts","../src/tokenizer/tokenizer.ts","../src/interpreter.ts"],"sourcesContent":["export function parseDatetimeOrNull(value: string | number | Date): Date | null {\r\n  if (!value) {\r\n    return null;\r\n  }\r\n  if (typeof value === 'number') {\r\n    return new Date(value);\r\n  }\r\n  if (value instanceof Date && !isNaN(value.valueOf())) {\r\n    return value;\r\n  }\r\n  // only string values can be converted to Date\r\n  if (typeof value !== 'string') {\r\n    return null;\r\n  }\r\n\r\n  const strValue = String(value);\r\n  if (!strValue.length) {\r\n    return null;\r\n  }\r\n\r\n  const parseMonth = (mm: string): number => {\r\n    if (!mm || !mm.length) {\r\n      return NaN;\r\n    }\r\n\r\n    const m = parseInt(mm, 10);\r\n    if (!isNaN(m)) {\r\n      return m - 1;\r\n    }\r\n\r\n    // make sure english months are coming through\r\n    if (mm.startsWith('jan')) {\r\n      return 0;\r\n    }\r\n    if (mm.startsWith('feb')) {\r\n      return 1;\r\n    }\r\n    if (mm.startsWith('mar')) {\r\n      return 2;\r\n    }\r\n    if (mm.startsWith('apr')) {\r\n      return 3;\r\n    }\r\n    if (mm.startsWith('may')) {\r\n      return 4;\r\n    }\r\n    if (mm.startsWith('jun')) {\r\n      return 5;\r\n    }\r\n    if (mm.startsWith('jul')) {\r\n      return 6;\r\n    }\r\n    if (mm.startsWith('aug')) {\r\n      return 7;\r\n    }\r\n    if (mm.startsWith('sep')) {\r\n      return 8;\r\n    }\r\n    if (mm.startsWith('oct')) {\r\n      return 9;\r\n    }\r\n    if (mm.startsWith('nov')) {\r\n      return 10;\r\n    }\r\n    if (mm.startsWith('dec')) {\r\n      return 11;\r\n    }\r\n\r\n    return NaN;\r\n  };\r\n\r\n  const correctYear = (yy: number): number => {\r\n    if (yy < 100) {\r\n      return yy < 68 ? yy + 2000 : yy + 1900;\r\n    } else {\r\n      return yy;\r\n    }\r\n  };\r\n\r\n  const validDateOrNull = (\r\n    yyyy: number,\r\n    month: number,\r\n    day: number,\r\n    hours: number,\r\n    mins: number,\r\n    ss: number\r\n  ): Date | null => {\r\n    if (month > 11 || day > 31 || hours >= 60 || mins >= 60 || ss >= 60) {\r\n      return null;\r\n    }\r\n\r\n    const dd = new Date(yyyy, month, day, hours, mins, ss, 0);\r\n    return !isNaN(dd.valueOf()) ? dd : null;\r\n  };\r\n\r\n  const strTokens = strValue\r\n    .replace('T', ' ')\r\n    .toLowerCase()\r\n    .split(/[: /-]/);\r\n  const dt = strTokens.map(parseFloat);\r\n\r\n  // try ISO first\r\n  let d = validDateOrNull(dt[0], dt[1] - 1, dt[2], dt[3] || 0, dt[4] || 0, dt[5] || 0);\r\n  if (d) {\r\n    return d;\r\n  }\r\n\r\n  // then UK\r\n  d = validDateOrNull(\r\n    correctYear(dt[2]),\r\n    parseMonth(strTokens[1]),\r\n    dt[0],\r\n    dt[3] || 0,\r\n    dt[4] || 0,\r\n    dt[5] || 0\r\n  );\r\n  if (d) {\r\n    return d;\r\n  }\r\n\r\n  // then US\r\n  d = validDateOrNull(\r\n    correctYear(dt[2]),\r\n    parseMonth(strTokens[0]),\r\n    correctYear(dt[1]),\r\n    dt[3] || 0,\r\n    dt[4] || 0,\r\n    dt[5] || 0\r\n  );\r\n  if (d) {\r\n    return d;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport function getImportType(name: string): 'jspyModule' | 'jsPackage' | 'json' {\r\n  if (name.startsWith('/') || name.startsWith('./')) {\r\n    return name.endsWith('.json') ? 'json' : 'jspyModule';\r\n  }\r\n\r\n  return 'jsPackage';\r\n}\r\n\r\nfunction jspyErrorMessage(\r\n  error: string,\r\n  module: string,\r\n  line: number,\r\n  column: number,\r\n  message: string\r\n): string {\r\n  return `${error}: ${module}(${line},${column}): ${message}`;\r\n}\r\n\r\nexport class JspyTokenizerError extends Error {\r\n  constructor(\r\n    public module: string,\r\n    public line: number,\r\n    public column: number,\r\n    public message: string\r\n  ) {\r\n    super();\r\n    this.message = jspyErrorMessage('JspyTokenizerError', module, line, column, message);\r\n    Object.setPrototypeOf(this, JspyTokenizerError.prototype);\r\n  }\r\n}\r\n\r\nexport class JspyParserError extends Error {\r\n  constructor(\r\n    public module: string,\r\n    public line: number,\r\n    public column: number,\r\n    public message: string\r\n  ) {\r\n    super();\r\n    this.message = jspyErrorMessage('JspyParserError', module, line, column, message);\r\n    Object.setPrototypeOf(this, JspyParserError.prototype);\r\n  }\r\n}\r\n\r\nexport class JspyEvalError extends Error {\r\n  constructor(\r\n    public module: string,\r\n    public line: number,\r\n    public column: number,\r\n    public message: string\r\n  ) {\r\n    super();\r\n    this.message = jspyErrorMessage('JspyEvalError', module, line, column, message);\r\n    Object.setPrototypeOf(this, JspyEvalError.prototype);\r\n  }\r\n}\r\n\r\nexport class JspyError extends Error {\r\n  constructor(\r\n    public module: string,\r\n    public line: number,\r\n    public column: number,\r\n    public name: string,\r\n    public message: string\r\n  ) {\r\n    super();\r\n    this.message = jspyErrorMessage('JspyError', module || 'name.jspy', line, column, message);\r\n    Object.setPrototypeOf(this, JspyError.prototype);\r\n  }\r\n}\r\n","export enum OperationTypes {\r\n  Arithmetic,\r\n  Assignment,\r\n  Comparison,\r\n  Logical,\r\n  Membership\r\n}\r\n\r\nexport type AssignmentOperators = '=' | '+=' | '-=' | '*=' | '/=' | '++' | '--';\r\nexport type ArithmeticOperators = '+' | '-' | '*' | '/' | '%' | '**' | '//';\r\nexport type ComparisonOperators = '>' | '>=' | '==' | '!=' | '<>' | '<' | '<=';\r\nexport type LogicalOperators = 'and' | 'or'; // | \"not\" | \"not in\";\r\nexport type MembershipOperators = 'in';\r\n\r\nexport type Operators =\r\n  | AssignmentOperators\r\n  | ArithmeticOperators\r\n  | ComparisonOperators\r\n  | LogicalOperators\r\n  | MembershipOperators;\r\n\r\nexport const OperatorsMap: Map<Operators, OperationTypes> = new Map<Operators, OperationTypes>([\r\n  ['+', OperationTypes.Arithmetic],\r\n  ['-', OperationTypes.Arithmetic],\r\n  ['*', OperationTypes.Arithmetic],\r\n  ['/', OperationTypes.Arithmetic],\r\n  ['%', OperationTypes.Arithmetic],\r\n  ['**', OperationTypes.Arithmetic],\r\n  ['//', OperationTypes.Arithmetic],\r\n\r\n  ['>', OperationTypes.Comparison],\r\n  ['>=', OperationTypes.Comparison],\r\n  ['==', OperationTypes.Comparison],\r\n  ['!=', OperationTypes.Comparison],\r\n  ['<>', OperationTypes.Comparison],\r\n  ['<', OperationTypes.Comparison],\r\n  ['<=', OperationTypes.Comparison],\r\n\r\n  ['and', OperationTypes.Logical],\r\n  ['or', OperationTypes.Logical],\r\n  // \"not\", OperationTypes.Logical],\r\n  // \"not in\", OperationTypes.Logical],\r\n\r\n  ['in', OperationTypes.Membership],\r\n\r\n  ['=', OperationTypes.Assignment],\r\n  ['+=', OperationTypes.Assignment],\r\n  ['-=', OperationTypes.Assignment],\r\n  ['*=', OperationTypes.Assignment],\r\n  ['/=', OperationTypes.Assignment],\r\n  ['++', OperationTypes.Assignment],\r\n  ['--', OperationTypes.Assignment]\r\n]);\r\n\r\nexport type Primitive = string | number | boolean | null;\r\n\r\nexport type ExpressionOperators =\r\n  | ArithmeticOperators\r\n  | ComparisonOperators\r\n  | LogicalOperators\r\n  | MembershipOperators;\r\ntype ExpressionOperation = (l: Primitive, r: Primitive) => Primitive;\r\n\r\nexport const OperationFuncs: Map<ExpressionOperators, ExpressionOperation> = new Map<\r\n  ExpressionOperators,\r\n  ExpressionOperation\r\n>([\r\n  ['+' as ExpressionOperators, ((l, r) => arithmeticOperation(l, r, '+')) as ExpressionOperation],\r\n  ['-' as ExpressionOperators, ((l, r) => arithmeticOperation(l, r, '-')) as ExpressionOperation],\r\n  ['/' as ExpressionOperators, ((l, r) => arithmeticOperation(l, r, '/')) as ExpressionOperation],\r\n  ['*' as ExpressionOperators, ((l, r) => arithmeticOperation(l, r, '*')) as ExpressionOperation],\r\n  ['%' as ExpressionOperators, ((l, r) => arithmeticOperation(l, r, '%')) as ExpressionOperation],\r\n  ['**' as ExpressionOperators, ((l, r) => arithmeticOperation(l, r, '**')) as ExpressionOperation],\r\n  ['//' as ExpressionOperators, ((l, r) => arithmeticOperation(l, r, '//')) as ExpressionOperation],\r\n\r\n  ['>' as ExpressionOperators, ((l, r) => comparissonOperation(l, r, '>')) as ExpressionOperation],\r\n  [\r\n    '>=' as ExpressionOperators,\r\n    ((l, r) => comparissonOperation(l, r, '>=')) as ExpressionOperation\r\n  ],\r\n  ['<' as ExpressionOperators, ((l, r) => comparissonOperation(l, r, '<')) as ExpressionOperation],\r\n  [\r\n    '<=' as ExpressionOperators,\r\n    ((l, r) => comparissonOperation(l, r, '<=')) as ExpressionOperation\r\n  ],\r\n  [\r\n    '==' as ExpressionOperators,\r\n    ((l, r) => comparissonOperation(l, r, '==')) as ExpressionOperation\r\n  ],\r\n  [\r\n    '!=' as ExpressionOperators,\r\n    ((l, r) => comparissonOperation(l, r, '!=')) as ExpressionOperation\r\n  ],\r\n  [\r\n    '<>' as ExpressionOperators,\r\n    ((l, r) => comparissonOperation(l, r, '<>')) as ExpressionOperation\r\n  ],\r\n\r\n  ['and' as ExpressionOperators, ((l, r) => logicalOperation(l, r, 'and')) as ExpressionOperation],\r\n  ['or' as ExpressionOperators, ((l, r) => logicalOperation(l, r, 'or')) as ExpressionOperation],\r\n  // \"not\" as ExpressionOperators, ((l, r) => logicalOperation(l, r, \"not\")) as ExpressionOperation],\r\n  // \"not in\" as ExpressionOperators, ((l, r) => logicalOperation(l, r, \"not in\")) as ExpressionOperation],\r\n\r\n  ['in' as ExpressionOperators, ((l, r) => membershipOperation(l, r, 'in')) as ExpressionOperation]\r\n]);\r\n\r\nfunction membershipOperation(l: Primitive, r: Primitive, op: MembershipOperators): Primitive {\r\n  if (typeof l === 'string') {\r\n    return (l as string).includes(String(r));\r\n  }\r\n\r\n  if (Array.isArray(l)) {\r\n    return (l as unknown[]).includes(r);\r\n  }\r\n\r\n  throw new Error(`Unknown operation '${op}'`);\r\n}\r\n\r\nfunction logicalOperation(l: Primitive, r: Primitive, op: LogicalOperators): Primitive {\r\n  switch (op) {\r\n    case 'and':\r\n      return l && r;\r\n\r\n    case 'or':\r\n      return l || r;\r\n  }\r\n  throw new Error(`Unknown operation '${op}'`);\r\n}\r\n\r\nfunction comparissonOperation(l: Primitive, r: Primitive, op: ComparisonOperators): Primitive {\r\n  switch (op) {\r\n    case '==':\r\n      return l === r;\r\n\r\n    case '!=':\r\n      return l !== r;\r\n\r\n    case '<>':\r\n      return l !== r;\r\n\r\n    case '>':\r\n      return (l as number) > (r as number);\r\n\r\n    case '<':\r\n      return (l as number) < (r as number);\r\n\r\n    case '>=':\r\n      return (l as number) >= (r as number);\r\n\r\n    case '<=':\r\n      return (l as number) <= (r as number);\r\n  }\r\n\r\n  throw new Error(`Unknown operation '${op}'`);\r\n}\r\n\r\nfunction arithmeticOperation(l: Primitive, r: Primitive, op: ArithmeticOperators): Primitive {\r\n  switch (op) {\r\n    case '+':\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return (l as any) + (r as any);\r\n\r\n    case '-':\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return (l as any) - (r as any);\r\n\r\n    case '*':\r\n      return (l as number) * (r as number);\r\n\r\n    case '/':\r\n      return (l as number) / (r as number);\r\n\r\n    case '%':\r\n      return (l as number) % (r as number);\r\n\r\n    case '**':\r\n      return Math.pow(l as number, r as number);\r\n  }\r\n\r\n  throw new Error(`Unknown operation '${op}'`);\r\n}\r\n","import { OperationTypes, Operators, OperatorsMap } from './operators';\r\n\r\nexport enum TokenTypes {\r\n  Identifier = 0,\r\n  Keyword = 1,\r\n  Separator = 2,\r\n  Operator = 3,\r\n  LiteralNumber = 4,\r\n  LiteralBool = 5,\r\n  LiteralString = 6,\r\n  LiteralNull = 7,\r\n  Comment = 8\r\n}\r\n/**\r\n * Token represent a single considered token in a script. Is represented as an array, where element at:\r\n *  0 : value\r\n *  1 : token details. For a memory and performance reasons we use Uint16Array with 5 elements in it:\r\n *    [\r\n *      0 - tokenType number equivalent of @TokenTypes\r\n *      1 - beginLine\r\n *      2 - beginColumn\r\n *      3 - endLine\r\n *      4 - endColumn\r\n *    ]\r\n * [(value). Uint16Array[5]([tokenType, beginLine, beginColumn, endLine, endColumn])]\r\n * tokenType\r\n */\r\nexport type Token = [string | number | boolean | null, Uint16Array];\r\nexport type TokenValue = string | number | boolean | null;\r\n\r\nexport function isTokenTypeLiteral(tokenType: TokenTypes): boolean {\r\n  return (\r\n    tokenType === TokenTypes.LiteralString ||\r\n    tokenType === TokenTypes.LiteralNumber ||\r\n    tokenType === TokenTypes.LiteralBool ||\r\n    tokenType === TokenTypes.LiteralNull\r\n  );\r\n}\r\n\r\nexport function getTokenType(token: Token): TokenTypes {\r\n  return token[1][0] as TokenTypes;\r\n}\r\n\r\nexport function getTokenValue(token: Token | null): TokenValue {\r\n  return token ? token[0] : null;\r\n}\r\n\r\nexport function getTokenLoc(token: Token): Uint16Array {\r\n  return token[1].subarray(1);\r\n}\r\n\r\nexport function getStartLine(token: Token): number {\r\n  return token[1][1];\r\n}\r\n\r\nexport function getStartColumn(token: Token): number {\r\n  return token[1][2];\r\n}\r\n\r\nexport function getEndLine(token: Token): number {\r\n  return token[1][3];\r\n}\r\n\r\nexport function getEndColumn(token: Token): number {\r\n  return token[1][4];\r\n}\r\n\r\nexport function splitTokensByIndexes(tokens: Token[], sepIndexes: number[]): Token[][] {\r\n  const result: Token[][] = [];\r\n\r\n  if (!tokens.length) {\r\n    return [];\r\n  }\r\n\r\n  let start = 0;\r\n  for (let i = 0; i < sepIndexes.length; i++) {\r\n    const ind = sepIndexes[i];\r\n    if (getTokenValue(tokens[start - 1]) === '[') {\r\n      start = start - 1;\r\n    }\r\n    result.push(tokens.slice(start, ind));\r\n    start = ind + 1;\r\n  }\r\n\r\n  if (getTokenValue(tokens[start - 1]) === '[') {\r\n    start = start - 1;\r\n  }\r\n  result.push(tokens.slice(start, tokens.length));\r\n  return result;\r\n}\r\n\r\nexport function splitTokens(tokens: Token[], separator: string): Token[][] {\r\n  if (!tokens.length) {\r\n    return [];\r\n  }\r\n  const sepIndexes = findTokenValueIndexes(tokens, value => value === separator);\r\n  return splitTokensByIndexes(tokens, sepIndexes);\r\n}\r\n\r\nexport function findTokenValueIndex(\r\n  tokens: Token[],\r\n  predicate: (value: TokenValue) => boolean,\r\n  start = 0\r\n): number {\r\n  for (let i = start; i < tokens.length; i++) {\r\n    if (getTokenType(tokens[i]) === TokenTypes.LiteralString) {\r\n      continue;\r\n    }\r\n\r\n    if (getTokenValue(tokens[i]) === '(') {\r\n      i = skipInnerBrackets(tokens, i, '(', ')');\r\n    } else if (getTokenValue(tokens[i]) === '[') {\r\n      i = skipInnerBrackets(tokens, i, '[', ']');\r\n    } else if (getTokenValue(tokens[i]) === '{') {\r\n      i = skipInnerBrackets(tokens, i, '{', '}');\r\n    } else if (predicate(getTokenValue(tokens[i]))) {\r\n      return i;\r\n    }\r\n  }\r\n\r\n  return -1;\r\n}\r\n\r\nexport function findChainingCallTokensIndexes(tokens: Token[]): number[] {\r\n  const opIndexes: number[] = [];\r\n\r\n  for (let i = 0; i < tokens.length; i++) {\r\n    const tValue = getTokenValue(tokens[i]);\r\n    const tType = getTokenType(tokens[i]);\r\n\r\n    if (tType === TokenTypes.LiteralString) {\r\n      continue;\r\n    }\r\n\r\n    if (tValue === '.') {\r\n      opIndexes.push(i);\r\n    } else if (tValue === '(') {\r\n      i = skipInnerBrackets(tokens, i, '(', ')');\r\n    } else if (tValue === '[' && i === 0) {\r\n      i = skipInnerBrackets(tokens, i, '[', ']');\r\n    } else if (tValue === '[' && i !== 0) {\r\n      opIndexes.push(i);\r\n      i = skipInnerBrackets(tokens, i, '[', ']');\r\n    } else if (tValue === '{') {\r\n      i = skipInnerBrackets(tokens, i, '{', '}');\r\n    }\r\n  }\r\n\r\n  return opIndexes;\r\n}\r\n\r\nexport function findTokenValueIndexes(\r\n  tokens: Token[],\r\n  predicate: (value: TokenValue) => boolean\r\n): number[] {\r\n  const opIndexes: number[] = [];\r\n\r\n  for (let i = 0; i < tokens.length; i++) {\r\n    const tValue = getTokenValue(tokens[i]);\r\n    const tType = getTokenType(tokens[i]);\r\n\r\n    if (tType === TokenTypes.LiteralString) {\r\n      continue;\r\n    }\r\n\r\n    if (tValue === '(') {\r\n      i = skipInnerBrackets(tokens, i, '(', ')');\r\n    } else if (tValue === '[') {\r\n      i = skipInnerBrackets(tokens, i, '[', ']');\r\n    } else if (tValue === '{') {\r\n      i = skipInnerBrackets(tokens, i, '{', '}');\r\n    } else if (predicate(tValue)) {\r\n      opIndexes.push(i);\r\n    }\r\n  }\r\n\r\n  return opIndexes;\r\n}\r\n\r\nexport function findOperators(\r\n  tokens: Token[],\r\n  operationType: OperationTypes | null = null\r\n): number[] {\r\n  return !operationType\r\n    ? findTokenValueIndexes(tokens, value => OperatorsMap.has(value as Operators))\r\n    : findTokenValueIndexes(\r\n        tokens,\r\n        value => OperatorsMap.get(value as Operators) === operationType\r\n      );\r\n}\r\n\r\nfunction skipInnerBrackets(\r\n  tokens: Token[],\r\n  i: number,\r\n  openChar: string,\r\n  closeChar: string\r\n): number {\r\n  let innerBrackets = 0;\r\n  while (getTokenValue(tokens[++i]) !== closeChar || innerBrackets !== 0) {\r\n    if (i + 1 >= tokens.length) {\r\n      throw new Error(`Closing '${closeChar}' is missing`);\r\n    }\r\n\r\n    const tokenValue = getTokenValue(tokens[i]);\r\n    if (tokenValue === openChar) {\r\n      innerBrackets++;\r\n    }\r\n    if (tokenValue === closeChar) {\r\n      innerBrackets--;\r\n    }\r\n  }\r\n  return i;\r\n}\r\n","import { ExpressionOperators, LogicalOperators } from './operators';\r\nimport { getTokenLoc, getTokenValue, Token } from './token-types';\r\n\r\nexport type AstNodeType =\r\n  | 'assign'\r\n  | 'binOp'\r\n  | 'const'\r\n  | 'logicalOp'\r\n  | 'getSingleVar'\r\n  | 'setSingleVar'\r\n  | 'chainingCalls'\r\n  | 'chainingObjectAccess'\r\n  | 'funcCall'\r\n  | 'funcDef'\r\n  | 'arrowFuncDef'\r\n  | 'createObject'\r\n  | 'createArray'\r\n  | 'if'\r\n  | 'elif'\r\n  | 'for'\r\n  | 'while'\r\n  | 'tryExcept'\r\n  | 'raise'\r\n  | 'import'\r\n  | 'comment'\r\n  | 'return'\r\n  | 'continue'\r\n  | 'break';\r\n\r\nexport interface NameAlias {\r\n  name: string;\r\n  alias: string | undefined;\r\n}\r\n\r\nexport interface ExceptBody {\r\n  error: NameAlias;\r\n  body: AstNode[];\r\n}\r\n\r\nexport interface FuncDefNode {\r\n  params: string[];\r\n  funcAst: AstBlock;\r\n}\r\n\r\nexport interface IsNullCoelsing {\r\n  nullCoelsing: boolean | undefined;\r\n}\r\n\r\nexport interface ObjectPropertyInfo {\r\n  name: AstNode;\r\n  value: AstNode;\r\n}\r\n\r\nexport abstract class AstNode {\r\n  loc: Uint16Array | undefined = undefined;\r\n  constructor(public type: AstNodeType) {}\r\n}\r\n\r\nexport class AssignNode extends AstNode {\r\n  constructor(public target: AstNode, public source: AstNode, public loc: Uint16Array) {\r\n    super('assign');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class ConstNode extends AstNode {\r\n  public value: number | string | boolean | null;\r\n\r\n  constructor(token: Token) {\r\n    super('const');\r\n    this.value = getTokenValue(token);\r\n    this.loc = getTokenLoc(token);\r\n  }\r\n}\r\n\r\nexport class CommentNode extends AstNode {\r\n  constructor(public comment: string, public loc: Uint16Array) {\r\n    super('comment');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class ReturnNode extends AstNode {\r\n  constructor(public returnValue: AstNode | undefined = undefined, public loc: Uint16Array) {\r\n    super('return');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class RaiseNode extends AstNode {\r\n  constructor(public errorName: string, public errorMessageAst: AstNode, public loc: Uint16Array) {\r\n    super('raise');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class ContinueNode extends AstNode {\r\n  constructor() {\r\n    super('continue');\r\n  }\r\n}\r\n\r\nexport class BreakNode extends AstNode {\r\n  constructor() {\r\n    super('break');\r\n  }\r\n}\r\n\r\nexport class SetSingleVarNode extends AstNode {\r\n  public name: string;\r\n  constructor(token: Token) {\r\n    super('setSingleVar');\r\n    this.name = token[0] as string;\r\n    this.loc = getTokenLoc(token);\r\n  }\r\n}\r\n\r\nexport class FunctionCallNode extends AstNode implements IsNullCoelsing {\r\n  public nullCoelsing: boolean | undefined = undefined;\r\n\r\n  constructor(public name: string, public paramNodes: AstNode[] | null, public loc: Uint16Array) {\r\n    super('funcCall');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class FunctionDefNode extends AstNode implements FuncDefNode {\r\n  constructor(\r\n    public funcAst: AstBlock,\r\n    public params: string[],\r\n    public isAsync: boolean,\r\n    public loc: Uint16Array\r\n  ) {\r\n    super('funcDef');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class ArrowFuncDefNode extends AstNode implements FuncDefNode {\r\n  constructor(public funcAst: AstBlock, public params: string[], public loc: Uint16Array) {\r\n    super('arrowFuncDef');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class ElifNode extends AstNode {\r\n  constructor(\r\n    public conditionNode: AstNode,\r\n    public elifBody: AstNode[],\r\n    public loc: Uint16Array\r\n  ) {\r\n    super('elif');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class IfNode extends AstNode {\r\n  constructor(\r\n    public conditionNode: AstNode,\r\n    public ifBody: AstNode[],\r\n    public elifs: ElifNode[] | undefined = undefined,\r\n    public elseBody: AstNode[] | undefined = undefined,\r\n    public loc: Uint16Array,\r\n  ) {\r\n    super('if');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class TryExceptNode extends AstNode {\r\n  constructor(\r\n    public tryBody: AstNode[],\r\n    public exepts: ExceptBody[],\r\n    public elseBody: AstNode[] | undefined,\r\n    public finallyBody: AstNode[] | undefined,\r\n\r\n    public loc: Uint16Array\r\n  ) {\r\n    super('tryExcept');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class ForNode extends AstNode {\r\n  constructor(\r\n    public sourceArray: AstNode,\r\n    public itemVarName: string,\r\n    public body: AstNode[],\r\n    public loc: Uint16Array\r\n  ) {\r\n    super('for');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class WhileNode extends AstNode {\r\n  constructor(public condition: AstNode, public body: AstNode[], public loc: Uint16Array) {\r\n    super('while');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class ImportNode extends AstNode {\r\n  constructor(\r\n    public module: NameAlias,\r\n    public body: AstBlock,\r\n    public parts: NameAlias[] | undefined = undefined,\r\n    public loc: Uint16Array\r\n  ) {\r\n    super('import');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class GetSingleVarNode extends AstNode implements IsNullCoelsing {\r\n  name: string;\r\n  nullCoelsing: boolean | undefined = undefined;\r\n\r\n  constructor(token: Token, nullCoelsing: boolean | undefined = undefined) {\r\n    super('getSingleVar');\r\n    this.name = token[0] as string;\r\n    this.nullCoelsing = nullCoelsing;\r\n    this.loc = getTokenLoc(token);\r\n  }\r\n}\r\n\r\nexport class ChainingCallsNode extends AstNode {\r\n  constructor(public innerNodes: AstNode[], public loc: Uint16Array) {\r\n    super('chainingCalls');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class CreateObjectNode extends AstNode {\r\n  constructor(public props: ObjectPropertyInfo[], public loc: Uint16Array) {\r\n    super('createObject');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class CreateArrayNode extends AstNode {\r\n  constructor(public items: AstNode[], public loc: Uint16Array) {\r\n    super('createArray');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class ChainingObjectAccessNode extends AstNode {\r\n  constructor(\r\n    public indexerBody: AstNode,\r\n    public nullCoelsing: boolean | undefined = undefined,\r\n    public loc: Uint16Array\r\n  ) {\r\n    super('chainingObjectAccess');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport interface LogicalNodeItem {\r\n  node: AstNode;\r\n  op: LogicalOperators | undefined;\r\n}\r\n\r\nexport class LogicalOpNode extends AstNode {\r\n  constructor(public items: LogicalNodeItem[], public loc: Uint16Array) {\r\n    super('logicalOp');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class BinOpNode extends AstNode {\r\n  constructor(\r\n    public left: AstNode,\r\n    public op: ExpressionOperators,\r\n    public right: AstNode,\r\n    public loc: Uint16Array\r\n  ) {\r\n    super('binOp');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport interface AstBlock {\r\n  name: string;\r\n  type: 'module' | 'func' | 'if' | 'for' | 'while' | 'trycatch';\r\n  funcs: FunctionDefNode[];\r\n  body: AstNode[];\r\n}\r\n","export interface CancellationToken {\r\n  cancel?: boolean;\r\n  message?: string;\r\n}\r\n\r\nexport interface BlockContext {\r\n  moduleName: string;\r\n  blockScope: Scope;\r\n  cancellationToken: CancellationToken;\r\n  returnCalled?: boolean;\r\n  breakCalled?: boolean;\r\n  continueCalled?: boolean;\r\n  returnObject?: unknown;\r\n}\r\n\r\nexport function cloneContext(context: BlockContext): BlockContext {\r\n  return {\r\n    moduleName: context.moduleName,\r\n    blockScope: context.blockScope.clone(),\r\n    // this instance should never change. Otherwise cancel won't work\r\n    cancellationToken: context.cancellationToken\r\n  } as BlockContext;\r\n}\r\n\r\nexport class Scope {\r\n  private readonly scope: Record<string, unknown> = {};\r\n\r\n  constructor(initialScope: Record<string, unknown>) {\r\n    this.scope = { ...initialScope };\r\n  }\r\n\r\n  getScope(): Record<string, unknown> {\r\n    return this.scope;\r\n  }\r\n\r\n  clone(): Scope {\r\n    return new Scope(this.scope);\r\n  }\r\n  set(key: string, value: unknown): void {\r\n    this.scope[key] = value;\r\n  }\r\n\r\n  get(key: string): unknown {\r\n    return this.scope[key];\r\n  }\r\n}\r\n","import {\r\n  ArrowFuncDefNode,\r\n  AssignNode,\r\n  AstBlock,\r\n  AstNode,\r\n  BinOpNode,\r\n  ChainingCallsNode,\r\n  ChainingObjectAccessNode,\r\n  ConstNode,\r\n  CreateArrayNode,\r\n  CreateObjectNode,\r\n  ForNode,\r\n  FuncDefNode,\r\n  FunctionCallNode,\r\n  FunctionDefNode,\r\n  GetSingleVarNode,\r\n  IfNode,\r\n  IsNullCoelsing,\r\n  LogicalOpNode,\r\n  OperationFuncs,\r\n  Primitive,\r\n  RaiseNode,\r\n  ReturnNode,\r\n  SetSingleVarNode,\r\n  TryExceptNode,\r\n  WhileNode\r\n} from '../common';\r\nimport { JspyError, JspyEvalError } from '../common/utils';\r\nimport { BlockContext, cloneContext } from './scope';\r\n\r\nexport class Evaluator {\r\n  evalBlock(ast: AstBlock, blockContext: BlockContext): unknown {\r\n    let lastResult = null;\r\n\r\n    for (const node of ast?.funcs || []) {\r\n      const funcDef = node as FunctionDefNode;\r\n\r\n      // a child scope needs to be created here\r\n      const newScope = blockContext.blockScope;\r\n\r\n      newScope.set(funcDef.funcAst.name, (...args: unknown[]): unknown =>\r\n        this.jspyFuncInvoker(funcDef, blockContext, ...args)\r\n      );\r\n    }\r\n\r\n    for (let i = 0; i < ast.body.length; i++) {\r\n      const node = ast.body[i];\r\n      if (blockContext.cancellationToken.cancel) {\r\n        const loc = node.loc || [];\r\n\r\n        if (!blockContext.cancellationToken.message) {\r\n          blockContext.cancellationToken.message = `Cancelled. ${blockContext.moduleName}: ${loc[0]}, ${loc[1]}`;\r\n        }\r\n\r\n        return blockContext.cancellationToken.message;\r\n      }\r\n\r\n      if (node.type === 'comment') {\r\n        continue;\r\n      }\r\n      if (node.type === 'import') {\r\n        // we can't use it here, because loader has to be promise\r\n        throw new Error(`Import is not support with 'eval'. Use method 'evalAsync' instead`);\r\n      }\r\n      try {\r\n        lastResult = this.evalNode(node, blockContext);\r\n\r\n        if (blockContext.returnCalled) {\r\n          const res = blockContext.returnObject;\r\n\r\n          // stop processing return\r\n          if (ast.type == 'func' || ast.type == 'module') {\r\n            blockContext.returnCalled = false;\r\n            blockContext.returnObject = null;\r\n          }\r\n          return res;\r\n        }\r\n\r\n        if (blockContext.continueCalled) {\r\n          break;\r\n        }\r\n        if (blockContext.breakCalled) {\r\n          break;\r\n        }\r\n      } catch (err) {\r\n        const loc = node.loc ? node.loc : [0, 0];\r\n        if (err instanceof JspyError) {\r\n          throw err;\r\n        } else if (err instanceof JspyEvalError) {\r\n          throw err;\r\n        } else {\r\n          throw new JspyEvalError(\r\n            blockContext.moduleName,\r\n            loc[0],\r\n            loc[1],\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            (err as any).message || err\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return lastResult;\r\n  }\r\n\r\n  jspyFuncInvoker(funcDef: FuncDefNode, context: BlockContext, ...args: unknown[]): unknown {\r\n    const ast = Object.assign({}, funcDef.funcAst);\r\n    ast.type = 'func';\r\n\r\n    const blockContext = cloneContext(context);\r\n\r\n    // set parameters into new scope, based incomming arguments\r\n    for (let i = 0; i < funcDef.params?.length || 0; i++) {\r\n      const argValue = args?.length > i ? args[i] : null;\r\n      blockContext.blockScope.set(funcDef.params[i], argValue);\r\n    }\r\n\r\n    return this.evalBlock(ast, blockContext);\r\n  }\r\n\r\n  private invokeFunction(\r\n    func: (...args: unknown[]) => unknown,\r\n    fps: unknown[],\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    loc: { moduleName: string; line: number; column: number }\r\n  ): unknown {\r\n    return func(...fps);\r\n  }\r\n\r\n  private evalNode(node: AstNode, blockContext: BlockContext): unknown {\r\n    if (node.type === 'import') {\r\n      // skip this for now. As modules are implemented externally\r\n      return null;\r\n    }\r\n\r\n    if (node.type === 'comment') {\r\n      return null;\r\n    }\r\n\r\n    if (node.type === 'if') {\r\n      const ifNode = node as IfNode;\r\n      let doElse = true;\r\n      if (this.evalNode(ifNode.conditionNode, blockContext)) {\r\n        this.evalBlock(\r\n          { name: blockContext.moduleName, type: 'if', body: ifNode.ifBody } as AstBlock,\r\n          blockContext\r\n        );\r\n        doElse = false;\r\n      } else if (ifNode.elifs?.length) {\r\n        for (let i = 0; i < ifNode.elifs.length; i++) {\r\n          const elIfNode = ifNode.elifs[i];\r\n\r\n          if (this.evalNode(elIfNode.conditionNode, blockContext)) {\r\n            this.evalBlock(\r\n              { name: blockContext.moduleName, type: 'if', body: elIfNode.elifBody } as AstBlock,\r\n              blockContext\r\n            );\r\n            doElse = false;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (doElse && ifNode.elseBody) {\r\n        this.evalBlock(\r\n          { name: blockContext.moduleName, type: 'if', body: ifNode.elseBody } as AstBlock,\r\n          blockContext\r\n        );\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'raise') {\r\n      const raiseNode = node as RaiseNode;\r\n      const errorMessage = this.evalNode(raiseNode.errorMessageAst, blockContext) as string;\r\n      const err = new JspyError(\r\n        blockContext.moduleName,\r\n        raiseNode.loc[0],\r\n        raiseNode.loc[1],\r\n        raiseNode.errorName,\r\n        errorMessage\r\n      );\r\n      throw err;\r\n    }\r\n\r\n    if (node.type === 'tryExcept') {\r\n      const tryNode = node as TryExceptNode;\r\n      try {\r\n        this.evalBlock(\r\n          { name: blockContext.moduleName, type: 'trycatch', body: tryNode.tryBody } as AstBlock,\r\n          blockContext\r\n        );\r\n\r\n        if (tryNode.elseBody?.length || 0 > 0) {\r\n          this.evalBlock(\r\n            { name: blockContext.moduleName, type: 'trycatch', body: tryNode.elseBody } as AstBlock,\r\n            blockContext\r\n          );\r\n        }\r\n      } catch (err) {\r\n        const name = err instanceof JspyError ? (err as JspyError).name : typeof err;\r\n        const message =\r\n          err instanceof JspyError\r\n            ? (err as JspyError).message\r\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n              (err as any)?.message ?? String(err);\r\n        const moduleName = err instanceof JspyError ? (err as JspyError).module : 0;\r\n        const line = err instanceof JspyError ? (err as JspyError).line : 0;\r\n        const column = err instanceof JspyError ? (err as JspyError).column : 0;\r\n\r\n        const firstExept = tryNode.exepts[0];\r\n        const catchBody = firstExept.body;\r\n        const ctx = blockContext; // cloneContext(blockContext);\r\n        ctx.blockScope.set(firstExept.error?.alias || 'error', {\r\n          name,\r\n          message,\r\n          line,\r\n          column,\r\n          moduleName\r\n        });\r\n        this.evalBlock(\r\n          { name: blockContext.moduleName, type: 'trycatch', body: catchBody } as AstBlock,\r\n          ctx\r\n        );\r\n        ctx.blockScope.set(firstExept.error?.alias || 'error', null);\r\n      } finally {\r\n        if (tryNode.finallyBody?.length || 0 > 0) {\r\n          this.evalBlock(\r\n            {\r\n              name: blockContext.moduleName,\r\n              type: 'trycatch',\r\n              body: tryNode.finallyBody\r\n            } as AstBlock,\r\n            blockContext\r\n          );\r\n        }\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'return') {\r\n      const returnNode = node as ReturnNode;\r\n      blockContext.returnCalled = true;\r\n      blockContext.returnObject = returnNode.returnValue\r\n        ? this.evalNode(returnNode.returnValue, blockContext)\r\n        : null;\r\n\r\n      return blockContext.returnObject;\r\n    }\r\n\r\n    if (node.type === 'continue') {\r\n      blockContext.continueCalled = true;\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'break') {\r\n      blockContext.breakCalled = true;\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'for') {\r\n      const forNode = node as ForNode;\r\n\r\n      const array = this.evalNode(forNode.sourceArray, blockContext) as unknown[] | string;\r\n\r\n      for (let i = 0; i < array.length; i++) {\r\n        const item = array[i];\r\n\r\n        blockContext.blockScope.set(forNode.itemVarName, item);\r\n        this.evalBlock(\r\n          { name: blockContext.moduleName, type: 'for', body: forNode.body } as AstBlock,\r\n          blockContext\r\n        );\r\n        if (blockContext.continueCalled) {\r\n          blockContext.continueCalled = false;\r\n        }\r\n        if (blockContext.breakCalled) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (blockContext.breakCalled) {\r\n        blockContext.breakCalled = false;\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'while') {\r\n      const whileNode = node as WhileNode;\r\n\r\n      while (this.evalNode(whileNode.condition, blockContext)) {\r\n        this.evalBlock(\r\n          { name: blockContext.moduleName, type: 'while', body: whileNode.body } as AstBlock,\r\n          blockContext\r\n        );\r\n\r\n        if (blockContext.continueCalled) {\r\n          blockContext.continueCalled = false;\r\n        }\r\n        if (blockContext.breakCalled) {\r\n          break;\r\n        }\r\n      }\r\n      if (blockContext.breakCalled) {\r\n        blockContext.breakCalled = false;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'const') {\r\n      return (node as ConstNode).value;\r\n    }\r\n\r\n    if (node.type === 'getSingleVar') {\r\n      const name = (node as GetSingleVarNode).name;\r\n\r\n      const value = blockContext.blockScope.get((node as GetSingleVarNode).name);\r\n      if (value === undefined) {\r\n        if (name.charAt(name.length - 1) === ';') {\r\n          throw new Error(`Unexpected ';' in the end.`);\r\n        } else {\r\n          throw new Error(`Variable '${name}' is not defined.`);\r\n        }\r\n      }\r\n      return value;\r\n    }\r\n\r\n    if (node.type === 'binOp') {\r\n      const binOpNode = node as BinOpNode;\r\n      const left = this.evalNode(binOpNode.left, blockContext);\r\n      const right = this.evalNode(binOpNode.right, blockContext);\r\n      const func = OperationFuncs.get(binOpNode.op);\r\n      if (typeof func === 'function') return func(left as Primitive, right as Primitive);\r\n      else throw new Error('Unknown binary oprastion');\r\n    }\r\n\r\n    if (node.type === 'logicalOp') {\r\n      const logicalGroups = node as LogicalOpNode;\r\n      let ind = 0;\r\n      let gResult: unknown = true;\r\n\r\n      while (ind < logicalGroups.items.length) {\r\n        const eg = logicalGroups.items[ind++];\r\n\r\n        gResult = this.evalNode(eg.node, blockContext);\r\n\r\n        if (eg.op === 'and' && !gResult) {\r\n          return false;\r\n        }\r\n        if (eg.op === 'or' && gResult) {\r\n          return gResult;\r\n        }\r\n      }\r\n\r\n      return gResult;\r\n    }\r\n\r\n    if (node.type === 'arrowFuncDef') {\r\n      const arrowFuncDef = node as ArrowFuncDefNode;\r\n\r\n      return (...args: unknown[]): unknown =>\r\n        this.jspyFuncInvoker(arrowFuncDef, blockContext, ...args);\r\n    }\r\n\r\n    if (node.type === 'funcCall') {\r\n      const funcCallNode = node as FunctionCallNode;\r\n      const func = blockContext.blockScope.get(funcCallNode.name) as (\r\n        ...args: unknown[]\r\n      ) => unknown;\r\n      if (typeof func !== 'function') {\r\n        throw Error(`'${funcCallNode.name}' is not a function or not defined.`);\r\n      }\r\n\r\n      const pms = funcCallNode.paramNodes?.map(n => this.evalNode(n, blockContext)) || [];\r\n\r\n      return this.invokeFunction(func, pms, {\r\n        moduleName: blockContext.moduleName,\r\n        line: funcCallNode.loc[0],\r\n        column: funcCallNode.loc[1]\r\n      });\r\n    }\r\n\r\n    if (node.type === 'assign') {\r\n      const assignNode = node as AssignNode;\r\n\r\n      if (assignNode.target.type === 'getSingleVar') {\r\n        const node = assignNode.target as SetSingleVarNode;\r\n        blockContext.blockScope.set(node.name, this.evalNode(assignNode.source, blockContext));\r\n      } else if (assignNode.target.type === 'chainingCalls') {\r\n        const targetNode = assignNode.target as ChainingCallsNode;\r\n\r\n        // create a node for all but last property token\r\n        // potentially it can go to parser\r\n        const targetObjectNode = new ChainingCallsNode(\r\n          targetNode.innerNodes.slice(0, targetNode.innerNodes.length - 1),\r\n          targetNode.loc\r\n        );\r\n        const targetObject = this.evalNode(targetObjectNode, blockContext) as Record<\r\n          string,\r\n          unknown\r\n        >;\r\n\r\n        const lastInnerNode = targetNode.innerNodes[targetNode.innerNodes.length - 1];\r\n\r\n        let lastPropertyName = '';\r\n        if (lastInnerNode.type === 'getSingleVar') {\r\n          lastPropertyName = (lastInnerNode as GetSingleVarNode).name;\r\n        } else if (lastInnerNode.type === 'chainingObjectAccess') {\r\n          lastPropertyName = this.evalNode(\r\n            (lastInnerNode as ChainingObjectAccessNode).indexerBody,\r\n            blockContext\r\n          ) as string;\r\n        } else {\r\n          throw Error('Not implemented Assign operation with chaining calls');\r\n        }\r\n\r\n        targetObject[lastPropertyName] = this.evalNode(assignNode.source, blockContext);\r\n      }\r\n\r\n      return null;\r\n    }\r\n\r\n    if (node.type === 'chainingCalls') {\r\n      return this.resolveChainingCallsNode(node as ChainingCallsNode, blockContext);\r\n    }\r\n\r\n    if (node.type === 'createObject') {\r\n      const createObjectNode = node as CreateObjectNode;\r\n      const obj = {} as Record<string, unknown>;\r\n\r\n      for (const p of createObjectNode.props) {\r\n        obj[this.evalNode(p.name, blockContext) as string] = this.evalNode(p.value, blockContext);\r\n      }\r\n\r\n      return obj;\r\n    }\r\n\r\n    if (node.type === 'createArray') {\r\n      const arrayNode = node as CreateArrayNode;\r\n      const res = [] as unknown[];\r\n\r\n      for (const item of arrayNode.items) {\r\n        res.push(this.evalNode(item, blockContext));\r\n      }\r\n\r\n      return res;\r\n    }\r\n  }\r\n\r\n  private resolveChainingCallsNode(chNode: ChainingCallsNode, blockContext: BlockContext): unknown {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let startObject = this.evalNode(chNode.innerNodes[0], blockContext) as any;\r\n\r\n    for (let i = 1; i < chNode.innerNodes.length; i++) {\r\n      const nestedProp = chNode.innerNodes[i];\r\n\r\n      if ((chNode.innerNodes[i - 1] as unknown as IsNullCoelsing).nullCoelsing && !startObject) {\r\n        startObject = {};\r\n      }\r\n\r\n      if (nestedProp.type === 'getSingleVar') {\r\n        startObject = startObject[(nestedProp as SetSingleVarNode).name] as unknown;\r\n      } else if (nestedProp.type === 'chainingObjectAccess') {\r\n        const node = nestedProp as ChainingObjectAccessNode;\r\n        // startObject = startObject[node.] as unknown;\r\n        startObject = startObject[\r\n          this.evalNode(node.indexerBody, blockContext) as string\r\n        ] as unknown;\r\n      } else if (nestedProp.type === 'funcCall') {\r\n        const funcCallNode = nestedProp as FunctionCallNode;\r\n        const func = startObject[funcCallNode.name] as (...args: unknown[]) => unknown;\r\n\r\n        if (\r\n          (func === undefined || func === null) &&\r\n          (chNode.innerNodes[i - 1] as unknown as IsNullCoelsing).nullCoelsing\r\n        ) {\r\n          startObject = null;\r\n          continue;\r\n        }\r\n\r\n        if (typeof func !== 'function') {\r\n          throw Error(`'${funcCallNode.name}' is not a function or not defined.`);\r\n        }\r\n        const pms = [];\r\n        for (const p of funcCallNode.paramNodes || []) {\r\n          pms.push(this.evalNode(p, blockContext));\r\n        }\r\n\r\n        startObject = this.invokeFunction(func.bind(startObject), pms, {\r\n          moduleName: blockContext.moduleName,\r\n          line: funcCallNode.loc[0],\r\n          column: funcCallNode.loc[0]\r\n        });\r\n      } else {\r\n        throw Error(\"Can't resolve chainingCalls node\");\r\n      }\r\n    }\r\n\r\n    return startObject === undefined ? null : startObject;\r\n  }\r\n}\r\n","import {\r\n  ArrowFuncDefNode,\r\n  AssignNode,\r\n  AstBlock,\r\n  AstNode,\r\n  BinOpNode,\r\n  ChainingCallsNode,\r\n  ChainingObjectAccessNode,\r\n  ConstNode,\r\n  CreateArrayNode,\r\n  CreateObjectNode,\r\n  ForNode,\r\n  FuncDefNode,\r\n  FunctionCallNode,\r\n  FunctionDefNode,\r\n  GetSingleVarNode,\r\n  IfNode,\r\n  ImportNode,\r\n  IsNullCoelsing,\r\n  LogicalOpNode,\r\n  OperationFuncs,\r\n  Primitive,\r\n  RaiseNode,\r\n  ReturnNode,\r\n  SetSingleVarNode,\r\n  TryExceptNode,\r\n  WhileNode\r\n} from '../common';\r\nimport { JspyEvalError, JspyError, getImportType } from '../common/utils';\r\nimport { Evaluator } from './evaluator';\r\nimport { BlockContext, cloneContext } from './scope';\r\n\r\n/**\r\n * This is copy/paste from Evaluator.\r\n * Sadly, we have to copy code around to support both async and non async methods.\r\n * So, any changes to this method, should be replicated in the evaluator.ts\r\n */\r\nexport class EvaluatorAsync {\r\n  private moduleParser: (modulePath: string) => Promise<AstBlock> = () =>\r\n    Promise.reject('Module parser is not registered!');\r\n  private jsonFileLoader: (jsonFilePath: string) => Promise<string> = () => Promise.reject('{}');\r\n  private blockContextFactory?: (modulePath: string, ast: AstBlock) => BlockContext;\r\n\r\n  registerModuleParser(moduleParser: (modulePath: string) => Promise<AstBlock>): EvaluatorAsync {\r\n    this.moduleParser = moduleParser;\r\n    return this;\r\n  }\r\n\r\n  registerJsonFileLoader(jsonFileLoader: (modulePath: string) => Promise<string>): EvaluatorAsync {\r\n    this.jsonFileLoader = jsonFileLoader;\r\n    return this;\r\n  }\r\n\r\n  registerBlockContextFactory(\r\n    blockContextFactory: (modulePath: string, ast: AstBlock) => BlockContext\r\n  ): EvaluatorAsync {\r\n    this.blockContextFactory = blockContextFactory;\r\n    return this;\r\n  }\r\n\r\n  async evalBlockAsync(ast: AstBlock, blockContext: BlockContext): Promise<unknown> {\r\n    let lastResult = null;\r\n\r\n    for (const node of ast?.funcs || []) {\r\n      const funcDef = node as FunctionDefNode;\r\n\r\n      // a child scope needs to be created here\r\n      const newScope = blockContext.blockScope;\r\n\r\n      const invoker = funcDef.isAsync\r\n        ? async (...args: unknown[]): Promise<unknown> =>\r\n            await this.jspyFuncInvokerAsync(funcDef, blockContext, ...args)\r\n        : (...args: unknown[]): unknown =>\r\n            new Evaluator().jspyFuncInvoker(funcDef, blockContext, ...args);\r\n\r\n      newScope.set(funcDef.funcAst.name, invoker);\r\n    }\r\n\r\n    for (let i = 0; i < ast.body.length; i++) {\r\n      const node = ast.body[i];\r\n      if (blockContext.cancellationToken.cancel) {\r\n        const loc = node.loc || [];\r\n\r\n        if (!blockContext.cancellationToken.message) {\r\n          blockContext.cancellationToken.message = `Cancelled. ${blockContext.moduleName}: ${loc[0]}, ${loc[1]}`;\r\n        }\r\n\r\n        return blockContext.cancellationToken.message;\r\n      }\r\n\r\n      if (node.type === 'comment') {\r\n        continue;\r\n      }\r\n      if (node.type === 'import') {\r\n        const importNode = node as ImportNode;\r\n        const iType = getImportType(importNode.module.name);\r\n\r\n        if (iType === 'json') {\r\n          const jsonValue = JSON.parse(await this.jsonFileLoader(importNode.module.name));\r\n          blockContext.blockScope.set(\r\n            importNode.module.alias || this.defaultModuleName(importNode.module.name),\r\n            jsonValue\r\n          );\r\n          continue;\r\n        } else if (iType !== 'jspyModule') {\r\n          // it is not JSPY import. It is JS and should be handled externally\r\n          continue;\r\n        }\r\n\r\n        if (typeof this.blockContextFactory !== 'function') {\r\n          throw new Error('blockContextFactory is not initialized');\r\n        }\r\n\r\n        const moduleAst = await this.moduleParser(importNode.module.name);\r\n        const moduleBlockContext = this.blockContextFactory(importNode.module.name, moduleAst);\r\n        await this.evalBlockAsync(moduleAst, moduleBlockContext);\r\n\r\n        let scope = blockContext.blockScope.getScope();\r\n\r\n        if (!importNode.parts?.length) {\r\n          // if no parts, then we need to assign to a separate object\r\n          scope = {};\r\n          blockContext.blockScope.set(\r\n            importNode.module.alias || this.defaultModuleName(importNode.module.name),\r\n            scope\r\n          );\r\n        }\r\n\r\n        this.assignFunctionsToScope(\r\n          scope,\r\n          moduleBlockContext,\r\n          moduleAst,\r\n          importNode.parts?.map(p => p.name)\r\n        );\r\n        continue;\r\n      }\r\n\r\n      try {\r\n        lastResult = await this.evalNodeAsync(node, blockContext);\r\n        if (blockContext.returnCalled) {\r\n          const res = blockContext.returnObject;\r\n          // stop processing return\r\n          if (ast.type == 'func' || ast.type == 'module') {\r\n            blockContext.returnCalled = false;\r\n            blockContext.returnObject = null;\r\n          }\r\n          return res;\r\n        }\r\n\r\n        if (blockContext.continueCalled) {\r\n          break;\r\n        }\r\n        if (blockContext.breakCalled) {\r\n          break;\r\n        }\r\n      } catch (err) {\r\n        const loc = node.loc ? node.loc : [0, 0];\r\n        if (err instanceof JspyError) {\r\n          throw err;\r\n        } else if (err instanceof JspyEvalError) {\r\n          throw err;\r\n        } else {\r\n          throw new JspyEvalError(\r\n            blockContext.moduleName,\r\n            loc[0],\r\n            loc[1],\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            (err as any).message || err\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return lastResult;\r\n  }\r\n\r\n  private assignFunctionsToScope(\r\n    scope: Record<string, unknown>,\r\n    moduleBlockContext: BlockContext,\r\n    moduleAst: AstBlock,\r\n    parts?: string[]\r\n  ): void {\r\n    const funcs = moduleAst.funcs.filter(f => !parts || parts.indexOf(f.funcAst?.name) >= 0);\r\n\r\n    for (let i = 0; i < funcs.length; i++) {\r\n      const funcDef = funcs[i] as FunctionDefNode;\r\n\r\n      const invoker = funcDef.isAsync\r\n        ? async (...args: unknown[]): Promise<unknown> =>\r\n            await this.jspyFuncInvokerAsync(funcDef, moduleBlockContext, ...args)\r\n        : (...args: unknown[]): unknown =>\r\n            new Evaluator().jspyFuncInvoker(funcDef, moduleBlockContext, ...args);\r\n\r\n      scope[funcDef.funcAst.name] = invoker;\r\n    }\r\n  }\r\n\r\n  private defaultModuleName(name: string): string {\r\n    return name.substring(name.lastIndexOf('/') + 1, name.lastIndexOf('.'));\r\n  }\r\n\r\n  private async jspyFuncInvokerAsync(\r\n    funcDef: FuncDefNode,\r\n    context: BlockContext,\r\n    ...args: unknown[]\r\n  ): Promise<unknown> {\r\n    const ast = Object.assign({}, funcDef.funcAst);\r\n    ast.type = 'func';\r\n\r\n    const blockContext = cloneContext(context);\r\n\r\n    // set parameters into new scope, based incomming arguments\r\n    for (let i = 0; i < funcDef.params?.length || 0; i++) {\r\n      const argValue = args?.length > i ? args[i] : null;\r\n      blockContext.blockScope.set(funcDef.params[i], argValue);\r\n    }\r\n\r\n    return await this.evalBlockAsync(ast, blockContext);\r\n  }\r\n\r\n  private async invokeFunctionAsync(\r\n    func: (...args: unknown[]) => unknown,\r\n    fps: unknown[],\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    loc?: { moduleName: string; line: number; column: number }\r\n  ): Promise<unknown> {\r\n    return await func(...fps);\r\n  }\r\n\r\n  private async evalNodeAsync(node: AstNode, blockContext: BlockContext): Promise<unknown> {\r\n    if (node.type === 'import') {\r\n      throw new Error('Import should be defined at the start');\r\n    }\r\n\r\n    if (node.type === 'comment') {\r\n      return null;\r\n    }\r\n\r\n    if (node.type === 'if') {\r\n      const ifNode = node as IfNode;\r\n      let doElse = true;\r\n\r\n      if (await this.evalNodeAsync(ifNode.conditionNode, blockContext)) {\r\n        await this.evalBlockAsync(\r\n          { name: blockContext.moduleName, type: 'if', body: ifNode.ifBody } as AstBlock,\r\n          blockContext\r\n        );\r\n        doElse = false;\r\n      } else if (ifNode.elifs?.length) {\r\n        for (let i = 0; i < ifNode.elifs.length; i++) {\r\n          const elIfNode = ifNode.elifs[i];\r\n\r\n          if (await this.evalNodeAsync(elIfNode.conditionNode, blockContext)) {\r\n            await this.evalBlockAsync(\r\n              { name: blockContext.moduleName, type: 'if', body: elIfNode.elifBody } as AstBlock,\r\n              blockContext\r\n            );\r\n            doElse = false;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (doElse && ifNode.elseBody) {\r\n        await this.evalBlockAsync(\r\n          { name: blockContext.moduleName, type: 'if', body: ifNode.elseBody } as AstBlock,\r\n          blockContext\r\n        );\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'raise') {\r\n      const raiseNode = node as RaiseNode;\r\n      const errorMessage = (await this.evalNodeAsync(\r\n        raiseNode.errorMessageAst,\r\n        blockContext\r\n      )) as string;\r\n      const err = new JspyError(\r\n        blockContext.moduleName,\r\n        raiseNode.loc[0],\r\n        raiseNode.loc[1],\r\n        raiseNode.errorName,\r\n        errorMessage\r\n      );\r\n      throw err;\r\n    }\r\n\r\n    if (node.type === 'tryExcept') {\r\n      const tryNode = node as TryExceptNode;\r\n      try {\r\n        await this.evalBlockAsync(\r\n          { name: blockContext.moduleName, type: 'trycatch', body: tryNode.tryBody } as AstBlock,\r\n          blockContext\r\n        );\r\n\r\n        if (tryNode.elseBody?.length || 0 > 0) {\r\n          await this.evalBlockAsync(\r\n            { name: blockContext.moduleName, type: 'trycatch', body: tryNode.elseBody } as AstBlock,\r\n            blockContext\r\n          );\r\n        }\r\n      } catch (err) {\r\n        // catches here all exceptions. Including JSPY Eval errors\r\n        const name = err instanceof JspyError ? (err as JspyError).name : typeof err;\r\n        const message =\r\n          err instanceof JspyError\r\n            ? (err as JspyError).message\r\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n              (err as any)?.message ?? String(err);\r\n        const moduleName = err instanceof JspyError ? (err as JspyError).module : 0;\r\n        const line = err instanceof JspyError ? (err as JspyError).line : 0;\r\n        const column = err instanceof JspyError ? (err as JspyError).column : 0;\r\n\r\n        const firstExept = tryNode.exepts[0];\r\n        const catchBody = firstExept.body;\r\n        const ctx = blockContext;\r\n        ctx.blockScope.set(firstExept.error?.alias || 'error', {\r\n          name,\r\n          message,\r\n          line,\r\n          column,\r\n          moduleName\r\n        });\r\n        await this.evalBlockAsync(\r\n          { name: blockContext.moduleName, type: 'trycatch', body: catchBody } as AstBlock,\r\n          ctx\r\n        );\r\n        ctx.blockScope.set(firstExept.error?.alias || 'error', null);\r\n      } finally {\r\n        if (tryNode.finallyBody?.length || 0 > 0) {\r\n          await this.evalBlockAsync(\r\n            {\r\n              name: blockContext.moduleName,\r\n              type: 'trycatch',\r\n              body: tryNode.finallyBody\r\n            } as AstBlock,\r\n            blockContext\r\n          );\r\n        }\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'return') {\r\n      const returnNode = node as ReturnNode;\r\n      blockContext.returnCalled = true;\r\n      blockContext.returnObject = returnNode.returnValue\r\n        ? await this.evalNodeAsync(returnNode.returnValue, blockContext)\r\n        : null;\r\n\r\n      return blockContext.returnObject;\r\n    }\r\n\r\n    if (node.type === 'continue') {\r\n      blockContext.continueCalled = true;\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'break') {\r\n      blockContext.breakCalled = true;\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'for') {\r\n      const forNode = node as ForNode;\r\n\r\n      const array = (await this.evalNodeAsync(forNode.sourceArray, blockContext)) as\r\n        | unknown[]\r\n        | string;\r\n      for (let i = 0; i < array.length; i++) {\r\n        const item = array[i];\r\n        blockContext.blockScope.set(forNode.itemVarName, item);\r\n        await this.evalBlockAsync(\r\n          { name: blockContext.moduleName, type: 'for', body: forNode.body } as AstBlock,\r\n          blockContext\r\n        );\r\n        if (blockContext.continueCalled) {\r\n          blockContext.continueCalled = false;\r\n        }\r\n        if (blockContext.breakCalled) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (blockContext.breakCalled) {\r\n        blockContext.breakCalled = false;\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'while') {\r\n      const whileNode = node as WhileNode;\r\n\r\n      while (await this.evalNodeAsync(whileNode.condition, blockContext)) {\r\n        await this.evalBlockAsync(\r\n          { name: blockContext.moduleName, type: 'while', body: whileNode.body } as AstBlock,\r\n          blockContext\r\n        );\r\n\r\n        if (blockContext.continueCalled) {\r\n          blockContext.continueCalled = false;\r\n        }\r\n        if (blockContext.breakCalled) {\r\n          break;\r\n        }\r\n      }\r\n      if (blockContext.breakCalled) {\r\n        blockContext.breakCalled = false;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'const') {\r\n      return (node as ConstNode).value;\r\n    }\r\n\r\n    if (node.type === 'getSingleVar') {\r\n      const name = (node as GetSingleVarNode).name;\r\n      const value = blockContext.blockScope.get(name);\r\n\r\n      if (value === undefined) {\r\n        if (name.charAt(name.length - 1) === ';') {\r\n          throw new Error(`Unexpected ';' in the end.`);\r\n        } else {\r\n          throw new Error(`Variable '${name}' is not defined.`);\r\n        }\r\n      }\r\n      return value;\r\n    }\r\n\r\n    if (node.type === 'binOp') {\r\n      const binOpNode = node as BinOpNode;\r\n      const left = await this.evalNodeAsync(binOpNode.left, blockContext);\r\n      const right = await this.evalNodeAsync(binOpNode.right, blockContext);\r\n\r\n      const func = OperationFuncs.get(binOpNode.op);\r\n      if (typeof func === 'function') return func(left as Primitive, right as Primitive);\r\n      else throw new Error('Unknown binary oprastion');\r\n    }\r\n\r\n    if (node.type === 'logicalOp') {\r\n      const logicalGroups = node as LogicalOpNode;\r\n      let ind = 0;\r\n      let gResult: unknown = true;\r\n\r\n      while (ind < logicalGroups.items.length) {\r\n        const eg = logicalGroups.items[ind++];\r\n\r\n        gResult = await this.evalNodeAsync(eg.node, blockContext);\r\n\r\n        if (eg.op === 'and' && !gResult) {\r\n          return false;\r\n        }\r\n        if (eg.op === 'or' && gResult) {\r\n          return gResult;\r\n        }\r\n      }\r\n\r\n      return gResult;\r\n    }\r\n\r\n    if (node.type === 'arrowFuncDef') {\r\n      const arrowFuncDef = node as ArrowFuncDefNode;\r\n\r\n      return (...args: unknown[]): unknown =>\r\n        new Evaluator().jspyFuncInvoker(arrowFuncDef, blockContext, ...args);\r\n    }\r\n\r\n    if (node.type === 'funcCall') {\r\n      const funcCallNode = node as FunctionCallNode;\r\n      const func = blockContext.blockScope.get(funcCallNode.name) as (\r\n        ...args: unknown[]\r\n      ) => unknown;\r\n\r\n      if (typeof func !== 'function') {\r\n        throw Error(`'${funcCallNode.name}' is not a function or not defined.`);\r\n      }\r\n\r\n      const pms = [];\r\n      for (const p of funcCallNode.paramNodes || []) {\r\n        pms.push(await this.evalNodeAsync(p, blockContext));\r\n      }\r\n\r\n      return await this.invokeFunctionAsync(func, pms, {\r\n        moduleName: blockContext.moduleName,\r\n        line: funcCallNode.loc[0],\r\n        column: funcCallNode.loc[0]\r\n      });\r\n    }\r\n\r\n    if (node.type === 'assign') {\r\n      const assignNode = node as AssignNode;\r\n\r\n      if (assignNode.target.type === 'getSingleVar') {\r\n        const node = assignNode.target as SetSingleVarNode;\r\n        blockContext.blockScope.set(\r\n          node.name,\r\n          await this.evalNodeAsync(assignNode.source, blockContext)\r\n        );\r\n      } else if (assignNode.target.type === 'chainingCalls') {\r\n        const targetNode = assignNode.target as ChainingCallsNode;\r\n\r\n        // create a node for all but last property token\r\n        // potentially it can go to parser\r\n        const targetObjectNode = new ChainingCallsNode(\r\n          targetNode.innerNodes.slice(0, targetNode.innerNodes.length - 1),\r\n          targetNode.loc\r\n        );\r\n        const targetObject = (await this.evalNodeAsync(targetObjectNode, blockContext)) as Record<\r\n          string,\r\n          unknown\r\n        >;\r\n\r\n        const lastInnerNode = targetNode.innerNodes[targetNode.innerNodes.length - 1];\r\n\r\n        let lastPropertyName = '';\r\n        if (lastInnerNode.type === 'getSingleVar') {\r\n          lastPropertyName = (lastInnerNode as GetSingleVarNode).name;\r\n        } else if (lastInnerNode.type === 'chainingObjectAccess') {\r\n          lastPropertyName = (await this.evalNodeAsync(\r\n            (lastInnerNode as ChainingObjectAccessNode).indexerBody,\r\n            blockContext\r\n          )) as string;\r\n        } else {\r\n          throw Error('Not implemented Assign operation with chaining calls');\r\n        }\r\n\r\n        targetObject[lastPropertyName] = await this.evalNodeAsync(assignNode.source, blockContext);\r\n      }\r\n\r\n      return null;\r\n    }\r\n\r\n    if (node.type === 'chainingCalls') {\r\n      return await this.resolveChainingCallsNode(node as ChainingCallsNode, blockContext);\r\n    }\r\n\r\n    if (node.type === 'createObject') {\r\n      const createObjectNode = node as CreateObjectNode;\r\n      const obj = {} as Record<string, unknown>;\r\n\r\n      for (const p of createObjectNode.props) {\r\n        obj[(await this.evalNodeAsync(p.name, blockContext)) as string] = await this.evalNodeAsync(\r\n          p.value,\r\n          blockContext\r\n        );\r\n      }\r\n\r\n      return obj;\r\n    }\r\n\r\n    if (node.type === 'createArray') {\r\n      const arrayNode = node as CreateArrayNode;\r\n      const res = [] as unknown[];\r\n\r\n      for (const item of arrayNode.items) {\r\n        res.push(await this.evalNodeAsync(item, blockContext));\r\n      }\r\n\r\n      return res;\r\n    }\r\n  }\r\n\r\n  private async resolveChainingCallsNode(\r\n    chNode: ChainingCallsNode,\r\n    blockContext: BlockContext\r\n  ): Promise<unknown> {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let startObject = (await this.evalNodeAsync(chNode.innerNodes[0], blockContext)) as any;\r\n\r\n    for (let i = 1; i < chNode.innerNodes.length; i++) {\r\n      const nestedProp = chNode.innerNodes[i];\r\n\r\n      if ((chNode.innerNodes[i - 1] as unknown as IsNullCoelsing).nullCoelsing && !startObject) {\r\n        startObject = {};\r\n      }\r\n\r\n      if (nestedProp.type === 'getSingleVar') {\r\n        startObject = startObject[(nestedProp as SetSingleVarNode).name] as unknown;\r\n      } else if (nestedProp.type === 'chainingObjectAccess') {\r\n        const node = nestedProp as ChainingObjectAccessNode;\r\n        // startObject = startObject[node.] as unknown;\r\n        startObject = startObject[\r\n          (await this.evalNodeAsync(node.indexerBody, blockContext)) as string\r\n        ] as unknown;\r\n      } else if (nestedProp.type === 'funcCall') {\r\n        const funcCallNode = nestedProp as FunctionCallNode;\r\n        const func = startObject[funcCallNode.name] as (...args: unknown[]) => unknown;\r\n\r\n        if (\r\n          (func === undefined || func === null) &&\r\n          (chNode.innerNodes[i - 1] as unknown as IsNullCoelsing).nullCoelsing\r\n        ) {\r\n          startObject = null;\r\n          continue;\r\n        }\r\n\r\n        if (typeof func !== 'function') {\r\n          throw Error(`'${funcCallNode.name}' is not a function or not defined.`);\r\n        }\r\n        const pms = [];\r\n        for (const p of funcCallNode.paramNodes || []) {\r\n          pms.push(await this.evalNodeAsync(p, blockContext));\r\n        }\r\n\r\n        startObject = await this.invokeFunctionAsync(func.bind(startObject), pms, {\r\n          moduleName: blockContext.moduleName,\r\n          line: funcCallNode.loc[0],\r\n          column: funcCallNode.loc[0]\r\n        });\r\n      } else {\r\n        throw Error(\"Can't resolve chainingCalls node\");\r\n      }\r\n    }\r\n\r\n    return startObject === undefined ? null : startObject;\r\n  }\r\n}\r\n","import { parseDatetimeOrNull } from './common/utils';\r\n\r\nexport const INITIAL_SCOPE = {\r\n  jsPython(): string {\r\n    return `JSPython v2.1.10 (c) 2022 FalconSoft Ltd. All rights reserved.`;\r\n  },\r\n  dateTime: (str: number | string | unknown = null): Date =>\r\n    parseDatetimeOrNull(str as string) || new Date(),\r\n  range: range,\r\n  print: (...args: unknown[]): unknown => {\r\n    console.log(...args);\r\n    return args.length > 0 ? args[0] : null;\r\n  },\r\n  isNull: (v: unknown, defValue: unknown = null): boolean | unknown =>\r\n    defValue === null ? v === null : v || defValue,\r\n  isDate: (d: unknown): boolean => d instanceof Date,\r\n  isFunction: (v: unknown): boolean => typeof v === 'function',\r\n  isString: (v: unknown): boolean => typeof v === 'string',\r\n  deleteProperty: (obj: Record<string, unknown>, propName: string): boolean => delete obj[propName],\r\n  Math: Math,\r\n  Object: Object,\r\n  Array: Array,\r\n  JSON: JSON,\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  printExecutionContext: (): void => {}, // will be overriden at runtime\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  getExecutionContext: (): Record<string, unknown> => ({}) // will be overriden at runtime\r\n};\r\n\r\n/**\r\n * This interface needs to be replaced\r\n */\r\nexport interface PackageToImport {\r\n  name: string;\r\n  properties?: { name: string; as?: string }[];\r\n  as?: string;\r\n}\r\n\r\nfunction range(start: number, stop = NaN, step = 1): number[] {\r\n  const arr: number[] = [];\r\n  const isStopNaN = isNaN(stop);\r\n  stop = isStopNaN ? start : stop;\r\n  start = isStopNaN ? 0 : start;\r\n  let i = start;\r\n  while (i < stop) {\r\n    arr.push(i);\r\n    i += step;\r\n  }\r\n  return arr;\r\n}\r\n","import {\r\n  BinOpNode,\r\n  ConstNode,\r\n  AstBlock,\r\n  Token,\r\n  AstNode,\r\n  Operators,\r\n  AssignNode,\r\n  TokenTypes,\r\n  GetSingleVarNode,\r\n  FunctionCallNode,\r\n  getTokenType,\r\n  getTokenValue,\r\n  isTokenTypeLiteral,\r\n  getStartLine,\r\n  getStartColumn,\r\n  getEndColumn,\r\n  getEndLine,\r\n  findOperators,\r\n  splitTokens,\r\n  findTokenValueIndex,\r\n  FunctionDefNode,\r\n  CreateObjectNode,\r\n  ObjectPropertyInfo,\r\n  CreateArrayNode,\r\n  ArrowFuncDefNode,\r\n  ExpressionOperators,\r\n  IfNode,\r\n  ForNode,\r\n  WhileNode,\r\n  ImportNode,\r\n  NameAlias,\r\n  ContinueNode,\r\n  BreakNode,\r\n  ReturnNode,\r\n  CommentNode,\r\n  getTokenLoc,\r\n  OperationTypes,\r\n  LogicalNodeItem,\r\n  LogicalOperators,\r\n  LogicalOpNode,\r\n  ComparisonOperators,\r\n  TryExceptNode,\r\n  ExceptBody,\r\n  RaiseNode,\r\n  findChainingCallTokensIndexes,\r\n  splitTokensByIndexes,\r\n  ChainingCallsNode,\r\n  ChainingObjectAccessNode,\r\n  ElifNode\r\n} from '../common';\r\nimport { JspyParserError } from '../common/utils';\r\n\r\nclass InstructionLine {\r\n  readonly tokens: Token[] = [];\r\n\r\n  startLine(): number {\r\n    return getStartLine(this.tokens[0]);\r\n  }\r\n\r\n  startColumn(): number {\r\n    return getStartColumn(this.tokens[0]);\r\n  }\r\n\r\n  endLine(): number {\r\n    return getEndLine(this.tokens[this.tokens.length - 1]);\r\n  }\r\n\r\n  endColumn(): number {\r\n    return getEndColumn(this.tokens[this.tokens.length - 1]);\r\n  }\r\n}\r\n\r\nexport class Parser {\r\n  private _currentToken: Token | null = null;\r\n  private _moduleName = '';\r\n\r\n  /**\r\n   * Parses tokens and return Ast - Abstract Syntax Tree for jsPython code\r\n   * @param tokens tokens\r\n   * @param options parsing options. By default it will exclude comments and include LOC (Line of code)\r\n   */\r\n  parse(tokens: Token[], name = 'main.jspy', type = 'module'): AstBlock {\r\n    this._moduleName = name;\r\n    const ast = { name, type, funcs: [], body: [] } as AstBlock;\r\n\r\n    if (!tokens || !tokens.length) {\r\n      return ast;\r\n    }\r\n\r\n    try {\r\n      // group all tokens into an Instruction lines.\r\n      const instructions = this.tokensToInstructionLines(tokens, 1);\r\n\r\n      // process all instructions\r\n      this.instructionsToNodes(instructions, ast);\r\n    } catch (error) {\r\n      const err = error as Error;\r\n      const token = this._currentToken ?? ({} as Token);\r\n      throw new JspyParserError(\r\n        ast.name,\r\n        getStartLine(token),\r\n        getStartColumn(token),\r\n        err.message || String(err)\r\n      );\r\n    }\r\n    return ast;\r\n  }\r\n\r\n  private instructionsToNodes(instructions: InstructionLine[], ast: AstBlock): void {\r\n    const getBody = (tokens: Token[], startTokenIndex: number): AstNode[] => {\r\n      const instructionLines = this.tokensToInstructionLines(\r\n        tokens,\r\n        getStartLine(tokens[startTokenIndex])\r\n      );\r\n      const bodyAst = { name: ast.name, body: [] as AstNode[], funcs: [] as AstNode[] } as AstBlock;\r\n      this.instructionsToNodes(instructionLines, bodyAst);\r\n      return bodyAst.body;\r\n    };\r\n\r\n    const findIndexes = (tkns: Token[], operation: OperationTypes, result: number[]): boolean => {\r\n      result.splice(0, result.length);\r\n      findOperators(tkns, operation).forEach(r => result.push(r));\r\n      return !!result.length;\r\n    };\r\n\r\n    for (let i = 0; i < instructions.length; i++) {\r\n      const instruction = instructions[i];\r\n\r\n      // remove comments\r\n      let tt = 0;\r\n      while (tt < instruction.tokens.length) {\r\n        if (getTokenType(instruction.tokens[tt]) === TokenTypes.Comment) {\r\n          instruction.tokens.splice(tt, 1);\r\n        } else {\r\n          tt++;\r\n        }\r\n      }\r\n      if (!instruction.tokens.length) {\r\n        continue;\r\n      }\r\n\r\n      const firstToken = instruction.tokens[0];\r\n      const secondToken = instruction.tokens.length > 1 ? instruction.tokens[1] : null;\r\n      this._currentToken = firstToken;\r\n\r\n      const logicOpIndexes: number[] = [];\r\n      const assignTokenIndexes: number[] = [];\r\n\r\n      if (getTokenType(firstToken) === TokenTypes.Comment) {\r\n        ast.body.push(\r\n          new CommentNode(getTokenValue(firstToken) as string, getTokenLoc(firstToken))\r\n        );\r\n      } else if (\r\n        getTokenValue(firstToken) === 'def' ||\r\n        (getTokenValue(firstToken) === 'async' && getTokenValue(secondToken) === 'def')\r\n      ) {\r\n        const isAsync = getTokenValue(firstToken) === 'async';\r\n        const funcName = getTokenValue(instruction.tokens[isAsync ? 2 : 1]) as string;\r\n        const paramsTokens = instruction.tokens.slice(\r\n          instruction.tokens.findIndex(tkns => getTokenValue(tkns) === '(') + 1,\r\n          instruction.tokens.findIndex(tkns => getTokenValue(tkns) === ')')\r\n        );\r\n\r\n        const params = splitTokens(paramsTokens, ',').map(t => getTokenValue(t[0]) as string);\r\n\r\n        const endDefOfDef = findTokenValueIndex(instruction.tokens, v => v === ':');\r\n\r\n        if (endDefOfDef === -1) {\r\n          throw `Can't find : for def`;\r\n        }\r\n\r\n        const instructionLines = this.tokensToInstructionLines(\r\n          instruction.tokens,\r\n          getStartLine(instruction.tokens[endDefOfDef + 1])\r\n        );\r\n        const funcAst = {\r\n          name: funcName,\r\n          body: [] as AstNode[],\r\n          funcs: [] as AstNode[]\r\n        } as AstBlock;\r\n        this.instructionsToNodes(instructionLines, funcAst);\r\n\r\n        ast.funcs.push(\r\n          new FunctionDefNode(funcAst, params, isAsync, getTokenLoc(instruction.tokens[0]))\r\n        );\r\n      } else if (getTokenValue(firstToken) === 'if') {\r\n        const endDefOfDef = findTokenValueIndex(instruction.tokens, v => v === ':');\r\n\r\n        if (endDefOfDef === -1) {\r\n          throw `Can't find : for if`;\r\n        }\r\n\r\n        const ifBody = getBody(instruction.tokens, endDefOfDef + 1);\r\n        const conditionTokens = instruction.tokens.slice(1, endDefOfDef);\r\n\r\n        const conditionNode = findIndexes(conditionTokens, OperationTypes.Logical, logicOpIndexes)\r\n          ? this.groupLogicalOperations(logicOpIndexes, conditionTokens)\r\n          : this.createExpressionNode(conditionTokens);\r\n\r\n        // elifs\r\n        const elifNodes: ElifNode[] = [];\r\n        while (\r\n          instructions.length > i + 1 &&\r\n          getTokenValue(instructions[i + 1].tokens[0]) === 'elif'\r\n        ) {\r\n          const elifInstruction = instructions[++i];\r\n\r\n          const endOfElif = findTokenValueIndex(elifInstruction.tokens, v => v === ':');\r\n\r\n          const conditionTokens = elifInstruction.tokens.slice(1, endDefOfDef);\r\n\r\n          const elifConditionNode = findIndexes(\r\n            conditionTokens,\r\n            OperationTypes.Logical,\r\n            logicOpIndexes\r\n          )\r\n            ? this.groupLogicalOperations(logicOpIndexes, conditionTokens)\r\n            : this.createExpressionNode(conditionTokens);\r\n\r\n          const elifBody = getBody(elifInstruction.tokens, endOfElif + 1);\r\n          elifNodes.push(\r\n            new ElifNode(elifConditionNode, elifBody, getTokenLoc(elifInstruction.tokens[0]))\r\n          );\r\n        }\r\n\r\n        // else\r\n        let elseBody: AstNode[] | undefined = undefined;\r\n        if (\r\n          instructions.length > i + 1 &&\r\n          getTokenValue(instructions[i + 1].tokens[0]) === 'else' &&\r\n          getTokenValue(instructions[i + 1].tokens[1]) === ':'\r\n        ) {\r\n          elseBody = getBody(instructions[i + 1].tokens, 2);\r\n          i++;\r\n        }\r\n\r\n        ast.body.push(\r\n          new IfNode(conditionNode, ifBody, elifNodes, elseBody, getTokenLoc(firstToken))\r\n        );\r\n      } else if (getTokenValue(firstToken) === 'try') {\r\n        if (getTokenValue(instruction.tokens[1]) !== ':') {\r\n          throw `'try' statement should be followed by ':'`;\r\n        }\r\n\r\n        const tryBody = getBody(instruction.tokens, 2);\r\n        const excepts: ExceptBody[] = [];\r\n\r\n        let elseBody: AstNode[] | undefined = undefined;\r\n        let finallyBody: AstNode[] | undefined = undefined;\r\n\r\n        while (\r\n          instructions.length > i + 1 &&\r\n          (getTokenValue(instructions[i + 1].tokens[0]) === 'else' ||\r\n            getTokenValue(instructions[i + 1].tokens[0]) === 'except' ||\r\n            getTokenValue(instructions[i + 1].tokens[0]) === 'finally')\r\n        ) {\r\n          if (getTokenValue(instructions[i + 1].tokens[0]) === 'else') {\r\n            if (elseBody) {\r\n              throw new Error(`Only one 'else' is allowed in a 'try'`);\r\n            }\r\n\r\n            elseBody = getBody(instructions[i + 1].tokens, 2);\r\n          }\r\n\r\n          if (getTokenValue(instructions[i + 1].tokens[0]) === 'finally') {\r\n            if (finallyBody) {\r\n              throw new Error(`Only one 'else' is allowed in a 'try'`);\r\n            }\r\n\r\n            finallyBody = getBody(instructions[i + 1].tokens, 2);\r\n          }\r\n\r\n          if (getTokenValue(instructions[i + 1].tokens[0]) === 'except') {\r\n            const endIndex = findTokenValueIndex(instructions[i + 1].tokens, v => v === ':');\r\n            const except = {} as ExceptBody;\r\n\r\n            if (endIndex === 2) {\r\n              except.error = { name: getTokenValue(instructions[i + 1].tokens[1]) } as NameAlias;\r\n            } else if (endIndex === 3) {\r\n              except.error = {\r\n                name: getTokenValue(instructions[i + 1].tokens[1]),\r\n                alias: getTokenValue(instructions[i + 1].tokens[2])\r\n              } as NameAlias;\r\n            } else if (endIndex === 4) {\r\n              except.error = {\r\n                name: getTokenValue(instructions[i + 1].tokens[1]),\r\n                alias: getTokenValue(instructions[i + 1].tokens[3])\r\n              } as NameAlias;\r\n            } else if (endIndex !== 1) {\r\n              throw new Error(\r\n                `Incorrect 'except:' statement. Valid stats: (except: or except Error: or except Error as e:)`\r\n              );\r\n            }\r\n\r\n            except.body = getBody(instructions[i + 1].tokens, endIndex + 1);\r\n\r\n            excepts.push(except);\r\n          }\r\n\r\n          i++;\r\n        }\r\n\r\n        if (!excepts.length) {\r\n          throw new Error('Except: is missing');\r\n        }\r\n\r\n        ast.body.push(\r\n          new TryExceptNode(tryBody, excepts, elseBody, finallyBody, getTokenLoc(firstToken))\r\n        );\r\n      } else if (getTokenValue(firstToken) === 'continue') {\r\n        ast.body.push(new ContinueNode());\r\n      } else if (getTokenValue(firstToken) === 'break') {\r\n        ast.body.push(new BreakNode());\r\n      } else if (getTokenValue(firstToken) === 'return') {\r\n        ast.body.push(\r\n          new ReturnNode(\r\n            instruction.tokens.length > 1\r\n              ? this.createExpressionNode(instruction.tokens.slice(1))\r\n              : undefined,\r\n            getTokenLoc(firstToken)\r\n          )\r\n        );\r\n      } else if (getTokenValue(firstToken) === 'raise') {\r\n        if (instruction.tokens.length === 1) {\r\n          throw new Error(`Incorrect 'raise' usage. Please specify error name and message `);\r\n        }\r\n        const errorName = getTokenValue(instruction.tokens[1]) as string;\r\n\r\n        // const errorMessage =\r\n        //   instruction.tokens.length == 5 &&\r\n        //   getTokenValue(instruction.tokens[2]) === '(' &&\r\n        //   getTokenValue(instruction.tokens[4]) === ')'\r\n        //     ? (getTokenValue(instruction.tokens[3]) as string)\r\n        //     : undefined;\r\n\r\n        const errMsg = this.createExpressionNode(instruction.tokens.slice(1));\r\n\r\n        ast.body.push(new RaiseNode(errorName, errMsg, getTokenLoc(firstToken)));\r\n      } else if (getTokenValue(firstToken) === 'for') {\r\n        const endDefOfDef = findTokenValueIndex(instruction.tokens, v => v === ':');\r\n\r\n        if (endDefOfDef === -1) {\r\n          throw `Can't find : for if`;\r\n        }\r\n\r\n        const itemVarName = getTokenValue(instruction.tokens[1]) as string;\r\n        const sourceArray = this.createExpressionNode(instruction.tokens.slice(3, endDefOfDef));\r\n        const forBody = getBody(instruction.tokens, endDefOfDef + 1);\r\n\r\n        ast.body.push(new ForNode(sourceArray, itemVarName, forBody, getTokenLoc(firstToken)));\r\n      } else if (getTokenValue(firstToken) === 'while') {\r\n        const endDefOfDef = findTokenValueIndex(instruction.tokens, v => v === ':');\r\n\r\n        if (endDefOfDef === -1) {\r\n          throw `Can't find : for [while]`;\r\n        }\r\n\r\n        const conditionTokens = instruction.tokens.slice(1, endDefOfDef);\r\n        const conditionNode = findIndexes(conditionTokens, OperationTypes.Logical, logicOpIndexes)\r\n          ? this.groupLogicalOperations(logicOpIndexes, conditionTokens)\r\n          : this.createExpressionNode(conditionTokens);\r\n\r\n        const body = getBody(instruction.tokens, endDefOfDef + 1);\r\n\r\n        ast.body.push(new WhileNode(conditionNode, body, getTokenLoc(firstToken)));\r\n      } else if (getTokenValue(firstToken) === 'import') {\r\n        let asIndex = findTokenValueIndex(instruction.tokens, v => v === 'as');\r\n        if (asIndex < 0) {\r\n          asIndex = instruction.tokens.length;\r\n        }\r\n\r\n        const module = {\r\n          name: instruction.tokens\r\n            .slice(1, asIndex)\r\n            .map(t => getTokenValue(t))\r\n            .join(''),\r\n          alias:\r\n            instruction.tokens\r\n              .slice(asIndex + 1)\r\n              .map(t => getTokenValue(t))\r\n              .join('') || undefined\r\n        } as NameAlias;\r\n\r\n        const body = {} as AstBlock; // empty for now\r\n        ast.body.push(new ImportNode(module, body, undefined, getTokenLoc(firstToken)));\r\n      } else if (getTokenValue(firstToken) === 'from') {\r\n        const importIndex = findTokenValueIndex(instruction.tokens, v => v === 'import');\r\n        if (importIndex < 0) {\r\n          throw Error(`'import' must follow 'from'`);\r\n        }\r\n\r\n        const module = {\r\n          name: instruction.tokens\r\n            .slice(1, importIndex)\r\n            .map(t => getTokenValue(t))\r\n            .join('')\r\n        } as NameAlias;\r\n\r\n        const parts = splitTokens(instruction.tokens.slice(importIndex + 1), ',').map(t => {\r\n          return {\r\n            name: getTokenValue(t[0]),\r\n            alias: t.length === 3 ? getTokenValue(t[2]) : undefined\r\n          } as NameAlias;\r\n        });\r\n\r\n        const body = {} as AstBlock; // empty for now\r\n\r\n        ast.body.push(new ImportNode(module, body, parts, getTokenLoc(firstToken)));\r\n      } else if (findIndexes(instruction.tokens, OperationTypes.Assignment, assignTokenIndexes)) {\r\n        const assignTokens = splitTokens(instruction.tokens, '=');\r\n        const target = this.createExpressionNode(assignTokens[0]);\r\n        const source = this.createExpressionNode(assignTokens[1]);\r\n        ast.body.push(new AssignNode(target, source, getTokenLoc(assignTokens[0][0])));\r\n      } else if (findIndexes(instruction.tokens, OperationTypes.Logical, logicOpIndexes)) {\r\n        ast.body.push(this.groupLogicalOperations(logicOpIndexes, instruction.tokens));\r\n      } else {\r\n        ast.body.push(this.createExpressionNode(instruction.tokens));\r\n      }\r\n    }\r\n  }\r\n\r\n  private sliceWithBrackets(a: Token[], begin: number, end: number): Token[] {\r\n    // if expression is in brackets, then we need clean brackets\r\n    if (getTokenValue(a[begin]) === '(' && getTokenType(a[begin]) !== TokenTypes.LiteralString) {\r\n      begin++;\r\n      end--;\r\n    }\r\n\r\n    return a.slice(begin, end);\r\n  }\r\n\r\n  private groupComparisonOperations(indexes: number[], tokens: Token[]): AstNode {\r\n    const start = 0;\r\n\r\n    let leftNode: AstNode | null = null;\r\n    for (let i = 0; i < indexes.length; i++) {\r\n      const opToken = getTokenValue(tokens[indexes[i]]) as ComparisonOperators;\r\n      leftNode = leftNode\r\n        ? leftNode\r\n        : this.createExpressionNode(this.sliceWithBrackets(tokens, start, indexes[i]));\r\n\r\n      const endInd = i + 1 < indexes.length ? indexes[i + 1] : tokens.length;\r\n      const rightNode = this.createExpressionNode(\r\n        this.sliceWithBrackets(tokens, indexes[i] + 1, endInd)\r\n      );\r\n\r\n      leftNode = new BinOpNode(leftNode, opToken, rightNode, getTokenLoc(tokens[0]));\r\n    }\r\n\r\n    return leftNode as AstNode;\r\n  }\r\n\r\n  private groupLogicalOperations(logicOp: number[], tokens: Token[]): LogicalOpNode {\r\n    let start = 0;\r\n    const logicItems: LogicalNodeItem[] = [];\r\n    for (let i = 0; i < logicOp.length; i++) {\r\n      const opToken = tokens[logicOp[i]];\r\n      const logicalSlice = this.sliceWithBrackets(tokens, start, logicOp[i]);\r\n      logicItems.push({\r\n        node: this.createExpressionNode(logicalSlice),\r\n        op: getTokenValue(opToken) as LogicalOperators\r\n      });\r\n\r\n      start = logicOp[i] + 1;\r\n    }\r\n\r\n    logicItems.push({\r\n      node: this.createExpressionNode(this.sliceWithBrackets(tokens, start, tokens.length))\r\n    } as LogicalNodeItem);\r\n\r\n    const lop = new LogicalOpNode(logicItems, getTokenLoc(tokens[0]));\r\n    return lop;\r\n  }\r\n\r\n  private tokensToInstructionLines(tokens: Token[], startLine: number): InstructionLine[] {\r\n    const lines: InstructionLine[] = [];\r\n\r\n    let column = 0;\r\n    let currentLine = startLine;\r\n    let line = new InstructionLine();\r\n    for (let i = 0; i < tokens.length; i++) {\r\n      const token = tokens[i];\r\n      const sLine = getStartLine(token);\r\n      const sColumn = getStartColumn(token);\r\n      const value = getTokenValue(token);\r\n      this._currentToken = token;\r\n\r\n      if (sLine >= startLine) {\r\n        if (currentLine !== sLine) {\r\n          currentLine = sLine;\r\n        }\r\n\r\n        if (column === sColumn && !')}]'.includes(value as string)) {\r\n          currentLine = sLine;\r\n          lines.push(line);\r\n          line = new InstructionLine();\r\n        }\r\n\r\n        line.tokens.push(token);\r\n\r\n        // first line defines a minimum indent\r\n        if (column === 0) {\r\n          column = sColumn;\r\n        }\r\n\r\n        // stop looping through if line has less indent\r\n        // it means the corrent block finished\r\n        if (sColumn < column) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (line.tokens.length) {\r\n      lines.push(line);\r\n    }\r\n\r\n    return lines;\r\n  }\r\n\r\n  private createExpressionNode(tokens: Token[]): AstNode {\r\n    if (tokens.length === 0) {\r\n      throw new Error(`Tokens length can't empty.`);\r\n    }\r\n    const lastToken = tokens[tokens.length - 1];\r\n    if (getTokenValue(lastToken) === ';' && getTokenType(lastToken) !== TokenTypes.LiteralString) {\r\n      throw new Error(`Unexpected symbol ';' in the end`);\r\n    }\r\n\r\n    this._currentToken = tokens[0];\r\n\r\n    // const or variable\r\n    if (tokens.length === 1 || (tokens.length === 2 && getTokenValue(tokens[1]) === '?')) {\r\n      const firstToken = tokens[0];\r\n      const tokenType = getTokenType(firstToken);\r\n\r\n      if (isTokenTypeLiteral(tokenType)) {\r\n        return new ConstNode(firstToken);\r\n      } else if (tokenType === TokenTypes.Identifier) {\r\n        return new GetSingleVarNode(\r\n          firstToken,\r\n          (tokens.length === 2 && getTokenValue(tokens[1]) === '?') || undefined\r\n        );\r\n      }\r\n\r\n      throw Error(`Unhandled single token: '${JSON.stringify(firstToken)}'`);\r\n    }\r\n\r\n    // arrow function\r\n    const arrowFuncParts = splitTokens(tokens, '=>');\r\n    if (arrowFuncParts.length > 1) {\r\n      const pArray =\r\n        getTokenValue(arrowFuncParts[0][0]) === '('\r\n          ? arrowFuncParts[0].splice(1, arrowFuncParts[0].length - 2)\r\n          : arrowFuncParts[0];\r\n      const params = splitTokens(pArray, ',').map(t => getTokenValue(t[0]) as string);\r\n\r\n      const instructionLines = this.tokensToInstructionLines(arrowFuncParts[1], 0);\r\n      const funcAst = {\r\n        name: this._moduleName,\r\n        body: [] as AstNode[],\r\n        funcs: [] as AstNode[]\r\n      } as AstBlock;\r\n      this.instructionsToNodes(instructionLines, funcAst);\r\n\r\n      return new ArrowFuncDefNode(funcAst, params, getTokenLoc(tokens[0]));\r\n    }\r\n\r\n    // comparison operations\r\n    const comparissonIndexes = findOperators(tokens, OperationTypes.Comparison);\r\n    if (comparissonIndexes.length) {\r\n      return this.groupComparisonOperations(comparissonIndexes, tokens);\r\n    }\r\n\r\n    // create arithmetic expression\r\n    const ops = findOperators(tokens);\r\n    if (ops.length) {\r\n      let prevNode: AstNode | null = null;\r\n      for (let i = 0; i < ops.length; i++) {\r\n        const opIndex = ops[i];\r\n        const op = getTokenValue(tokens[opIndex]) as Operators;\r\n\r\n        let nextOpIndex = i + 1 < ops.length ? ops[i + 1] : null;\r\n        let nextOp = nextOpIndex !== null ? getTokenValue(tokens[nextOpIndex]) : null;\r\n        if (nextOpIndex !== null && (nextOp === '*' || nextOp === '/')) {\r\n          let rightNode: AstNode | null = null;\r\n          // iterate through all continuous '*', '/' operations\r\n          do {\r\n            const nextOpIndex2 = i + 2 < ops.length ? ops[i + 2] : null;\r\n\r\n            const leftSlice2 = this.sliceWithBrackets(tokens, opIndex + 1, nextOpIndex);\r\n            const rightSlice2 = this.sliceWithBrackets(\r\n              tokens,\r\n              nextOpIndex + 1,\r\n              nextOpIndex2 || tokens.length\r\n            );\r\n\r\n            const left2 = this.createExpressionNode(leftSlice2);\r\n            const right2 = this.createExpressionNode(rightSlice2);\r\n            rightNode = new BinOpNode(left2, nextOp, right2, getTokenLoc(tokens[opIndex + 1]));\r\n\r\n            i++;\r\n            nextOpIndex = i + 1 < ops.length ? ops[i + 1] : null;\r\n            nextOp = nextOpIndex !== null ? getTokenValue(tokens[nextOpIndex]) : null;\r\n          } while (nextOpIndex !== null && (nextOp === '*' || nextOp === '/'));\r\n\r\n          // add up result\r\n          if (prevNode === null) {\r\n            const leftSlice = this.sliceWithBrackets(tokens, 0, opIndex);\r\n            prevNode = this.createExpressionNode(leftSlice);\r\n          }\r\n          prevNode = new BinOpNode(\r\n            prevNode,\r\n            op as ExpressionOperators,\r\n            rightNode,\r\n            getTokenLoc(tokens[0])\r\n          );\r\n        } else {\r\n          const leftSlice = prevNode ? [] : this.sliceWithBrackets(tokens, 0, opIndex);\r\n          const rightSlice = this.sliceWithBrackets(\r\n            tokens,\r\n            opIndex + 1,\r\n            nextOpIndex || tokens.length\r\n          );\r\n          const left: AstNode = prevNode || this.createExpressionNode(leftSlice);\r\n          const right = this.createExpressionNode(rightSlice);\r\n          prevNode = new BinOpNode(left, op as ExpressionOperators, right, getTokenLoc(tokens[0]));\r\n        }\r\n      }\r\n\r\n      if (prevNode === null) {\r\n        throw Error(`Can't create node ...`);\r\n      }\r\n\r\n      return prevNode;\r\n    }\r\n\r\n    // create chaining calls\r\n\r\n    const inds = findChainingCallTokensIndexes(tokens);\r\n\r\n    if (inds.length > 0) {\r\n      const chainingGroup = splitTokensByIndexes(tokens, inds);\r\n      const innerNodes: AstNode[] = [];\r\n\r\n      for (let i = 0; i < chainingGroup.length; i++) {\r\n        const chainLinkTokenks = chainingGroup[i];\r\n\r\n        if (i !== 0 && getTokenValue(chainLinkTokenks[0]) === '[') {\r\n          const nullCoelsing = getTokenValue(chainLinkTokenks[chainLinkTokenks.length - 1]) === '?';\r\n          if (nullCoelsing) {\r\n            chainLinkTokenks.pop();\r\n          }\r\n          const paramsTokensSlice = chainLinkTokenks.slice(1, chainLinkTokenks.length - 1);\r\n          const paramsNodes = this.createExpressionNode(paramsTokensSlice);\r\n\r\n          innerNodes.push(\r\n            new ChainingObjectAccessNode(\r\n              paramsNodes,\r\n              nullCoelsing,\r\n              getTokenLoc(chainLinkTokenks[0])\r\n            )\r\n          );\r\n          continue;\r\n        }\r\n\r\n        innerNodes.push(this.createExpressionNode(chainLinkTokenks));\r\n      }\r\n\r\n      return new ChainingCallsNode(innerNodes, getTokenLoc(tokens[0]));\r\n    }\r\n\r\n    // create function call node\r\n    if (tokens.length > 2 && getTokenValue(tokens[1]) === '(') {\r\n      const isNullCoelsing = getTokenValue(tokens[tokens.length - 1]) === '?';\r\n      if (isNullCoelsing) {\r\n        // remove '?'\r\n        tokens.pop();\r\n      }\r\n      const name = getTokenValue(tokens[0]) as string;\r\n      const paramsTokensSlice = tokens.slice(2, tokens.length - 1);\r\n      const paramsTokens = splitTokens(paramsTokensSlice, ',');\r\n      const paramsNodes = paramsTokens.map(tkns => this.createExpressionNode(tkns));\r\n      const node = new FunctionCallNode(name, paramsNodes, getTokenLoc(tokens[0]));\r\n      node.nullCoelsing = isNullCoelsing || undefined;\r\n      return node;\r\n    }\r\n\r\n    // create Object Node\r\n    if (getTokenValue(tokens[0]) === '{' && getTokenValue(tokens[tokens.length - 1]) === '}') {\r\n      const keyValueTokens = splitTokens(tokens.splice(1, tokens.length - 2), ',');\r\n      const props = [] as ObjectPropertyInfo[];\r\n      for (let i = 0; i < keyValueTokens.length; i++) {\r\n        if (!keyValueTokens[i].length) {\r\n          continue;\r\n        }\r\n        const keyValue = splitTokens(keyValueTokens[i], ':');\r\n        if (keyValue.length === 1) {\r\n          const pInfo = {\r\n            name: new ConstNode(keyValue[0][0]),\r\n            value: this.createExpressionNode(keyValue[0])\r\n          } as ObjectPropertyInfo;\r\n\r\n          props.push(pInfo);\r\n        } else if (keyValue.length === 2) {\r\n          let name: AstNode | null = null;\r\n          const namePart = keyValue[0];\r\n\r\n          if (namePart.length === 1) {\r\n            name = new ConstNode(namePart[0]);\r\n          } else if (\r\n            getTokenValue(namePart[0]) === '[' &&\r\n            getTokenValue(namePart[namePart.length - 1]) === ']'\r\n          ) {\r\n            name = this.createExpressionNode(namePart.slice(1, namePart.length - 1));\r\n          } else {\r\n            throw new Error(\r\n              `Incorrect JSON. Can't resolve Key field. That should either constant or expression in []`\r\n            );\r\n          }\r\n\r\n          const pInfo = {\r\n            name,\r\n            value: this.createExpressionNode(keyValue[1])\r\n          } as ObjectPropertyInfo;\r\n\r\n          props.push(pInfo);\r\n        } else {\r\n          throw Error('Incorrect JSON');\r\n        }\r\n      }\r\n\r\n      return new CreateObjectNode(props, getTokenLoc(tokens[0]));\r\n    }\r\n\r\n    // create Array Node\r\n    if (getTokenValue(tokens[0]) === '[' && getTokenValue(tokens[tokens.length - 1]) === ']') {\r\n      const items = splitTokens(tokens.splice(1, tokens.length - 2), ',')\r\n        .filter(tkns => tkns?.length)\r\n        .map(tkns => this.createExpressionNode(tkns));\r\n\r\n      return new CreateArrayNode(items, getTokenLoc(tokens[0]));\r\n    }\r\n\r\n    throw Error(`Undefined node '${getTokenValue(tokens[0])}'.`);\r\n  }\r\n}\r\n","import { getTokenType, getTokenValue, Token, TokenTypes } from '../common';\r\n\r\nconst SeparatorsMap: Record<string, string[]> = {\r\n  '\\n': ['\\n'],\r\n  '=': ['=', '==', '=>'],\r\n\r\n  '+': ['+', '++', '+='],\r\n  '-': ['-', '--', '-='],\r\n  '*': ['*', '**', '*='],\r\n  '/': ['/', '//', '/='],\r\n\r\n  '.': ['.'],\r\n  '?': ['?'],\r\n  '!': ['!='],\r\n  ':': [':'],\r\n  ',': [','],\r\n\r\n  '>': ['>', '>='],\r\n  '<': ['<', '<=', '<>'],\r\n\r\n  '(': ['('],\r\n  ')': [')'],\r\n  '{': ['{'],\r\n  '}': ['}'],\r\n  '[': ['['],\r\n  ']': [']']\r\n};\r\n\r\nconst escapeChars = ['\"', \"'\", '\\\\'];\r\nconst Keywords: string[] = ['async', 'def', 'for', 'while', 'if', 'return', 'in'];\r\n\r\nexport class Tokenizer {\r\n  private _startLine = 1;\r\n  private _startColumn = 1;\r\n  private _currentLine = 1;\r\n  private _currentColumn = 1;\r\n  private _tokenText = '';\r\n  private _cursor = 0;\r\n  private _script = '';\r\n\r\n  private get tokenText(): string {\r\n    return this._tokenText;\r\n  }\r\n  private set tokenText(value: string) {\r\n    if (!this._tokenText && value) {\r\n      this._startLine = this._currentLine;\r\n      this._startColumn = this._currentColumn;\r\n    }\r\n    this._tokenText = value;\r\n  }\r\n\r\n  /**\r\n   * Splits script code into a tokens\r\n   * @param script A jsPython text\r\n   */\r\n  tokenize(script: string): Token[] {\r\n    if (!script || !script.length) {\r\n      return [];\r\n    }\r\n\r\n    script = script\r\n      // eslint-disable-next-line no-control-regex\r\n      .replace(new RegExp('\\t', 'g'), '  ') // replace all tabs with 2 spaces\r\n      // eslint-disable-next-line no-control-regex\r\n      .replace(new RegExp('\\r', 'g'), ''); // remove all \\r symbols\r\n    this._script = script;\r\n\r\n    this._cursor = 0;\r\n    this._startLine = 1;\r\n    this._startColumn = 1;\r\n    this._currentLine = 1;\r\n    this._currentColumn = 1;\r\n\r\n    const tokens: Token[] = [];\r\n\r\n    let first = true;\r\n    // handle initial spaces\r\n    while (script[this._cursor] === '\\n') {\r\n      this.incrementCursor();\r\n      if (first) {\r\n        this._currentLine++;\r\n        first = false;\r\n      }\r\n      this._currentColumn = 1;\r\n    }\r\n\r\n    do {\r\n      const symbol = script[this._cursor];\r\n\r\n      if (symbol == ' ' && this.tokenText.length !== 0) {\r\n        this.tokenText = this.processToken(this.tokenText, tokens);\r\n        continue;\r\n      } else if (SeparatorsMap[symbol] !== undefined && !this.isPartOfNumber(symbol, tokens)) {\r\n        // handle numbers with floating point e.g. 3.14\r\n        this.tokenText = this.processToken(this.tokenText, tokens);\r\n        this.tokenText = symbol;\r\n\r\n        const sepsMap = SeparatorsMap[symbol];\r\n\r\n        if (sepsMap.length >= 1) {\r\n          // process longer operators\r\n          while (sepsMap.includes(this.tokenText + script[this._cursor + 1])) {\r\n            this.tokenText += script[this.incrementCursor()];\r\n          }\r\n        }\r\n        this.tokenText = this.processToken(this.tokenText, tokens, false, TokenTypes.Operator);\r\n      } else if (symbol === '#') {\r\n        let first = true;\r\n        while (script[this.incrementCursor()] !== '\\n') {\r\n          this.tokenText += script[this._cursor];\r\n\r\n          // correct start column\r\n          if (first) {\r\n            first = false;\r\n            this._startColumn = this._startColumn - 1;\r\n          }\r\n\r\n          if (this._cursor + 1 >= script.length) break;\r\n        }\r\n        this.tokenText = this.processToken(this.tokenText, tokens, true, TokenTypes.Comment);\r\n      } else if (symbol === '\"' || symbol === \"'\") {\r\n        // remember either it is single or double quote\r\n        const q = symbol;\r\n        // we are not expecting token to be added here.\r\n        // it should pass a failt to parser\r\n        this.tokenText = this.processToken(this.tokenText, tokens);\r\n\r\n        // handle \"\"\" comment \"\"\"\"\r\n        if (script[this._cursor + 1] === q && script[this._cursor + 2] === q) {\r\n          const cLine = this._currentLine;\r\n          const cColumn = this._currentColumn;\r\n          this.incrementCursor(2);\r\n          const passCond = true;\r\n          while (passCond) {\r\n            this.tokenText += script[this.incrementCursor()];\r\n            if (\r\n              this._cursor + 3 >= script.length ||\r\n              (script[this._cursor + 1] === q &&\r\n                script[this._cursor + 2] === q &&\r\n                script[this._cursor + 3] === q)\r\n            ) {\r\n              break;\r\n            }\r\n          }\r\n          // a special case when multiline string\r\n          this._startLine = cLine;\r\n          this._startColumn = cColumn;\r\n\r\n          this.incrementCursor(3);\r\n        } else {\r\n          while (script[this.incrementCursor()] !== q) {\r\n            if (\r\n              script[this._cursor] === '\\\\' &&\r\n              escapeChars.indexOf(script[this._cursor + 1]) >= 0\r\n            ) {\r\n              this._cursor++;\r\n            }\r\n\r\n            this.tokenText += script[this._cursor];\r\n            if (this._cursor + 1 >= script.length) {\r\n              throw new Error(`Line ${this._startLine}: End of string missing.`);\r\n            }\r\n          }\r\n\r\n          //start column needs to take into account a begining quote, not just a string\r\n          this._startColumn--;\r\n        }\r\n\r\n        // a special case when empty string\r\n        if (this.tokenText.length === 0) {\r\n          this._startLine = this._currentLine;\r\n          this._startColumn = this._currentColumn;\r\n        }\r\n        this.tokenText = this.processToken(this.tokenText, tokens, true, TokenTypes.LiteralString);\r\n      } else if (symbol != ' ') {\r\n        this.tokenText += symbol;\r\n      }\r\n    } while (this.incrementCursor() < script.length);\r\n\r\n    this.processToken(this.tokenText, tokens);\r\n\r\n    return tokens;\r\n  }\r\n\r\n  private incrementCursor(count = 1): number {\r\n    for (let i = 0; i < count; i++) {\r\n      this._cursor = this._cursor + 1;\r\n      if (this._script[this._cursor] === '\\n') {\r\n        this._currentLine++;\r\n        this._currentColumn = 0;\r\n      } else {\r\n        this._currentColumn++;\r\n      }\r\n    }\r\n\r\n    return this._cursor;\r\n  }\r\n\r\n  private recognizeToken(\r\n    tokenText: string,\r\n    type: TokenTypes | null = null\r\n  ): { value: string | number | boolean | null; type: TokenTypes } {\r\n    let value: string | number | boolean | null = tokenText;\r\n\r\n    if (type === null) {\r\n      if (tokenText === 'null') {\r\n        type = TokenTypes.LiteralNull;\r\n        value = null;\r\n      } else if (tokenText === 'true' || tokenText === 'false') {\r\n        type = TokenTypes.LiteralBool;\r\n        value = tokenText === 'true';\r\n      } else if (this.parseNumberOrNull(tokenText) !== null) {\r\n        type = TokenTypes.LiteralNumber;\r\n        value = this.parseNumberOrNull(tokenText);\r\n      } else if (Keywords.indexOf(tokenText) >= 0) {\r\n        type = TokenTypes.Keyword;\r\n      } else {\r\n        type = TokenTypes.Identifier;\r\n      }\r\n    }\r\n\r\n    return {\r\n      value: value,\r\n      type: type\r\n    };\r\n  }\r\n\r\n  private processToken(\r\n    strToken: string,\r\n    tokens: Token[],\r\n    allowEmptyString = false,\r\n    type: TokenTypes | null = null\r\n  ): string {\r\n    // ignore empty tokens\r\n    if ((!strToken.length && !allowEmptyString) || strToken === '\\n') return '';\r\n\r\n    const token = this.recognizeToken(strToken, type);\r\n    tokens.push([\r\n      token.value,\r\n      Uint16Array.of(\r\n        token.type as number,\r\n        this._startLine,\r\n        this._startColumn,\r\n        this._currentLine,\r\n        this._currentColumn\r\n      )\r\n    ] as Token);\r\n    return '';\r\n  }\r\n\r\n  private parseNumberOrNull(value: string | number): number | null {\r\n    if (typeof value === 'number') {\r\n      return value;\r\n    }\r\n\r\n    if (!value || typeof value !== 'string') {\r\n      return null;\r\n    }\r\n\r\n    value = value.trim();\r\n\r\n    // Just to make sure string contains digits only and '.', ','. Otherwise, parseFloat can incorrectly parse into number\r\n    for (let i = value.length - 1; i >= 0; i--) {\r\n      const d = value.charCodeAt(i);\r\n      if (d < 48 || d > 57) {\r\n        // '.' - 46 ',' - 44 '-' - 45(but only first char)\r\n        if (d !== 46 && d !== 44 && (d !== 45 || i !== 0)) return null;\r\n      }\r\n    }\r\n\r\n    const res = parseFloat(value);\r\n    return !isNaN(res) ? res : null;\r\n  }\r\n\r\n  private isPartOfNumber(symbol: string, currentTokens: Token[]): boolean {\r\n    if (symbol === '-' && !this.tokenText.length) {\r\n      // '-' needs to be handled e.g. -3; 2 + -2 etc\r\n      const prevToken = currentTokens.length !== 0 ? currentTokens[currentTokens.length - 1] : null;\r\n      return (\r\n        prevToken === null ||\r\n        (getTokenType(prevToken) === TokenTypes.Operator && getTokenValue(prevToken) !== ')')\r\n      );\r\n    } else if (symbol === '.' && this.parseNumberOrNull(this.tokenText) !== null) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import { AstBlock, ImportNode, Token } from './common';\r\nimport { getImportType } from './common/utils';\r\nimport { Evaluator } from './evaluator';\r\nimport { EvaluatorAsync } from './evaluator/evaluatorAsync';\r\nimport { BlockContext, Scope } from './evaluator/scope';\r\nimport { INITIAL_SCOPE, PackageToImport } from './initialScope';\r\nimport { Parser } from './parser';\r\nimport { Tokenizer } from './tokenizer';\r\n\r\nexport type PackageLoader = (packageName: string) => Record<string, unknown>;\r\nexport type ModuleLoader = (filePath: string) => Promise<string>;\r\n\r\nexport function jsPython(): Interpreter {\r\n  return Interpreter.create();\r\n}\r\n\r\nexport class Interpreter {\r\n  private readonly initialScope: Record<string, unknown> = { ...INITIAL_SCOPE };\r\n\r\n  private _lastExecutionContext: Record<string, unknown> | null = null;\r\n\r\n  private packageLoader?: PackageLoader;\r\n  private moduleLoader?: ModuleLoader;\r\n\r\n  static create(): Interpreter {\r\n    return new Interpreter();\r\n  }\r\n\r\n  get initialExecutionContext(): Record<string, unknown> {\r\n    return this.initialScope;\r\n  }\r\n\r\n  get lastExecutionContext(): Record<string, unknown> | null {\r\n    return this._lastExecutionContext;\r\n  }\r\n\r\n  cleanUp(): void {\r\n    this._lastExecutionContext = null;\r\n  }\r\n\r\n  jsPythonInfo(): string {\r\n    return INITIAL_SCOPE.jsPython();\r\n  }\r\n\r\n  tokenize(script: string): Token[] {\r\n    const tokenizer = new Tokenizer();\r\n    return tokenizer.tokenize(script);\r\n  }\r\n\r\n  parse(script: string, moduleName = 'main.jspy'): AstBlock {\r\n    const tokenizer = new Tokenizer();\r\n    const parser = new Parser();\r\n    const jspyAst = parser.parse(tokenizer.tokenize(script), moduleName);\r\n    return jspyAst;\r\n  }\r\n\r\n  eval(\r\n    codeOrAst: string | AstBlock,\r\n    scope: Record<string, unknown> = {},\r\n    entryFunctionName: string | [string, ...unknown[]] = '',\r\n    moduleName = 'main.jspy'\r\n  ): unknown {\r\n    const ast =\r\n      typeof codeOrAst === 'string'\r\n        ? this.parse(codeOrAst as string, moduleName)\r\n        : (codeOrAst as AstBlock);\r\n\r\n    const blockContext = {\r\n      moduleName: moduleName,\r\n      cancellationToken: { cancel: false },\r\n      blockScope: new Scope(scope)\r\n    } as BlockContext;\r\n\r\n    blockContext.blockScope.set('printExecutionContext', () =>\r\n      console.log(blockContext.blockScope.getScope())\r\n    );\r\n    blockContext.blockScope.set('getExecutionContext', () => blockContext.blockScope.getScope());\r\n    this._lastExecutionContext = blockContext.blockScope.getScope();\r\n\r\n    const result = new Evaluator().evalBlock(ast, blockContext);\r\n    if (!entryFunctionName || !entryFunctionName.length) {\r\n      return result;\r\n    } else {\r\n      const funcName = Array.isArray(entryFunctionName)? entryFunctionName[0] : entryFunctionName as string\r\n      const funcParams = Array.isArray(entryFunctionName)? entryFunctionName.slice(1) : []\r\n      const func = blockContext.blockScope.get(funcName);\r\n      if (typeof func !== 'function') {\r\n        throw Error(`Function ${entryFunctionName} does not exists or not a function`);\r\n      }\r\n      return func(...funcParams);\r\n    }\r\n  }\r\n\r\n  async evalAsync(\r\n    codeOrAst: string | AstBlock,\r\n    scope: Record<string, unknown> = {},\r\n    entryFunctionName: string | [string, ...unknown[]] = '',\r\n    moduleName = 'main.jspy',\r\n    ctxInitialized?: (ctx: BlockContext) => void\r\n  ): Promise<unknown> {\r\n    const ast =\r\n      typeof codeOrAst === 'string'\r\n        ? this.parse(codeOrAst as string, moduleName)\r\n        : (codeOrAst as AstBlock);\r\n    const evaluator = new EvaluatorAsync();\r\n    const blockContext = {\r\n      moduleName: moduleName,\r\n      cancellationToken: { cancel: false },\r\n      blockScope: new Scope(scope)\r\n    } as BlockContext;\r\n\r\n    if (typeof ctxInitialized === 'function') {\r\n      ctxInitialized(blockContext);\r\n    }\r\n\r\n    blockContext.blockScope.set('printExecutionContext', () =>\r\n      console.log(blockContext.blockScope.getScope())\r\n    );\r\n    blockContext.blockScope.set('getExecutionContext', () => blockContext.blockScope.getScope());\r\n    this._lastExecutionContext = blockContext.blockScope.getScope();\r\n\r\n    const result = await evaluator\r\n      .registerJsonFileLoader(\r\n        async (modulePath: string) =>\r\n          await (this.moduleLoader\r\n            ? this.moduleLoader(modulePath)\r\n            : Promise.reject('ModuleLoader is not registered'))\r\n      )\r\n      .registerModuleParser(async modulePath => await this.moduleParser(modulePath))\r\n      .registerBlockContextFactory((moduleName, ast: AstBlock) => {\r\n        // enrich context\r\n        const newContext = this.assignImportContext(ast, scope);\r\n        const moduleContext = {\r\n          moduleName,\r\n          blockScope: new Scope(newContext),\r\n          cancellationToken: blockContext.cancellationToken\r\n        };\r\n        moduleContext.blockScope.set('printExecutionContext', () =>\r\n          console.log(moduleContext.blockScope.getScope())\r\n        );\r\n        moduleContext.blockScope.set('getExecutionContext', () =>\r\n          moduleContext.blockScope.getScope()\r\n        );\r\n        return moduleContext;\r\n      })\r\n      .evalBlockAsync(ast, blockContext);\r\n\r\n    if (!entryFunctionName || !entryFunctionName.length) {\r\n      return result;\r\n    } else {\r\n      const funcName = Array.isArray(entryFunctionName)? entryFunctionName[0] : entryFunctionName as string\r\n      const funcParams = Array.isArray(entryFunctionName)? entryFunctionName.slice(1) : []\r\n\r\n      const func = blockContext.blockScope.get(funcName);\r\n      if (typeof func !== 'function') {\r\n        throw Error(`Function ${entryFunctionName} does not exists or not a function`);\r\n      }\r\n      return await func(...funcParams);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compatibility method (with v1). !\r\n   */\r\n  async evaluate(\r\n    script: string,\r\n    context: Record<string, unknown> = {},\r\n    entryFunctionName: string | [string, ...unknown[]] = '',\r\n    moduleName = 'main.jspy',\r\n    ctxInitialized?: (ctx: BlockContext) => void\r\n  ): Promise<unknown> {\r\n    if (!script || !script.length) {\r\n      return null;\r\n    }\r\n    const ast = this.parse(script, moduleName);\r\n\r\n    context = context && typeof context === 'object' ? context : {};\r\n    context = this.assignImportContext(ast, context);\r\n\r\n    const globalScope = {\r\n      ...this.initialScope,\r\n      ...context\r\n    } as Record<string, unknown>;\r\n\r\n    return await this.evalAsync(ast, globalScope, entryFunctionName, moduleName, ctxInitialized);\r\n  }\r\n\r\n  registerPackagesLoader(loader: PackageLoader): Interpreter {\r\n    if (typeof loader === 'function') {\r\n      this.packageLoader = loader;\r\n    } else {\r\n      throw Error('PackagesLoader');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  registerModuleLoader(loader: ModuleLoader): Interpreter {\r\n    if (typeof loader === 'function') {\r\n      this.moduleLoader = loader;\r\n    } else {\r\n      throw Error('ModuleLoader should be a function');\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  addFunction(\r\n    funcName: string,\r\n    fn: (...args: unknown[]) => void | unknown | Promise<unknown>\r\n  ): Interpreter {\r\n    this.initialScope[funcName] = fn;\r\n    return this;\r\n  }\r\n\r\n  assignGlobalContext(obj: Record<string, unknown>): Interpreter {\r\n    Object.assign(this.initialScope, obj);\r\n    return this;\r\n  }\r\n\r\n  hasFunction(scripts = '', funcName: string): boolean {\r\n    return scripts.indexOf(`def ${funcName}`) > -1;\r\n  }\r\n\r\n  assignImportContext(\r\n    ast: AstBlock,\r\n    context: Record<string, unknown>\r\n  ): Record<string, unknown> {\r\n    const nodeToPackage = (im: ImportNode): PackageToImport => {\r\n      return {\r\n        name: im.module.name,\r\n        as: im.module.alias,\r\n        properties: im.parts?.map(p => ({ name: p.name, as: p.alias }))\r\n      } as PackageToImport;\r\n    };\r\n\r\n    const importNodes = ast.body.filter(n => n.type === 'import') as ImportNode[];\r\n\r\n    const jsImport = importNodes\r\n      .filter(im => getImportType(im.module.name) === 'jsPackage')\r\n      .map(im => nodeToPackage(im));\r\n\r\n    if (jsImport.length && this.packageLoader) {\r\n      const libraries = this.packageResolver(jsImport);\r\n      context = { ...context, ...libraries };\r\n    }\r\n\r\n    return context as Record<string, unknown>;\r\n  }\r\n\r\n  private async moduleParser(modulePath: string): Promise<AstBlock> {\r\n    if (!this.moduleLoader) {\r\n      throw new Error('Module Loader is not registered');\r\n    }\r\n\r\n    const content = await this.moduleLoader(modulePath);\r\n    return this.parse(content, modulePath);\r\n  }\r\n\r\n  private packageResolver(packages: PackageToImport[]): Record<string, unknown> {\r\n    if (!this.packageLoader) {\r\n      throw Error('Package loader not provided.');\r\n    }\r\n    const libraries: Record<string, unknown> = {};\r\n    packages.forEach(({ name, as, properties }: PackageToImport) => {\r\n      const lib = (this.packageLoader && this.packageLoader(name)) || {};\r\n      if (properties?.length) {\r\n        properties.forEach(prop => {\r\n          libraries[prop.as || prop.name] = lib[prop.name];\r\n        });\r\n      } else if (as) {\r\n        libraries[as] = lib;\r\n      } else {\r\n        libraries[name] = lib;\r\n      }\r\n      if (as) {\r\n        libraries[as] = lib;\r\n      }\r\n    });\r\n    return libraries;\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAM,SAAU,mBAAmB,CAAC,KAA6B,EAAA;QAC/D,IAAI,CAAC,KAAK,EAAE;IACV,QAAA,OAAO,IAAI,CAAC;IACb,KAAA;IACD,IAAA,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IAC7B,QAAA,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;IACxB,KAAA;IACD,IAAA,IAAI,KAAK,YAAY,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,EAAE;IACpD,QAAA,OAAO,KAAK,CAAC;IACd,KAAA;;IAED,IAAA,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IAC7B,QAAA,OAAO,IAAI,CAAC;IACb,KAAA;IAED,IAAA,IAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;IAC/B,IAAA,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;IACpB,QAAA,OAAO,IAAI,CAAC;IACb,KAAA;QAED,IAAM,UAAU,GAAG,UAAC,EAAU,EAAA;IAC5B,QAAA,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;IACrB,YAAA,OAAO,GAAG,CAAC;IACZ,SAAA;YAED,IAAM,CAAC,GAAG,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC3B,QAAA,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;gBACb,OAAO,CAAC,GAAG,CAAC,CAAC;IACd,SAAA;;IAGD,QAAA,IAAI,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;IACxB,YAAA,OAAO,CAAC,CAAC;IACV,SAAA;IACD,QAAA,IAAI,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;IACxB,YAAA,OAAO,CAAC,CAAC;IACV,SAAA;IACD,QAAA,IAAI,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;IACxB,YAAA,OAAO,CAAC,CAAC;IACV,SAAA;IACD,QAAA,IAAI,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;IACxB,YAAA,OAAO,CAAC,CAAC;IACV,SAAA;IACD,QAAA,IAAI,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;IACxB,YAAA,OAAO,CAAC,CAAC;IACV,SAAA;IACD,QAAA,IAAI,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;IACxB,YAAA,OAAO,CAAC,CAAC;IACV,SAAA;IACD,QAAA,IAAI,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;IACxB,YAAA,OAAO,CAAC,CAAC;IACV,SAAA;IACD,QAAA,IAAI,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;IACxB,YAAA,OAAO,CAAC,CAAC;IACV,SAAA;IACD,QAAA,IAAI,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;IACxB,YAAA,OAAO,CAAC,CAAC;IACV,SAAA;IACD,QAAA,IAAI,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;IACxB,YAAA,OAAO,CAAC,CAAC;IACV,SAAA;IACD,QAAA,IAAI,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;IACxB,YAAA,OAAO,EAAE,CAAC;IACX,SAAA;IACD,QAAA,IAAI,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;IACxB,YAAA,OAAO,EAAE,CAAC;IACX,SAAA;IAED,QAAA,OAAO,GAAG,CAAC;IACb,KAAC,CAAC;QAEF,IAAM,WAAW,GAAG,UAAC,EAAU,EAAA;YAC7B,IAAI,EAAE,GAAG,GAAG,EAAE;IACZ,YAAA,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,IAAI,CAAC;IACxC,SAAA;IAAM,aAAA;IACL,YAAA,OAAO,EAAE,CAAC;IACX,SAAA;IACH,KAAC,CAAC;IAEF,IAAA,IAAM,eAAe,GAAG,UACtB,IAAY,EACZ,KAAa,EACb,GAAW,EACX,KAAa,EACb,IAAY,EACZ,EAAU,EAAA;IAEV,QAAA,IAAI,KAAK,GAAG,EAAE,IAAI,GAAG,GAAG,EAAE,IAAI,KAAK,IAAI,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE;IACnE,YAAA,OAAO,IAAI,CAAC;IACb,SAAA;IAED,QAAA,IAAM,EAAE,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;IAC1D,QAAA,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;IAC1C,KAAC,CAAC;QAEF,IAAM,SAAS,GAAG,QAAQ;IACvB,SAAA,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;IACjB,SAAA,WAAW,EAAE;aACb,KAAK,CAAC,QAAQ,CAAC,CAAC;QACnB,IAAM,EAAE,GAAG,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;;IAGrC,IAAA,IAAI,CAAC,GAAG,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACrF,IAAA,IAAI,CAAC,EAAE;IACL,QAAA,OAAO,CAAC,CAAC;IACV,KAAA;;QAGD,CAAC,GAAG,eAAe,CACjB,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAClB,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EACxB,EAAE,CAAC,CAAC,CAAC,EACL,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EACV,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EACV,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CACX,CAAC;IACF,IAAA,IAAI,CAAC,EAAE;IACL,QAAA,OAAO,CAAC,CAAC;IACV,KAAA;;QAGD,CAAC,GAAG,eAAe,CACjB,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAClB,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EACxB,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAClB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EACV,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EACV,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CACX,CAAC;IACF,IAAA,IAAI,CAAC,EAAE;IACL,QAAA,OAAO,CAAC,CAAC;IACV,KAAA;IAED,IAAA,OAAO,IAAI,CAAC;IACd,CAAC;IAEK,SAAU,aAAa,CAAC,IAAY,EAAA;IACxC,IAAA,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;IACjD,QAAA,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,MAAM,GAAG,YAAY,CAAC;IACvD,KAAA;IAED,IAAA,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,SAAS,gBAAgB,CACvB,KAAa,EACb,MAAc,EACd,IAAY,EACZ,MAAc,EACd,OAAe,EAAA;QAEf,OAAO,EAAA,CAAA,MAAA,CAAG,KAAK,EAAA,IAAA,CAAA,CAAA,MAAA,CAAK,MAAM,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,IAAI,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,MAAM,EAAA,KAAA,CAAA,CAAA,MAAA,CAAM,OAAO,CAAE,CAAC;IAC9D,CAAC;IAED,gBAAA,UAAA,MAAA,EAAA;QAAwC,SAAK,CAAA,kBAAA,EAAA,MAAA,CAAA,CAAA;IAC3C,IAAA,SAAA,kBAAA,CACS,MAAc,EACd,IAAY,EACZ,MAAc,EACd,OAAe,EAAA;IAJxB,QAAA,IAAA,KAAA,GAME,iBAAO,IAGR,IAAA,CAAA;YARQ,KAAM,CAAA,MAAA,GAAN,MAAM,CAAQ;YACd,KAAI,CAAA,IAAA,GAAJ,IAAI,CAAQ;YACZ,KAAM,CAAA,MAAA,GAAN,MAAM,CAAQ;YACd,KAAO,CAAA,OAAA,GAAP,OAAO,CAAQ;IAGtB,QAAA,KAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC,oBAAoB,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;YACrF,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,kBAAkB,CAAC,SAAS,CAAC,CAAC;;SAC3D;QACH,OAAC,kBAAA,CAAA;IAAD,EAXA,CAAwC,KAAK,CAW5C,EAAA;IAED,IAAA,eAAA,kBAAA,UAAA,MAAA,EAAA;QAAqC,SAAK,CAAA,eAAA,EAAA,MAAA,CAAA,CAAA;IACxC,IAAA,SAAA,eAAA,CACS,MAAc,EACd,IAAY,EACZ,MAAc,EACd,OAAe,EAAA;IAJxB,QAAA,IAAA,KAAA,GAME,iBAAO,IAGR,IAAA,CAAA;YARQ,KAAM,CAAA,MAAA,GAAN,MAAM,CAAQ;YACd,KAAI,CAAA,IAAA,GAAJ,IAAI,CAAQ;YACZ,KAAM,CAAA,MAAA,GAAN,MAAM,CAAQ;YACd,KAAO,CAAA,OAAA,GAAP,OAAO,CAAQ;IAGtB,QAAA,KAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC,iBAAiB,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;YAClF,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,eAAe,CAAC,SAAS,CAAC,CAAC;;SACxD;QACH,OAAC,eAAA,CAAA;IAAD,CAXA,CAAqC,KAAK,CAWzC,CAAA,CAAA;IAED,IAAA,aAAA,kBAAA,UAAA,MAAA,EAAA;QAAmC,SAAK,CAAA,aAAA,EAAA,MAAA,CAAA,CAAA;IACtC,IAAA,SAAA,aAAA,CACS,MAAc,EACd,IAAY,EACZ,MAAc,EACd,OAAe,EAAA;IAJxB,QAAA,IAAA,KAAA,GAME,iBAAO,IAGR,IAAA,CAAA;YARQ,KAAM,CAAA,MAAA,GAAN,MAAM,CAAQ;YACd,KAAI,CAAA,IAAA,GAAJ,IAAI,CAAQ;YACZ,KAAM,CAAA,MAAA,GAAN,MAAM,CAAQ;YACd,KAAO,CAAA,OAAA,GAAP,OAAO,CAAQ;IAGtB,QAAA,KAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC,eAAe,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;YAChF,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,aAAa,CAAC,SAAS,CAAC,CAAC;;SACtD;QACH,OAAC,aAAA,CAAA;IAAD,CAXA,CAAmC,KAAK,CAWvC,CAAA,CAAA;IAED,IAAA,SAAA,kBAAA,UAAA,MAAA,EAAA;QAA+B,SAAK,CAAA,SAAA,EAAA,MAAA,CAAA,CAAA;QAClC,SACS,SAAA,CAAA,MAAc,EACd,IAAY,EACZ,MAAc,EACd,IAAY,EACZ,OAAe,EAAA;IALxB,QAAA,IAAA,KAAA,GAOE,iBAAO,IAGR,IAAA,CAAA;YATQ,KAAM,CAAA,MAAA,GAAN,MAAM,CAAQ;YACd,KAAI,CAAA,IAAA,GAAJ,IAAI,CAAQ;YACZ,KAAM,CAAA,MAAA,GAAN,MAAM,CAAQ;YACd,KAAI,CAAA,IAAA,GAAJ,IAAI,CAAQ;YACZ,KAAO,CAAA,OAAA,GAAP,OAAO,CAAQ;IAGtB,QAAA,KAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC,WAAW,EAAE,MAAM,IAAI,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;YAC3F,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC;;SAClD;QACH,OAAC,SAAA,CAAA;IAAD,CAZA,CAA+B,KAAK,CAYnC,CAAA;;IC7MD,IAAY,cAMX,CAAA;IAND,CAAA,UAAY,cAAc,EAAA;IACxB,IAAA,cAAA,CAAA,cAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAU,CAAA;IACV,IAAA,cAAA,CAAA,cAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAU,CAAA;IACV,IAAA,cAAA,CAAA,cAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAU,CAAA;IACV,IAAA,cAAA,CAAA,cAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAO,CAAA;IACP,IAAA,cAAA,CAAA,cAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAU,CAAA;IACZ,CAAC,EANW,cAAc,KAAd,cAAc,GAMzB,EAAA,CAAA,CAAA,CAAA;IAeM,IAAM,YAAY,GAAmC,IAAI,GAAG,CAA4B;IAC7F,IAAA,CAAC,GAAG,EAAE,cAAc,CAAC,UAAU,CAAC;IAChC,IAAA,CAAC,GAAG,EAAE,cAAc,CAAC,UAAU,CAAC;IAChC,IAAA,CAAC,GAAG,EAAE,cAAc,CAAC,UAAU,CAAC;IAChC,IAAA,CAAC,GAAG,EAAE,cAAc,CAAC,UAAU,CAAC;IAChC,IAAA,CAAC,GAAG,EAAE,cAAc,CAAC,UAAU,CAAC;IAChC,IAAA,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC;IACjC,IAAA,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC;IAEjC,IAAA,CAAC,GAAG,EAAE,cAAc,CAAC,UAAU,CAAC;IAChC,IAAA,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC;IACjC,IAAA,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC;IACjC,IAAA,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC;IACjC,IAAA,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC;IACjC,IAAA,CAAC,GAAG,EAAE,cAAc,CAAC,UAAU,CAAC;IAChC,IAAA,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC;IAEjC,IAAA,CAAC,KAAK,EAAE,cAAc,CAAC,OAAO,CAAC;IAC/B,IAAA,CAAC,IAAI,EAAE,cAAc,CAAC,OAAO,CAAC;;;IAI9B,IAAA,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC;IAEjC,IAAA,CAAC,GAAG,EAAE,cAAc,CAAC,UAAU,CAAC;IAChC,IAAA,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC;IACjC,IAAA,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC;IACjC,IAAA,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC;IACjC,IAAA,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC;IACjC,IAAA,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC;IACjC,IAAA,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC;IAClC,CAAA,CAAC,CAAC;IAWI,IAAM,cAAc,GAAkD,IAAI,GAAG,CAGlF;QACA,CAAC,GAA0B,GAAG,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,mBAAmB,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAA9B,EAA8B,EAAyB;QAC/F,CAAC,GAA0B,GAAG,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,mBAAmB,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAA9B,EAA8B,EAAyB;QAC/F,CAAC,GAA0B,GAAG,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,mBAAmB,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAA9B,EAA8B,EAAyB;QAC/F,CAAC,GAA0B,GAAG,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,mBAAmB,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAA9B,EAA8B,EAAyB;QAC/F,CAAC,GAA0B,GAAG,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,mBAAmB,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAA9B,EAA8B,EAAyB;QAC/F,CAAC,IAA2B,GAAG,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,mBAAmB,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAA/B,EAA+B,EAAyB;QACjG,CAAC,IAA2B,GAAG,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,mBAAmB,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAA/B,EAA+B,EAAyB;QAEjG,CAAC,GAA0B,GAAG,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAA/B,EAA+B,EAAyB;IAChG,IAAA;YACE,IAA2B;IAC3B,SAAC,UAAC,CAAC,EAAE,CAAC,EAAA,EAAK,OAAA,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAA,EAAA;IAC5C,KAAA;QACD,CAAC,GAA0B,GAAG,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAA/B,EAA+B,EAAyB;IAChG,IAAA;YACE,IAA2B;IAC3B,SAAC,UAAC,CAAC,EAAE,CAAC,EAAA,EAAK,OAAA,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAA,EAAA;IAC5C,KAAA;IACD,IAAA;YACE,IAA2B;IAC3B,SAAC,UAAC,CAAC,EAAE,CAAC,EAAA,EAAK,OAAA,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAA,EAAA;IAC5C,KAAA;IACD,IAAA;YACE,IAA2B;IAC3B,SAAC,UAAC,CAAC,EAAE,CAAC,EAAA,EAAK,OAAA,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAA,EAAA;IAC5C,KAAA;IACD,IAAA;YACE,IAA2B;IAC3B,SAAC,UAAC,CAAC,EAAE,CAAC,EAAA,EAAK,OAAA,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAA,EAAA;IAC5C,KAAA;QAED,CAAC,KAA4B,GAAG,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,gBAAgB,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAA7B,EAA6B,EAAyB;QAChG,CAAC,IAA2B,GAAG,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,gBAAgB,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAA5B,EAA4B,EAAyB;;;QAI9F,CAAC,IAA2B,GAAG,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,mBAAmB,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAA/B,EAA+B,EAAyB;IAClG,CAAA,CAAC,CAAC;IAEH,SAAS,mBAAmB,CAAC,CAAY,EAAE,CAAY,EAAE,EAAuB,EAAA;IAC9E,IAAA,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;YACzB,OAAQ,CAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1C,KAAA;IAED,IAAA,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;IACpB,QAAA,OAAQ,CAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACrC,KAAA;IAED,IAAA,MAAM,IAAI,KAAK,CAAC,6BAAsB,EAAE,EAAA,GAAA,CAAG,CAAC,CAAC;IAC/C,CAAC;IAED,SAAS,gBAAgB,CAAC,CAAY,EAAE,CAAY,EAAE,EAAoB,EAAA;IACxE,IAAA,QAAQ,EAAE;IACR,QAAA,KAAK,KAAK;gBACR,OAAO,CAAC,IAAI,CAAC,CAAC;IAEhB,QAAA,KAAK,IAAI;gBACP,OAAO,CAAC,IAAI,CAAC,CAAC;IACjB,KAAA;IACD,IAAA,MAAM,IAAI,KAAK,CAAC,6BAAsB,EAAE,EAAA,GAAA,CAAG,CAAC,CAAC;IAC/C,CAAC;IAED,SAAS,oBAAoB,CAAC,CAAY,EAAE,CAAY,EAAE,EAAuB,EAAA;IAC/E,IAAA,QAAQ,EAAE;IACR,QAAA,KAAK,IAAI;gBACP,OAAO,CAAC,KAAK,CAAC,CAAC;IAEjB,QAAA,KAAK,IAAI;gBACP,OAAO,CAAC,KAAK,CAAC,CAAC;IAEjB,QAAA,KAAK,IAAI;gBACP,OAAO,CAAC,KAAK,CAAC,CAAC;IAEjB,QAAA,KAAK,GAAG;gBACN,OAAQ,CAAY,GAAI,CAAY,CAAC;IAEvC,QAAA,KAAK,GAAG;gBACN,OAAQ,CAAY,GAAI,CAAY,CAAC;IAEvC,QAAA,KAAK,IAAI;gBACP,OAAQ,CAAY,IAAK,CAAY,CAAC;IAExC,QAAA,KAAK,IAAI;gBACP,OAAQ,CAAY,IAAK,CAAY,CAAC;IACzC,KAAA;IAED,IAAA,MAAM,IAAI,KAAK,CAAC,6BAAsB,EAAE,EAAA,GAAA,CAAG,CAAC,CAAC;IAC/C,CAAC;IAED,SAAS,mBAAmB,CAAC,CAAY,EAAE,CAAY,EAAE,EAAuB,EAAA;IAC9E,IAAA,QAAQ,EAAE;IACR,QAAA,KAAK,GAAG;;gBAEN,OAAQ,CAAS,GAAI,CAAS,CAAC;IAEjC,QAAA,KAAK,GAAG;;gBAEN,OAAQ,CAAS,GAAI,CAAS,CAAC;IAEjC,QAAA,KAAK,GAAG;gBACN,OAAQ,CAAY,GAAI,CAAY,CAAC;IAEvC,QAAA,KAAK,GAAG;gBACN,OAAQ,CAAY,GAAI,CAAY,CAAC;IAEvC,QAAA,KAAK,GAAG;gBACN,OAAQ,CAAY,GAAI,CAAY,CAAC;IAEvC,QAAA,KAAK,IAAI;gBACP,OAAO,IAAI,CAAC,GAAG,CAAC,CAAW,EAAE,CAAW,CAAC,CAAC;IAC7C,KAAA;IAED,IAAA,MAAM,IAAI,KAAK,CAAC,6BAAsB,EAAE,EAAA,GAAA,CAAG,CAAC,CAAC;IAC/C;;IClLA,IAAY,UAUX,CAAA;IAVD,CAAA,UAAY,UAAU,EAAA;IACpB,IAAA,UAAA,CAAA,UAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAc,CAAA;IACd,IAAA,UAAA,CAAA,UAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAW,CAAA;IACX,IAAA,UAAA,CAAA,UAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAa,CAAA;IACb,IAAA,UAAA,CAAA,UAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAY,CAAA;IACZ,IAAA,UAAA,CAAA,UAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,GAAA,eAAiB,CAAA;IACjB,IAAA,UAAA,CAAA,UAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAe,CAAA;IACf,IAAA,UAAA,CAAA,UAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,GAAA,eAAiB,CAAA;IACjB,IAAA,UAAA,CAAA,UAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAe,CAAA;IACf,IAAA,UAAA,CAAA,UAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAW,CAAA;IACb,CAAC,EAVW,UAAU,KAAV,UAAU,GAUrB,EAAA,CAAA,CAAA,CAAA;IAkBK,SAAU,kBAAkB,CAAC,SAAqB,EAAA;IACtD,IAAA,QACE,SAAS,KAAK,UAAU,CAAC,aAAa;YACtC,SAAS,KAAK,UAAU,CAAC,aAAa;YACtC,SAAS,KAAK,UAAU,CAAC,WAAW;IACpC,QAAA,SAAS,KAAK,UAAU,CAAC,WAAW,EACpC;IACJ,CAAC;IAEK,SAAU,YAAY,CAAC,KAAY,EAAA;IACvC,IAAA,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAe,CAAC;IACnC,CAAC;IAEK,SAAU,aAAa,CAAC,KAAmB,EAAA;IAC/C,IAAA,OAAO,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IACjC,CAAC;IAEK,SAAU,WAAW,CAAC,KAAY,EAAA;QACtC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;IAEK,SAAU,YAAY,CAAC,KAAY,EAAA;IACvC,IAAA,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IAEK,SAAU,cAAc,CAAC,KAAY,EAAA;IACzC,IAAA,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IAEK,SAAU,UAAU,CAAC,KAAY,EAAA;IACrC,IAAA,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IAEK,SAAU,YAAY,CAAC,KAAY,EAAA;IACvC,IAAA,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IAEe,SAAA,oBAAoB,CAAC,MAAe,EAAE,UAAoB,EAAA;QACxE,IAAM,MAAM,GAAc,EAAE,CAAC;IAE7B,IAAA,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;IAClB,QAAA,OAAO,EAAE,CAAC;IACX,KAAA;QAED,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC1C,QAAA,IAAM,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,aAAa,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAC5C,YAAA,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;IACnB,SAAA;IACD,QAAA,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;IACtC,QAAA,KAAK,GAAG,GAAG,GAAG,CAAC,CAAC;IACjB,KAAA;QAED,IAAI,aAAa,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAC5C,QAAA,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;IACnB,KAAA;IACD,IAAA,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;IAChD,IAAA,OAAO,MAAM,CAAC;IAChB,CAAC;IAEe,SAAA,WAAW,CAAC,MAAe,EAAE,SAAiB,EAAA;IAC5D,IAAA,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;IAClB,QAAA,OAAO,EAAE,CAAC;IACX,KAAA;IACD,IAAA,IAAM,UAAU,GAAG,qBAAqB,CAAC,MAAM,EAAE,UAAA,KAAK,EAAI,EAAA,OAAA,KAAK,KAAK,SAAS,CAAnB,EAAmB,CAAC,CAAC;IAC/E,IAAA,OAAO,oBAAoB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IAClD,CAAC;aAEe,mBAAmB,CACjC,MAAe,EACf,SAAyC,EACzC,KAAS,EAAA;IAAT,IAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,EAAA,KAAS,GAAA,CAAA,CAAA,EAAA;IAET,IAAA,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC1C,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,aAAa,EAAE;gBACxD,SAAS;IACV,SAAA;YAED,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;gBACpC,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC5C,SAAA;iBAAM,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;gBAC3C,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC5C,SAAA;iBAAM,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;gBAC3C,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC5C,SAAA;iBAAM,IAAI,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IAC9C,YAAA,OAAO,CAAC,CAAC;IACV,SAAA;IACF,KAAA;QAED,OAAO,CAAC,CAAC,CAAC;IACZ,CAAC;IAEK,SAAU,6BAA6B,CAAC,MAAe,EAAA;QAC3D,IAAM,SAAS,GAAa,EAAE,CAAC;IAE/B,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACtC,IAAM,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACxC,IAAM,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAEtC,QAAA,IAAI,KAAK,KAAK,UAAU,CAAC,aAAa,EAAE;gBACtC,SAAS;IACV,SAAA;YAED,IAAI,MAAM,KAAK,GAAG,EAAE;IAClB,YAAA,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACnB,SAAA;iBAAM,IAAI,MAAM,KAAK,GAAG,EAAE;gBACzB,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC5C,SAAA;IAAM,aAAA,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE;gBACpC,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC5C,SAAA;IAAM,aAAA,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE;IACpC,YAAA,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAClB,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC5C,SAAA;iBAAM,IAAI,MAAM,KAAK,GAAG,EAAE;gBACzB,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC5C,SAAA;IACF,KAAA;IAED,IAAA,OAAO,SAAS,CAAC;IACnB,CAAC;IAEe,SAAA,qBAAqB,CACnC,MAAe,EACf,SAAyC,EAAA;QAEzC,IAAM,SAAS,GAAa,EAAE,CAAC;IAE/B,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACtC,IAAM,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACxC,IAAM,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAEtC,QAAA,IAAI,KAAK,KAAK,UAAU,CAAC,aAAa,EAAE;gBACtC,SAAS;IACV,SAAA;YAED,IAAI,MAAM,KAAK,GAAG,EAAE;gBAClB,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC5C,SAAA;iBAAM,IAAI,MAAM,KAAK,GAAG,EAAE;gBACzB,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC5C,SAAA;iBAAM,IAAI,MAAM,KAAK,GAAG,EAAE;gBACzB,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC5C,SAAA;IAAM,aAAA,IAAI,SAAS,CAAC,MAAM,CAAC,EAAE;IAC5B,YAAA,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACnB,SAAA;IACF,KAAA;IAED,IAAA,OAAO,SAAS,CAAC;IACnB,CAAC;IAEe,SAAA,aAAa,CAC3B,MAAe,EACf,aAA2C,EAAA;IAA3C,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,EAAA,EAAA,aAA2C,GAAA,IAAA,CAAA,EAAA;IAE3C,IAAA,OAAO,CAAC,aAAa;IACnB,UAAE,qBAAqB,CAAC,MAAM,EAAE,UAAA,KAAK,EAAA,EAAI,OAAA,YAAY,CAAC,GAAG,CAAC,KAAkB,CAAC,CAAA,EAAA,CAAC;cAC5E,qBAAqB,CACnB,MAAM,EACN,UAAA,KAAK,IAAI,OAAA,YAAY,CAAC,GAAG,CAAC,KAAkB,CAAC,KAAK,aAAa,CAAtD,EAAsD,CAChE,CAAC;IACR,CAAC;IAED,SAAS,iBAAiB,CACxB,MAAe,EACf,CAAS,EACT,QAAgB,EAChB,SAAiB,EAAA;QAEjB,IAAI,aAAa,GAAG,CAAC,CAAC;IACtB,IAAA,OAAO,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,SAAS,IAAI,aAAa,KAAK,CAAC,EAAE;IACtE,QAAA,IAAI,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,MAAM,EAAE;IAC1B,YAAA,MAAM,IAAI,KAAK,CAAC,mBAAY,SAAS,EAAA,cAAA,CAAc,CAAC,CAAC;IACtD,SAAA;YAED,IAAM,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5C,IAAI,UAAU,KAAK,QAAQ,EAAE;IAC3B,YAAA,aAAa,EAAE,CAAC;IACjB,SAAA;YACD,IAAI,UAAU,KAAK,SAAS,EAAE;IAC5B,YAAA,aAAa,EAAE,CAAC;IACjB,SAAA;IACF,KAAA;IACD,IAAA,OAAO,CAAC,CAAC;IACX;;IC/JA,IAAA,OAAA,kBAAA,YAAA;IAEE,IAAA,SAAA,OAAA,CAAmB,IAAiB,EAAA;YAAjB,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAa;YADpC,IAAG,CAAA,GAAA,GAA4B,SAAS,CAAC;SACD;QAC1C,OAAC,OAAA,CAAA;IAAD,CAAC,EAAA,CAAA,CAAA;IAED,IAAA,UAAA,kBAAA,UAAA,MAAA,EAAA;QAAgC,SAAO,CAAA,UAAA,EAAA,MAAA,CAAA,CAAA;IACrC,IAAA,SAAA,UAAA,CAAmB,MAAe,EAAS,MAAe,EAAS,GAAgB,EAAA;YAAnF,IACE,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,QAAQ,CAAC,IAEhB,IAAA,CAAA;YAHkB,KAAM,CAAA,MAAA,GAAN,MAAM,CAAS;YAAS,KAAM,CAAA,MAAA,GAAN,MAAM,CAAS;YAAS,KAAG,CAAA,GAAA,GAAH,GAAG,CAAa;IAEjF,QAAA,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;SAChB;QACH,OAAC,UAAA,CAAA;IAAD,CALA,CAAgC,OAAO,CAKtC,CAAA,CAAA;IAED,IAAA,SAAA,kBAAA,UAAA,MAAA,EAAA;QAA+B,SAAO,CAAA,SAAA,EAAA,MAAA,CAAA,CAAA;IAGpC,IAAA,SAAA,SAAA,CAAY,KAAY,EAAA;YAAxB,IACE,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAO,CAAC,IAGf,IAAA,CAAA;IAFC,QAAA,KAAI,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;IAClC,QAAA,KAAI,CAAC,GAAG,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;;SAC/B;QACH,OAAC,SAAA,CAAA;IAAD,CARA,CAA+B,OAAO,CAQrC,CAAA,CAAA;IAED,IAAA,WAAA,kBAAA,UAAA,MAAA,EAAA;QAAiC,SAAO,CAAA,WAAA,EAAA,MAAA,CAAA,CAAA;QACtC,SAAmB,WAAA,CAAA,OAAe,EAAS,GAAgB,EAAA;YAA3D,IACE,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,SAAS,CAAC,IAEjB,IAAA,CAAA;YAHkB,KAAO,CAAA,OAAA,GAAP,OAAO,CAAQ;YAAS,KAAG,CAAA,GAAA,GAAH,GAAG,CAAa;IAEzD,QAAA,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;SAChB;QACH,OAAC,WAAA,CAAA;IAAD,CALA,CAAiC,OAAO,CAKvC,CAAA,CAAA;IAED,IAAA,UAAA,kBAAA,UAAA,MAAA,EAAA;QAAgC,SAAO,CAAA,UAAA,EAAA,MAAA,CAAA,CAAA;QACrC,SAAmB,UAAA,CAAA,WAA4C,EAAS,GAAgB,EAAA;IAArE,QAAA,IAAA,WAAA,KAAA,KAAA,CAAA,EAAA,EAAA,WAA4C,GAAA,SAAA,CAAA,EAAA;YAA/D,IACE,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,QAAQ,CAAC,IAEhB,IAAA,CAAA;YAHkB,KAAW,CAAA,WAAA,GAAX,WAAW,CAAiC;YAAS,KAAG,CAAA,GAAA,GAAH,GAAG,CAAa;IAEtF,QAAA,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;SAChB;QACH,OAAC,UAAA,CAAA;IAAD,CALA,CAAgC,OAAO,CAKtC,CAAA,CAAA;IAED,IAAA,SAAA,kBAAA,UAAA,MAAA,EAAA;QAA+B,SAAO,CAAA,SAAA,EAAA,MAAA,CAAA,CAAA;IACpC,IAAA,SAAA,SAAA,CAAmB,SAAiB,EAAS,eAAwB,EAAS,GAAgB,EAAA;YAA9F,IACE,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAO,CAAC,IAEf,IAAA,CAAA;YAHkB,KAAS,CAAA,SAAA,GAAT,SAAS,CAAQ;YAAS,KAAe,CAAA,eAAA,GAAf,eAAe,CAAS;YAAS,KAAG,CAAA,GAAA,GAAH,GAAG,CAAa;IAE5F,QAAA,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;SAChB;QACH,OAAC,SAAA,CAAA;IAAD,CALA,CAA+B,OAAO,CAKrC,CAAA,CAAA;IAED,IAAA,YAAA,kBAAA,UAAA,MAAA,EAAA;QAAkC,SAAO,CAAA,YAAA,EAAA,MAAA,CAAA,CAAA;IACvC,IAAA,SAAA,YAAA,GAAA;IACE,QAAA,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,UAAU,CAAC,IAAA,IAAA,CAAA;SAClB;QACH,OAAC,YAAA,CAAA;IAAD,CAJA,CAAkC,OAAO,CAIxC,CAAA,CAAA;IAED,IAAA,SAAA,kBAAA,UAAA,MAAA,EAAA;QAA+B,SAAO,CAAA,SAAA,EAAA,MAAA,CAAA,CAAA;IACpC,IAAA,SAAA,SAAA,GAAA;IACE,QAAA,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAO,CAAC,IAAA,IAAA,CAAA;SACf;QACH,OAAC,SAAA,CAAA;IAAD,CAJA,CAA+B,OAAO,CAIrC,CAAA,CAAA;IAED,gBAAA,UAAA,MAAA,EAAA;QAAsC,SAAO,CAAA,gBAAA,EAAA,MAAA,CAAA,CAAA;IAE3C,IAAA,SAAA,gBAAA,CAAY,KAAY,EAAA;YAAxB,IACE,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,cAAc,CAAC,IAGtB,IAAA,CAAA;IAFC,QAAA,KAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAW,CAAC;IAC/B,QAAA,KAAI,CAAC,GAAG,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;;SAC/B;QACH,OAAC,gBAAA,CAAA;IAAD,EAPA,CAAsC,OAAO,CAO5C,EAAA;IAED,IAAA,gBAAA,kBAAA,UAAA,MAAA,EAAA;QAAsC,SAAO,CAAA,gBAAA,EAAA,MAAA,CAAA,CAAA;IAG3C,IAAA,SAAA,gBAAA,CAAmB,IAAY,EAAS,UAA4B,EAAS,GAAgB,EAAA;YAA7F,IACE,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,UAAU,CAAC,IAElB,IAAA,CAAA;YAHkB,KAAI,CAAA,IAAA,GAAJ,IAAI,CAAQ;YAAS,KAAU,CAAA,UAAA,GAAV,UAAU,CAAkB;YAAS,KAAG,CAAA,GAAA,GAAH,GAAG,CAAa;YAFtF,KAAY,CAAA,YAAA,GAAwB,SAAS,CAAC;IAInD,QAAA,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;SAChB;QACH,OAAC,gBAAA,CAAA;IAAD,CAPA,CAAsC,OAAO,CAO5C,CAAA,CAAA;IAED,IAAA,eAAA,kBAAA,UAAA,MAAA,EAAA;QAAqC,SAAO,CAAA,eAAA,EAAA,MAAA,CAAA,CAAA;IAC1C,IAAA,SAAA,eAAA,CACS,OAAiB,EACjB,MAAgB,EAChB,OAAgB,EAChB,GAAgB,EAAA;YAJzB,IAME,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,SAAS,CAAC,IAEjB,IAAA,CAAA;YAPQ,KAAO,CAAA,OAAA,GAAP,OAAO,CAAU;YACjB,KAAM,CAAA,MAAA,GAAN,MAAM,CAAU;YAChB,KAAO,CAAA,OAAA,GAAP,OAAO,CAAS;YAChB,KAAG,CAAA,GAAA,GAAH,GAAG,CAAa;IAGvB,QAAA,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;SAChB;QACH,OAAC,eAAA,CAAA;IAAD,CAVA,CAAqC,OAAO,CAU3C,CAAA,CAAA;IAED,IAAA,gBAAA,kBAAA,UAAA,MAAA,EAAA;QAAsC,SAAO,CAAA,gBAAA,EAAA,MAAA,CAAA,CAAA;IAC3C,IAAA,SAAA,gBAAA,CAAmB,OAAiB,EAAS,MAAgB,EAAS,GAAgB,EAAA;YAAtF,IACE,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,cAAc,CAAC,IAEtB,IAAA,CAAA;YAHkB,KAAO,CAAA,OAAA,GAAP,OAAO,CAAU;YAAS,KAAM,CAAA,MAAA,GAAN,MAAM,CAAU;YAAS,KAAG,CAAA,GAAA,GAAH,GAAG,CAAa;IAEpF,QAAA,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;SAChB;QACH,OAAC,gBAAA,CAAA;IAAD,CALA,CAAsC,OAAO,CAK5C,CAAA,CAAA;IAED,IAAA,QAAA,kBAAA,UAAA,MAAA,EAAA;QAA8B,SAAO,CAAA,QAAA,EAAA,MAAA,CAAA,CAAA;IACnC,IAAA,SAAA,QAAA,CACS,aAAsB,EACtB,QAAmB,EACnB,GAAgB,EAAA;YAHzB,IAKE,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,MAAM,CAAC,IAEd,IAAA,CAAA;YANQ,KAAa,CAAA,aAAA,GAAb,aAAa,CAAS;YACtB,KAAQ,CAAA,QAAA,GAAR,QAAQ,CAAW;YACnB,KAAG,CAAA,GAAA,GAAH,GAAG,CAAa;IAGvB,QAAA,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;SAChB;QACH,OAAC,QAAA,CAAA;IAAD,CATA,CAA8B,OAAO,CASpC,CAAA,CAAA;IAED,IAAA,MAAA,kBAAA,UAAA,MAAA,EAAA;QAA4B,SAAO,CAAA,MAAA,EAAA,MAAA,CAAA,CAAA;QACjC,SACS,MAAA,CAAA,aAAsB,EACtB,MAAiB,EACjB,KAAyC,EACzC,QAA2C,EAC3C,GAAgB,EAAA;IAFhB,QAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,EAAA,KAAyC,GAAA,SAAA,CAAA,EAAA;IACzC,QAAA,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA,EAAA,QAA2C,GAAA,SAAA,CAAA,EAAA;YAJpD,IAOE,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAI,CAAC,IAEZ,IAAA,CAAA;YARQ,KAAa,CAAA,aAAA,GAAb,aAAa,CAAS;YACtB,KAAM,CAAA,MAAA,GAAN,MAAM,CAAW;YACjB,KAAK,CAAA,KAAA,GAAL,KAAK,CAAoC;YACzC,KAAQ,CAAA,QAAA,GAAR,QAAQ,CAAmC;YAC3C,KAAG,CAAA,GAAA,GAAH,GAAG,CAAa;IAGvB,QAAA,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;SAChB;QACH,OAAC,MAAA,CAAA;IAAD,CAXA,CAA4B,OAAO,CAWlC,CAAA,CAAA;IAED,IAAA,aAAA,kBAAA,UAAA,MAAA,EAAA;QAAmC,SAAO,CAAA,aAAA,EAAA,MAAA,CAAA,CAAA;QACxC,SACS,aAAA,CAAA,OAAkB,EAClB,MAAoB,EACpB,QAA+B,EAC/B,WAAkC,EAElC,GAAgB,EAAA;YANzB,IAQE,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,WAAW,CAAC,IAEnB,IAAA,CAAA;YATQ,KAAO,CAAA,OAAA,GAAP,OAAO,CAAW;YAClB,KAAM,CAAA,MAAA,GAAN,MAAM,CAAc;YACpB,KAAQ,CAAA,QAAA,GAAR,QAAQ,CAAuB;YAC/B,KAAW,CAAA,WAAA,GAAX,WAAW,CAAuB;YAElC,KAAG,CAAA,GAAA,GAAH,GAAG,CAAa;IAGvB,QAAA,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;SAChB;QACH,OAAC,aAAA,CAAA;IAAD,CAZA,CAAmC,OAAO,CAYzC,CAAA,CAAA;IAED,IAAA,OAAA,kBAAA,UAAA,MAAA,EAAA;QAA6B,SAAO,CAAA,OAAA,EAAA,MAAA,CAAA,CAAA;IAClC,IAAA,SAAA,OAAA,CACS,WAAoB,EACpB,WAAmB,EACnB,IAAe,EACf,GAAgB,EAAA;YAJzB,IAME,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAEb,IAAA,CAAA;YAPQ,KAAW,CAAA,WAAA,GAAX,WAAW,CAAS;YACpB,KAAW,CAAA,WAAA,GAAX,WAAW,CAAQ;YACnB,KAAI,CAAA,IAAA,GAAJ,IAAI,CAAW;YACf,KAAG,CAAA,GAAA,GAAH,GAAG,CAAa;IAGvB,QAAA,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;SAChB;QACH,OAAC,OAAA,CAAA;IAAD,CAVA,CAA6B,OAAO,CAUnC,CAAA,CAAA;IAED,IAAA,SAAA,kBAAA,UAAA,MAAA,EAAA;QAA+B,SAAO,CAAA,SAAA,EAAA,MAAA,CAAA,CAAA;IACpC,IAAA,SAAA,SAAA,CAAmB,SAAkB,EAAS,IAAe,EAAS,GAAgB,EAAA;YAAtF,IACE,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAO,CAAC,IAEf,IAAA,CAAA;YAHkB,KAAS,CAAA,SAAA,GAAT,SAAS,CAAS;YAAS,KAAI,CAAA,IAAA,GAAJ,IAAI,CAAW;YAAS,KAAG,CAAA,GAAA,GAAH,GAAG,CAAa;IAEpF,QAAA,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;SAChB;QACH,OAAC,SAAA,CAAA;IAAD,CALA,CAA+B,OAAO,CAKrC,CAAA,CAAA;IAED,IAAA,UAAA,kBAAA,UAAA,MAAA,EAAA;QAAgC,SAAO,CAAA,UAAA,EAAA,MAAA,CAAA,CAAA;IACrC,IAAA,SAAA,UAAA,CACS,MAAiB,EACjB,IAAc,EACd,KAA0C,EAC1C,GAAgB,EAAA;IADhB,QAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,EAAA,KAA0C,GAAA,SAAA,CAAA,EAAA;YAHnD,IAME,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,QAAQ,CAAC,IAEhB,IAAA,CAAA;YAPQ,KAAM,CAAA,MAAA,GAAN,MAAM,CAAW;YACjB,KAAI,CAAA,IAAA,GAAJ,IAAI,CAAU;YACd,KAAK,CAAA,KAAA,GAAL,KAAK,CAAqC;YAC1C,KAAG,CAAA,GAAA,GAAH,GAAG,CAAa;IAGvB,QAAA,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;SAChB;QACH,OAAC,UAAA,CAAA;IAAD,CAVA,CAAgC,OAAO,CAUtC,CAAA,CAAA;IAED,IAAA,gBAAA,kBAAA,UAAA,MAAA,EAAA;QAAsC,SAAO,CAAA,gBAAA,EAAA,MAAA,CAAA,CAAA;QAI3C,SAAY,gBAAA,CAAA,KAAY,EAAE,YAA6C,EAAA;IAA7C,QAAA,IAAA,YAAA,KAAA,KAAA,CAAA,EAAA,EAAA,YAA6C,GAAA,SAAA,CAAA,EAAA;YAAvE,IACE,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,cAAc,CAAC,IAItB,IAAA,CAAA;YAPD,KAAY,CAAA,YAAA,GAAwB,SAAS,CAAC;IAI5C,QAAA,KAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAW,CAAC;IAC/B,QAAA,KAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACjC,QAAA,KAAI,CAAC,GAAG,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;;SAC/B;QACH,OAAC,gBAAA,CAAA;IAAD,CAVA,CAAsC,OAAO,CAU5C,CAAA,CAAA;IAED,IAAA,iBAAA,kBAAA,UAAA,MAAA,EAAA;QAAuC,SAAO,CAAA,iBAAA,EAAA,MAAA,CAAA,CAAA;QAC5C,SAAmB,iBAAA,CAAA,UAAqB,EAAS,GAAgB,EAAA;YAAjE,IACE,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,eAAe,CAAC,IAEvB,IAAA,CAAA;YAHkB,KAAU,CAAA,UAAA,GAAV,UAAU,CAAW;YAAS,KAAG,CAAA,GAAA,GAAH,GAAG,CAAa;IAE/D,QAAA,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;SAChB;QACH,OAAC,iBAAA,CAAA;IAAD,CALA,CAAuC,OAAO,CAK7C,CAAA,CAAA;IAED,IAAA,gBAAA,kBAAA,UAAA,MAAA,EAAA;QAAsC,SAAO,CAAA,gBAAA,EAAA,MAAA,CAAA,CAAA;QAC3C,SAAmB,gBAAA,CAAA,KAA2B,EAAS,GAAgB,EAAA;YAAvE,IACE,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,cAAc,CAAC,IAEtB,IAAA,CAAA;YAHkB,KAAK,CAAA,KAAA,GAAL,KAAK,CAAsB;YAAS,KAAG,CAAA,GAAA,GAAH,GAAG,CAAa;IAErE,QAAA,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;SAChB;QACH,OAAC,gBAAA,CAAA;IAAD,CALA,CAAsC,OAAO,CAK5C,CAAA,CAAA;IAED,IAAA,eAAA,kBAAA,UAAA,MAAA,EAAA;QAAqC,SAAO,CAAA,eAAA,EAAA,MAAA,CAAA,CAAA;QAC1C,SAAmB,eAAA,CAAA,KAAgB,EAAS,GAAgB,EAAA;YAA5D,IACE,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,aAAa,CAAC,IAErB,IAAA,CAAA;YAHkB,KAAK,CAAA,KAAA,GAAL,KAAK,CAAW;YAAS,KAAG,CAAA,GAAA,GAAH,GAAG,CAAa;IAE1D,QAAA,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;SAChB;QACH,OAAC,eAAA,CAAA;IAAD,CALA,CAAqC,OAAO,CAK3C,CAAA,CAAA;IAED,IAAA,wBAAA,kBAAA,UAAA,MAAA,EAAA;QAA8C,SAAO,CAAA,wBAAA,EAAA,MAAA,CAAA,CAAA;IACnD,IAAA,SAAA,wBAAA,CACS,WAAoB,EACpB,YAA6C,EAC7C,GAAgB,EAAA;IADhB,QAAA,IAAA,YAAA,KAAA,KAAA,CAAA,EAAA,EAAA,YAA6C,GAAA,SAAA,CAAA,EAAA;YAFtD,IAKE,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,sBAAsB,CAAC,IAE9B,IAAA,CAAA;YANQ,KAAW,CAAA,WAAA,GAAX,WAAW,CAAS;YACpB,KAAY,CAAA,YAAA,GAAZ,YAAY,CAAiC;YAC7C,KAAG,CAAA,GAAA,GAAH,GAAG,CAAa;IAGvB,QAAA,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;SAChB;QACH,OAAC,wBAAA,CAAA;IAAD,CATA,CAA8C,OAAO,CASpD,CAAA,CAAA;IAOD,IAAA,aAAA,kBAAA,UAAA,MAAA,EAAA;QAAmC,SAAO,CAAA,aAAA,EAAA,MAAA,CAAA,CAAA;QACxC,SAAmB,aAAA,CAAA,KAAwB,EAAS,GAAgB,EAAA;YAApE,IACE,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,WAAW,CAAC,IAEnB,IAAA,CAAA;YAHkB,KAAK,CAAA,KAAA,GAAL,KAAK,CAAmB;YAAS,KAAG,CAAA,GAAA,GAAH,GAAG,CAAa;IAElE,QAAA,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;SAChB;QACH,OAAC,aAAA,CAAA;IAAD,CALA,CAAmC,OAAO,CAKzC,CAAA,CAAA;IAED,IAAA,SAAA,kBAAA,UAAA,MAAA,EAAA;QAA+B,SAAO,CAAA,SAAA,EAAA,MAAA,CAAA,CAAA;IACpC,IAAA,SAAA,SAAA,CACS,IAAa,EACb,EAAuB,EACvB,KAAc,EACd,GAAgB,EAAA;YAJzB,IAME,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAO,CAAC,IAEf,IAAA,CAAA;YAPQ,KAAI,CAAA,IAAA,GAAJ,IAAI,CAAS;YACb,KAAE,CAAA,EAAA,GAAF,EAAE,CAAqB;YACvB,KAAK,CAAA,KAAA,GAAL,KAAK,CAAS;YACd,KAAG,CAAA,GAAA,GAAH,GAAG,CAAa;IAGvB,QAAA,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;SAChB;QACH,OAAC,SAAA,CAAA;IAAD,CAVA,CAA+B,OAAO,CAUrC,CAAA;;ICzQK,SAAU,YAAY,CAAC,OAAqB,EAAA;QAChD,OAAO;YACL,UAAU,EAAE,OAAO,CAAC,UAAU;IAC9B,QAAA,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,KAAK,EAAE;;YAEtC,iBAAiB,EAAE,OAAO,CAAC,iBAAiB;SAC7B,CAAC;IACpB,CAAC;IAED,IAAA,KAAA,kBAAA,YAAA;IAGE,IAAA,SAAA,KAAA,CAAY,YAAqC,EAAA;YAFhC,IAAK,CAAA,KAAA,GAA4B,EAAE,CAAC;IAGnD,QAAA,IAAI,CAAC,KAAK,GAAQ,QAAA,CAAA,EAAA,EAAA,YAAY,CAAE,CAAC;SAClC;IAED,IAAA,KAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;YACE,OAAO,IAAI,CAAC,KAAK,CAAC;SACnB,CAAA;IAED,IAAA,KAAA,CAAA,SAAA,CAAA,KAAK,GAAL,YAAA;IACE,QAAA,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC9B,CAAA;IACD,IAAA,KAAA,CAAA,SAAA,CAAA,GAAG,GAAH,UAAI,GAAW,EAAE,KAAc,EAAA;IAC7B,QAAA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SACzB,CAAA;QAED,KAAG,CAAA,SAAA,CAAA,GAAA,GAAH,UAAI,GAAW,EAAA;IACb,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACxB,CAAA;QACH,OAAC,KAAA,CAAA;IAAD,CAAC,EAAA,CAAA;;ICfD,IAAA,SAAA,kBAAA,YAAA;IAAA,IAAA,SAAA,SAAA,GAAA;SAydC;IAxdC,IAAA,SAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAU,GAAa,EAAE,YAA0B,EAAA;YAAnD,IAwEC,KAAA,GAAA,IAAA,CAAA;YAvEC,IAAI,UAAU,GAAG,IAAI,CAAC;oCAEX,IAAI,EAAA;gBACb,IAAM,OAAO,GAAG,IAAuB,CAAC;;IAGxC,YAAA,IAAM,QAAQ,GAAG,YAAY,CAAC,UAAU,CAAC;gBAEzC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,YAAA;oBAAC,IAAkB,IAAA,GAAA,EAAA,CAAA;yBAAlB,IAAkB,EAAA,GAAA,CAAA,EAAlB,EAAkB,GAAA,SAAA,CAAA,MAAA,EAAlB,EAAkB,EAAA,EAAA;wBAAlB,IAAkB,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;oBACpD,OAAA,KAAI,CAAC,eAAe,CAApB,KAAA,CAAA,KAAI,iBAAiB,OAAO,EAAE,YAAY,CAAA,EAAK,IAAI,EAAA,KAAA,CAAA,CAAA,CAAA;IAAnD,aAAoD,CACrD,CAAC;;IARJ,QAAA,KAAmB,IAAgB,EAAA,GAAA,CAAA,EAAhB,EAAA,GAAA,CAAA,GAAG,aAAH,GAAG,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAH,GAAG,CAAE,KAAK,KAAI,EAAE,EAAhB,EAAA,GAAA,EAAA,CAAA,MAAgB,EAAhB,EAAgB,EAAA,EAAA;IAA9B,YAAA,IAAM,IAAI,GAAA,EAAA,CAAA,EAAA,CAAA,CAAA;wBAAJ,IAAI,CAAA,CAAA;IASd,SAAA;IAED,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACxC,IAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACzB,YAAA,IAAI,YAAY,CAAC,iBAAiB,CAAC,MAAM,EAAE;IACzC,gBAAA,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,EAAE,CAAC;IAE3B,gBAAA,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,OAAO,EAAE;wBAC3C,YAAY,CAAC,iBAAiB,CAAC,OAAO,GAAG,aAAc,CAAA,MAAA,CAAA,YAAY,CAAC,UAAU,EAAA,IAAA,CAAA,CAAA,MAAA,CAAK,GAAG,CAAC,CAAC,CAAC,EAAK,IAAA,CAAA,CAAA,MAAA,CAAA,GAAG,CAAC,CAAC,CAAC,CAAE,CAAC;IACxG,iBAAA;IAED,gBAAA,OAAO,YAAY,CAAC,iBAAiB,CAAC,OAAO,CAAC;IAC/C,aAAA;IAED,YAAA,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;oBAC3B,SAAS;IACV,aAAA;IACD,YAAA,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;;IAE1B,gBAAA,MAAM,IAAI,KAAK,CAAC,mEAAmE,CAAC,CAAC;IACtF,aAAA;gBACD,IAAI;oBACF,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;oBAE/C,IAAI,YAAY,CAAC,YAAY,EAAE;IAC7B,oBAAA,IAAM,GAAG,GAAG,YAAY,CAAC,YAAY,CAAC;;wBAGtC,IAAI,GAAG,CAAC,IAAI,IAAI,MAAM,IAAI,GAAG,CAAC,IAAI,IAAI,QAAQ,EAAE;IAC9C,wBAAA,YAAY,CAAC,YAAY,GAAG,KAAK,CAAC;IAClC,wBAAA,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC;IAClC,qBAAA;IACD,oBAAA,OAAO,GAAG,CAAC;IACZ,iBAAA;oBAED,IAAI,YAAY,CAAC,cAAc,EAAE;wBAC/B,MAAM;IACP,iBAAA;oBACD,IAAI,YAAY,CAAC,WAAW,EAAE;wBAC5B,MAAM;IACP,iBAAA;IACF,aAAA;IAAC,YAAA,OAAO,GAAG,EAAE;IACZ,gBAAA,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBACzC,IAAI,GAAG,YAAY,SAAS,EAAE;IAC5B,oBAAA,MAAM,GAAG,CAAC;IACX,iBAAA;yBAAM,IAAI,GAAG,YAAY,aAAa,EAAE;IACvC,oBAAA,MAAM,GAAG,CAAC;IACX,iBAAA;IAAM,qBAAA;IACL,oBAAA,MAAM,IAAI,aAAa,CACrB,YAAY,CAAC,UAAU,EACvB,GAAG,CAAC,CAAC,CAAC,EACN,GAAG,CAAC,CAAC,CAAC;;IAEL,oBAAA,GAAW,CAAC,OAAO,IAAI,GAAG,CAC5B,CAAC;IACH,iBAAA;IACF,aAAA;IACF,SAAA;IAED,QAAA,OAAO,UAAU,CAAC;SACnB,CAAA;IAED,IAAA,SAAA,CAAA,SAAA,CAAA,eAAe,GAAf,UAAgB,OAAoB,EAAE,OAAqB,EAAA;;YAAE,IAAkB,IAAA,GAAA,EAAA,CAAA;iBAAlB,IAAkB,EAAA,GAAA,CAAA,EAAlB,EAAkB,GAAA,SAAA,CAAA,MAAA,EAAlB,EAAkB,EAAA,EAAA;gBAAlB,IAAkB,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;IAC7E,QAAA,IAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;IAC/C,QAAA,GAAG,CAAC,IAAI,GAAG,MAAM,CAAC;IAElB,QAAA,IAAM,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC;;IAG3C,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAG,CAAA,EAAA,GAAA,OAAO,CAAC,MAAM,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,MAAM,CAAA,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;gBACpD,IAAM,QAAQ,GAAG,CAAA,IAAI,aAAJ,IAAI,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAJ,IAAI,CAAE,MAAM,IAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IACnD,YAAA,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IAC1D,SAAA;YAED,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;SAC1C,CAAA;IAEO,IAAA,SAAA,CAAA,SAAA,CAAA,cAAc,GAAtB,UACE,IAAqC,EACrC,GAAc;;QAEd,GAAyD,EAAA;YAEzD,OAAO,IAAI,CAAI,KAAA,CAAA,KAAA,CAAA,EAAA,GAAG,CAAE,CAAA;SACrB,CAAA;IAEO,IAAA,SAAA,CAAA,SAAA,CAAA,QAAQ,GAAhB,UAAiB,IAAa,EAAE,YAA0B,EAAA;YAA1D,IAiUC,KAAA,GAAA,IAAA,CAAA;;IAhUC,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;;IAE1B,YAAA,OAAO,IAAI,CAAC;IACb,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;IAC3B,YAAA,OAAO,IAAI,CAAC;IACb,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;gBACtB,IAAM,MAAM,GAAG,IAAc,CAAC;gBAC9B,IAAI,MAAM,GAAG,IAAI,CAAC;gBAClB,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,EAAE,YAAY,CAAC,EAAE;oBACrD,IAAI,CAAC,SAAS,CACZ,EAAE,IAAI,EAAE,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,MAAM,EAAc,EAC9E,YAAY,CACb,CAAC;oBACF,MAAM,GAAG,KAAK,CAAC;IAChB,aAAA;IAAM,iBAAA,IAAI,MAAA,MAAM,CAAC,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,MAAM,EAAE;IAC/B,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBAC5C,IAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBAEjC,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,EAAE,YAAY,CAAC,EAAE;4BACvD,IAAI,CAAC,SAAS,CACZ,EAAE,IAAI,EAAE,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,QAAQ,EAAc,EAClF,YAAY,CACb,CAAC;4BACF,MAAM,GAAG,KAAK,CAAC;4BACf,MAAM;IACP,qBAAA;IACF,iBAAA;IACF,aAAA;IAED,YAAA,IAAI,MAAM,IAAI,MAAM,CAAC,QAAQ,EAAE;oBAC7B,IAAI,CAAC,SAAS,CACZ,EAAE,IAAI,EAAE,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,QAAQ,EAAc,EAChF,YAAY,CACb,CAAC;IACH,aAAA;gBAED,OAAO;IACR,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;gBACzB,IAAM,SAAS,GAAG,IAAiB,CAAC;IACpC,YAAA,IAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,eAAe,EAAE,YAAY,CAAW,CAAC;IACtF,YAAA,IAAM,GAAG,GAAG,IAAI,SAAS,CACvB,YAAY,CAAC,UAAU,EACvB,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAChB,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAChB,SAAS,CAAC,SAAS,EACnB,YAAY,CACb,CAAC;IACF,YAAA,MAAM,GAAG,CAAC;IACX,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,EAAE;gBAC7B,IAAM,OAAO,GAAG,IAAqB,CAAC;gBACtC,IAAI;oBACF,IAAI,CAAC,SAAS,CACZ,EAAE,IAAI,EAAE,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC,OAAO,EAAc,EACtF,YAAY,CACb,CAAC;oBAEF,IAAI,CAAA,CAAA,EAAA,GAAA,OAAO,CAAC,QAAQ,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAM,KAAI,CAAC,GAAG,CAAC,EAAE;wBACrC,IAAI,CAAC,SAAS,CACZ,EAAE,IAAI,EAAE,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC,QAAQ,EAAc,EACvF,YAAY,CACb,CAAC;IACH,iBAAA;IACF,aAAA;IAAC,YAAA,OAAO,GAAG,EAAE;IACZ,gBAAA,IAAM,MAAI,GAAG,GAAG,YAAY,SAAS,GAAI,GAAiB,CAAC,IAAI,GAAG,OAAO,GAAG,CAAC;IAC7E,gBAAA,IAAM,OAAO,GACX,GAAG,YAAY,SAAS;0BACnB,GAAiB,CAAC,OAAO;IAC5B;IACE,wBAAA,CAAA,EAAA,GAAC,GAAW,KAAA,IAAA,IAAX,GAAG,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAH,GAAG,CAAU,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,MAAM,CAAC,GAAG,CAAC,CAAC;IAC3C,gBAAA,IAAM,UAAU,GAAG,GAAG,YAAY,SAAS,GAAI,GAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5E,gBAAA,IAAM,IAAI,GAAG,GAAG,YAAY,SAAS,GAAI,GAAiB,CAAC,IAAI,GAAG,CAAC,CAAC;IACpE,gBAAA,IAAM,MAAM,GAAG,GAAG,YAAY,SAAS,GAAI,GAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;oBAExE,IAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACrC,gBAAA,IAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC;IAClC,gBAAA,IAAM,GAAG,GAAG,YAAY,CAAC;IACzB,gBAAA,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA,CAAA,EAAA,GAAA,UAAU,CAAC,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK,KAAI,OAAO,EAAE;IACrD,oBAAA,IAAI,EAAA,MAAA;IACJ,oBAAA,OAAO,EAAA,OAAA;IACP,oBAAA,IAAI,EAAA,IAAA;IACJ,oBAAA,MAAM,EAAA,MAAA;IACN,oBAAA,UAAU,EAAA,UAAA;IACX,iBAAA,CAAC,CAAC;oBACH,IAAI,CAAC,SAAS,CACZ,EAAE,IAAI,EAAE,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,SAAS,EAAc,EAChF,GAAG,CACJ,CAAC;IACF,gBAAA,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA,CAAA,EAAA,GAAA,UAAU,CAAC,KAAK,0CAAE,KAAK,KAAI,OAAO,EAAE,IAAI,CAAC,CAAC;IAC9D,aAAA;IAAS,oBAAA;oBACR,IAAI,CAAA,CAAA,EAAA,GAAA,OAAO,CAAC,WAAW,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAM,KAAI,CAAC,GAAG,CAAC,EAAE;wBACxC,IAAI,CAAC,SAAS,CACZ;4BACE,IAAI,EAAE,YAAY,CAAC,UAAU;IAC7B,wBAAA,IAAI,EAAE,UAAU;4BAChB,IAAI,EAAE,OAAO,CAAC,WAAW;yBACd,EACb,YAAY,CACb,CAAC;IACH,iBAAA;IACF,aAAA;gBAED,OAAO;IACR,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;gBAC1B,IAAM,UAAU,GAAG,IAAkB,CAAC;IACtC,YAAA,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC;IACjC,YAAA,YAAY,CAAC,YAAY,GAAG,UAAU,CAAC,WAAW;sBAC9C,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,EAAE,YAAY,CAAC;sBACnD,IAAI,CAAC;gBAET,OAAO,YAAY,CAAC,YAAY,CAAC;IAClC,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE;IAC5B,YAAA,YAAY,CAAC,cAAc,GAAG,IAAI,CAAC;gBACnC,OAAO;IACR,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;IACzB,YAAA,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC;gBAChC,OAAO;IACR,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,EAAE;gBACvB,IAAM,OAAO,GAAG,IAAe,CAAC;IAEhC,YAAA,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE,YAAY,CAAuB,CAAC;IAErF,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACrC,gBAAA,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBAEtB,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;oBACvD,IAAI,CAAC,SAAS,CACZ,EAAE,IAAI,EAAE,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAc,EAC9E,YAAY,CACb,CAAC;oBACF,IAAI,YAAY,CAAC,cAAc,EAAE;IAC/B,oBAAA,YAAY,CAAC,cAAc,GAAG,KAAK,CAAC;IACrC,iBAAA;oBACD,IAAI,YAAY,CAAC,WAAW,EAAE;wBAC5B,MAAM;IACP,iBAAA;IACF,aAAA;gBAED,IAAI,YAAY,CAAC,WAAW,EAAE;IAC5B,gBAAA,YAAY,CAAC,WAAW,GAAG,KAAK,CAAC;IAClC,aAAA;gBACD,OAAO;IACR,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;gBACzB,IAAM,SAAS,GAAG,IAAiB,CAAC;gBAEpC,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,EAAE,YAAY,CAAC,EAAE;oBACvD,IAAI,CAAC,SAAS,CACZ,EAAE,IAAI,EAAE,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,CAAC,IAAI,EAAc,EAClF,YAAY,CACb,CAAC;oBAEF,IAAI,YAAY,CAAC,cAAc,EAAE;IAC/B,oBAAA,YAAY,CAAC,cAAc,GAAG,KAAK,CAAC;IACrC,iBAAA;oBACD,IAAI,YAAY,CAAC,WAAW,EAAE;wBAC5B,MAAM;IACP,iBAAA;IACF,aAAA;gBACD,IAAI,YAAY,CAAC,WAAW,EAAE;IAC5B,gBAAA,YAAY,CAAC,WAAW,GAAG,KAAK,CAAC;IAClC,aAAA;gBAED,OAAO;IACR,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;gBACzB,OAAQ,IAAkB,CAAC,KAAK,CAAC;IAClC,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,EAAE;IAChC,YAAA,IAAM,MAAI,GAAI,IAAyB,CAAC,IAAI,CAAC;IAE7C,YAAA,IAAM,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,GAAG,CAAE,IAAyB,CAAC,IAAI,CAAC,CAAC;gBAC3E,IAAI,KAAK,KAAK,SAAS,EAAE;IACvB,gBAAA,IAAI,MAAI,CAAC,MAAM,CAAC,MAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;IACxC,oBAAA,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAC/C,iBAAA;IAAM,qBAAA;IACL,oBAAA,MAAM,IAAI,KAAK,CAAC,oBAAa,MAAI,EAAA,mBAAA,CAAmB,CAAC,CAAC;IACvD,iBAAA;IACF,aAAA;IACD,YAAA,OAAO,KAAK,CAAC;IACd,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;gBACzB,IAAM,SAAS,GAAG,IAAiB,CAAC;IACpC,YAAA,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IACzD,YAAA,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;gBAC3D,IAAM,IAAI,GAAG,cAAc,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;gBAC9C,IAAI,OAAO,IAAI,KAAK,UAAU;IAAE,gBAAA,OAAO,IAAI,CAAC,IAAiB,EAAE,KAAkB,CAAC,CAAC;;IAC9E,gBAAA,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;IAClD,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,EAAE;gBAC7B,IAAM,aAAa,GAAG,IAAqB,CAAC;gBAC5C,IAAI,GAAG,GAAG,CAAC,CAAC;gBACZ,IAAI,OAAO,GAAY,IAAI,CAAC;IAE5B,YAAA,OAAO,GAAG,GAAG,aAAa,CAAC,KAAK,CAAC,MAAM,EAAE;oBACvC,IAAM,EAAE,GAAG,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;oBAEtC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;oBAE/C,IAAI,EAAE,CAAC,EAAE,KAAK,KAAK,IAAI,CAAC,OAAO,EAAE;IAC/B,oBAAA,OAAO,KAAK,CAAC;IACd,iBAAA;IACD,gBAAA,IAAI,EAAE,CAAC,EAAE,KAAK,IAAI,IAAI,OAAO,EAAE;IAC7B,oBAAA,OAAO,OAAO,CAAC;IAChB,iBAAA;IACF,aAAA;IAED,YAAA,OAAO,OAAO,CAAC;IAChB,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,EAAE;gBAChC,IAAM,cAAY,GAAG,IAAwB,CAAC;gBAE9C,OAAO,YAAA;oBAAC,IAAkB,IAAA,GAAA,EAAA,CAAA;yBAAlB,IAAkB,EAAA,GAAA,CAAA,EAAlB,EAAkB,GAAA,SAAA,CAAA,MAAA,EAAlB,EAAkB,EAAA,EAAA;wBAAlB,IAAkB,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;oBACxB,OAAA,KAAI,CAAC,eAAe,CAApB,KAAA,CAAA,KAAI,iBAAiB,cAAY,EAAE,YAAY,CAAA,EAAK,IAAI,EAAA,KAAA,CAAA,CAAA,CAAA;IAAxD,aAAyD,CAAC;IAC7D,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE;gBAC5B,IAAM,YAAY,GAAG,IAAwB,CAAC;IAC9C,YAAA,IAAM,IAAI,GAAG,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAE9C,CAAC;IACb,YAAA,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE;oBAC9B,MAAM,KAAK,CAAC,GAAI,CAAA,MAAA,CAAA,YAAY,CAAC,IAAI,EAAA,qCAAA,CAAqC,CAAC,CAAC;IACzE,aAAA;gBAED,IAAM,GAAG,GAAG,CAAA,CAAA,EAAA,GAAA,YAAY,CAAC,UAAU,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAG,CAAC,UAAA,CAAC,EAAA,EAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,YAAY,CAAC,CAAA,EAAA,CAAC,KAAI,EAAE,CAAC;IAEpF,YAAA,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE;oBACpC,UAAU,EAAE,YAAY,CAAC,UAAU;IACnC,gBAAA,IAAI,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;IACzB,gBAAA,MAAM,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5B,aAAA,CAAC,CAAC;IACJ,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;gBAC1B,IAAM,UAAU,GAAG,IAAkB,CAAC;IAEtC,YAAA,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,KAAK,cAAc,EAAE;IAC7C,gBAAA,IAAM,MAAI,GAAG,UAAU,CAAC,MAA0B,CAAC;oBACnD,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,MAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC;IACxF,aAAA;IAAM,iBAAA,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,KAAK,eAAe,EAAE;IACrD,gBAAA,IAAM,UAAU,GAAG,UAAU,CAAC,MAA2B,CAAC;;;oBAI1D,IAAM,gBAAgB,GAAG,IAAI,iBAAiB,CAC5C,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,EAChE,UAAU,CAAC,GAAG,CACf,CAAC;oBACF,IAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,YAAY,CAGhE,CAAC;IAEF,gBAAA,IAAM,aAAa,GAAG,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBAE9E,IAAI,gBAAgB,GAAG,EAAE,CAAC;IAC1B,gBAAA,IAAI,aAAa,CAAC,IAAI,KAAK,cAAc,EAAE;IACzC,oBAAA,gBAAgB,GAAI,aAAkC,CAAC,IAAI,CAAC;IAC7D,iBAAA;IAAM,qBAAA,IAAI,aAAa,CAAC,IAAI,KAAK,sBAAsB,EAAE;wBACxD,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAC7B,aAA0C,CAAC,WAAW,EACvD,YAAY,CACH,CAAC;IACb,iBAAA;IAAM,qBAAA;IACL,oBAAA,MAAM,KAAK,CAAC,sDAAsD,CAAC,CAAC;IACrE,iBAAA;IAED,gBAAA,YAAY,CAAC,gBAAgB,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IACjF,aAAA;IAED,YAAA,OAAO,IAAI,CAAC;IACb,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,eAAe,EAAE;gBACjC,OAAO,IAAI,CAAC,wBAAwB,CAAC,IAAyB,EAAE,YAAY,CAAC,CAAC;IAC/E,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,EAAE;gBAChC,IAAM,gBAAgB,GAAG,IAAwB,CAAC;gBAClD,IAAM,GAAG,GAAG,EAA6B,CAAC;gBAE1C,KAAgB,IAAA,EAAA,GAAA,CAAsB,EAAtB,EAAA,GAAA,gBAAgB,CAAC,KAAK,EAAtB,EAAA,GAAA,EAAA,CAAA,MAAsB,EAAtB,EAAA,EAAsB,EAAE;IAAnC,gBAAA,IAAM,CAAC,GAAA,EAAA,CAAA,EAAA,CAAA,CAAA;oBACV,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE,YAAY,CAAW,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;IAC3F,aAAA;IAED,YAAA,OAAO,GAAG,CAAC;IACZ,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,EAAE;gBAC/B,IAAM,SAAS,GAAG,IAAuB,CAAC;gBAC1C,IAAM,GAAG,GAAG,EAAe,CAAC;gBAE5B,KAAmB,IAAA,EAAA,GAAA,CAAe,EAAf,EAAA,GAAA,SAAS,CAAC,KAAK,EAAf,EAAA,GAAA,EAAA,CAAA,MAAe,EAAf,EAAA,EAAe,EAAE;IAA/B,gBAAA,IAAM,IAAI,GAAA,EAAA,CAAA,EAAA,CAAA,CAAA;IACb,gBAAA,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC;IAC7C,aAAA;IAED,YAAA,OAAO,GAAG,CAAC;IACZ,SAAA;SACF,CAAA;IAEO,IAAA,SAAA,CAAA,SAAA,CAAA,wBAAwB,GAAhC,UAAiC,MAAyB,EAAE,YAA0B,EAAA;;IAEpF,QAAA,IAAI,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,YAAY,CAAQ,CAAC;IAE3E,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACjD,IAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAExC,YAAA,IAAK,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAA+B,CAAC,YAAY,IAAI,CAAC,WAAW,EAAE;oBACxF,WAAW,GAAG,EAAE,CAAC;IAClB,aAAA;IAED,YAAA,IAAI,UAAU,CAAC,IAAI,KAAK,cAAc,EAAE;IACtC,gBAAA,WAAW,GAAG,WAAW,CAAE,UAA+B,CAAC,IAAI,CAAY,CAAC;IAC7E,aAAA;IAAM,iBAAA,IAAI,UAAU,CAAC,IAAI,KAAK,sBAAsB,EAAE;oBACrD,IAAM,IAAI,GAAG,UAAsC,CAAC;;IAEpD,gBAAA,WAAW,GAAG,WAAW,CACvB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,YAAY,CAAW,CAC7C,CAAC;IACd,aAAA;IAAM,iBAAA,IAAI,UAAU,CAAC,IAAI,KAAK,UAAU,EAAE;oBACzC,IAAM,YAAY,GAAG,UAA8B,CAAC;oBACpD,IAAM,IAAI,GAAG,WAAW,CAAC,YAAY,CAAC,IAAI,CAAoC,CAAC;oBAE/E,IACE,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI;wBACnC,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAA+B,CAAC,YAAY,EACpE;wBACA,WAAW,GAAG,IAAI,CAAC;wBACnB,SAAS;IACV,iBAAA;IAED,gBAAA,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE;wBAC9B,MAAM,KAAK,CAAC,GAAI,CAAA,MAAA,CAAA,YAAY,CAAC,IAAI,EAAA,qCAAA,CAAqC,CAAC,CAAC;IACzE,iBAAA;oBACD,IAAM,GAAG,GAAG,EAAE,CAAC;IACf,gBAAA,KAAgB,IAA6B,EAAA,GAAA,CAAA,EAA7B,EAAA,GAAA,YAAY,CAAC,UAAU,IAAI,EAAE,EAA7B,EAAA,GAAA,EAAA,CAAA,MAA6B,EAA7B,EAAA,EAA6B,EAAE;IAA1C,oBAAA,IAAM,CAAC,GAAA,EAAA,CAAA,EAAA,CAAA,CAAA;IACV,oBAAA,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC;IAC1C,iBAAA;IAED,gBAAA,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,GAAG,EAAE;wBAC7D,UAAU,EAAE,YAAY,CAAC,UAAU;IACnC,oBAAA,IAAI,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;IACzB,oBAAA,MAAM,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5B,iBAAA,CAAC,CAAC;IACJ,aAAA;IAAM,iBAAA;IACL,gBAAA,MAAM,KAAK,CAAC,kCAAkC,CAAC,CAAC;IACjD,aAAA;IACF,SAAA;YAED,OAAO,WAAW,KAAK,SAAS,GAAG,IAAI,GAAG,WAAW,CAAC;SACvD,CAAA;QACH,OAAC,SAAA,CAAA;IAAD,CAAC,EAAA,CAAA;;ICvdD;;;;IAIG;IACH,IAAA,cAAA,kBAAA,YAAA;IAAA,IAAA,SAAA,cAAA,GAAA;IACU,QAAA,IAAA,CAAA,YAAY,GAA8C,YAAA;IAChE,YAAA,OAAA,OAAO,CAAC,MAAM,CAAC,kCAAkC,CAAC,CAAA;IAAlD,SAAkD,CAAC;YAC7C,IAAc,CAAA,cAAA,GAA8C,YAAM,EAAA,OAAA,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAApB,EAAoB,CAAC;SAqkBhG;QAlkBC,cAAoB,CAAA,SAAA,CAAA,oBAAA,GAApB,UAAqB,YAAuD,EAAA;IAC1E,QAAA,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACjC,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;QAED,cAAsB,CAAA,SAAA,CAAA,sBAAA,GAAtB,UAAuB,cAAuD,EAAA;IAC5E,QAAA,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACrC,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;QAED,cAA2B,CAAA,SAAA,CAAA,2BAAA,GAA3B,UACE,mBAAwE,EAAA;IAExE,QAAA,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;IAC/C,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAEK,IAAA,cAAA,CAAA,SAAA,CAAA,cAAc,GAApB,UAAqB,GAAa,EAAE,YAA0B,EAAA;;;;;;;;4BACxD,UAAU,GAAG,IAAI,CAAC;gDAEX,IAAI,EAAA;gCACb,IAAM,OAAO,GAAG,IAAuB,CAAC;;IAGxC,4BAAA,IAAM,QAAQ,GAAG,YAAY,CAAC,UAAU,CAAC;IAEzC,4BAAA,IAAM,OAAO,GAAG,OAAO,CAAC,OAAO;IAC7B,kCAAE,YAAA;wCAAO,IAAkB,IAAA,GAAA,EAAA,CAAA;6CAAlB,IAAkB,EAAA,GAAA,CAAA,EAAlB,EAAkB,GAAA,SAAA,CAAA,MAAA,EAAlB,EAAkB,EAAA,EAAA;4CAAlB,IAAkB,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;;;wDACvB,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,oBAAoB,CAAzB,KAAA,CAAA,IAAI,EAAsB,aAAA,CAAA,CAAA,OAAO,EAAE,YAAY,CAAK,EAAA,IAAI,EAAC,KAAA,CAAA,CAAA,CAAA,CAAA;IAA/D,4CAAA,KAAA,CAAA,EAAA,OAAA,CAAA,CAAA,aAAA,SAA+D,CAAA,CAAA;;;IAAA,iCAAA;IACnE,kCAAE,YAAA;;wCAAC,IAAkB,IAAA,GAAA,EAAA,CAAA;6CAAlB,IAAkB,EAAA,GAAA,CAAA,EAAlB,EAAkB,GAAA,SAAA,CAAA,MAAA,EAAlB,EAAkB,EAAA,EAAA;4CAAlB,IAAkB,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;IACjB,oCAAA,OAAA,CAAA,EAAA,GAAA,IAAI,SAAS,EAAE,EAAC,eAAe,CAAC,KAAA,CAAA,EAAA,EAAA,aAAA,CAAA,CAAA,OAAO,EAAE,YAAY,GAAK,IAAI,EAAA,KAAA,CAAA,CAAA,CAAA;IAA9D,iCAA+D,CAAC;gCAEtE,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;;IAZ9C,wBAAA,KAAA,EAAA,GAAA,CAAmC,EAAhB,EAAA,GAAA,CAAA,GAAG,KAAA,IAAA,IAAH,GAAG,KAAH,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,GAAG,CAAE,KAAK,KAAI,EAAE,EAAhB,EAAA,GAAA,EAAA,CAAA,MAAgB,EAAhB,EAAgB,EAAA,EAAA;gCAAxB,IAAI,GAAA,EAAA,CAAA,EAAA,CAAA,CAAA;wCAAJ,IAAI,CAAA,CAAA;IAad,yBAAA;IAEQ,wBAAA,CAAC,GAAG,CAAC,CAAA;;;IAAE,wBAAA,IAAA,EAAA,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,CAAA,EAAA,OAAA,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;IAC3B,wBAAA,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACzB,wBAAA,IAAI,YAAY,CAAC,iBAAiB,CAAC,MAAM,EAAE;IACnC,4BAAA,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,EAAE,CAAC;IAE3B,4BAAA,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,OAAO,EAAE;oCAC3C,YAAY,CAAC,iBAAiB,CAAC,OAAO,GAAG,aAAc,CAAA,MAAA,CAAA,YAAY,CAAC,UAAU,EAAA,IAAA,CAAA,CAAA,MAAA,CAAK,GAAG,CAAC,CAAC,CAAC,EAAK,IAAA,CAAA,CAAA,MAAA,CAAA,GAAG,CAAC,CAAC,CAAC,CAAE,CAAC;IACxG,6BAAA;IAED,4BAAA,OAAA,CAAA,CAAA,aAAO,YAAY,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAA;IAC/C,yBAAA;IAED,wBAAA,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;gCAC3B,OAAS,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;IACV,yBAAA;IACG,wBAAA,IAAA,EAAA,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAA,EAAtB,OAAsB,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA;4BAClB,UAAU,GAAG,IAAkB,CAAC;4BAChC,KAAK,GAAG,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAEhD,wBAAA,IAAA,EAAA,KAAK,KAAK,MAAM,CAAA,EAAhB,OAAgB,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA;IACA,wBAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAI,EAAC,KAAK,CAAA;4BAAC,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA,CAAA;;4BAAxE,SAAS,GAAG,EAAW,CAAA,KAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAiD,CAAC,CAAA,CAAA;4BAC/E,YAAY,CAAC,UAAU,CAAC,GAAG,CACzB,UAAU,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,EACzE,SAAS,CACV,CAAC;4BACF,OAAS,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;;4BACJ,IAAI,KAAK,KAAK,YAAY,EAAE;;gCAEjC,OAAS,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;IACV,yBAAA;;;IAED,wBAAA,IAAI,OAAO,IAAI,CAAC,mBAAmB,KAAK,UAAU,EAAE;IAClD,4BAAA,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;IAC3D,yBAAA;4BAEiB,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA,CAAA;;IAA3D,wBAAA,SAAS,GAAG,EAA+C,CAAA,IAAA,EAAA,CAAA;IAC3D,wBAAA,kBAAkB,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;4BACvF,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAA,CAAA;;IAAxD,wBAAA,EAAA,CAAA,IAAA,EAAwD,CAAC;IAErD,wBAAA,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;4BAE/C,IAAI,EAAC,CAAA,EAAA,GAAA,UAAU,CAAC,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,MAAM,CAAA,EAAE;;gCAE7B,KAAK,GAAG,EAAE,CAAC;gCACX,YAAY,CAAC,UAAU,CAAC,GAAG,CACzB,UAAU,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,EACzE,KAAK,CACN,CAAC;IACH,yBAAA;4BAED,IAAI,CAAC,sBAAsB,CACzB,KAAK,EACL,kBAAkB,EAClB,SAAS,EACT,CAAA,EAAA,GAAA,UAAU,CAAC,KAAK,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAG,CAAC,UAAA,CAAC,EAAA,EAAI,OAAA,CAAC,CAAC,IAAI,CAAN,EAAM,CAAC,CACnC,CAAC;4BACF,OAAS,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;;;4BAII,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,YAAY,CAAC,CAAA,CAAA;;4BAAzD,UAAU,GAAG,SAA4C,CAAC;4BAC1D,IAAI,YAAY,CAAC,YAAY,EAAE;IACvB,4BAAA,GAAG,GAAG,YAAY,CAAC,YAAY,CAAC;;gCAEtC,IAAI,GAAG,CAAC,IAAI,IAAI,MAAM,IAAI,GAAG,CAAC,IAAI,IAAI,QAAQ,EAAE;IAC9C,gCAAA,YAAY,CAAC,YAAY,GAAG,KAAK,CAAC;IAClC,gCAAA,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC;IAClC,6BAAA;IACD,4BAAA,OAAA,CAAA,CAAA,aAAO,GAAG,CAAC,CAAA;IACZ,yBAAA;4BAED,IAAI,YAAY,CAAC,cAAc,EAAE;gCAC/B,OAAM,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;IACP,yBAAA;4BACD,IAAI,YAAY,CAAC,WAAW,EAAE;gCAC5B,OAAM,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;IACP,yBAAA;;;;IAEK,wBAAA,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;4BACzC,IAAI,KAAG,YAAY,SAAS,EAAE;IAC5B,4BAAA,MAAM,KAAG,CAAC;IACX,yBAAA;iCAAM,IAAI,KAAG,YAAY,aAAa,EAAE;IACvC,4BAAA,MAAM,KAAG,CAAC;IACX,yBAAA;IAAM,6BAAA;IACL,4BAAA,MAAM,IAAI,aAAa,CACrB,YAAY,CAAC,UAAU,EACvB,GAAG,CAAC,CAAC,CAAC,EACN,GAAG,CAAC,CAAC,CAAC;;IAEL,4BAAA,KAAW,CAAC,OAAO,IAAI,KAAG,CAC5B,CAAC;IACH,yBAAA;;IA3FgC,wBAAA,CAAC,EAAE,CAAA;;IA+FxC,oBAAA,KAAA,EAAA,EAAA,OAAA,CAAA,CAAA,aAAO,UAAU,CAAC,CAAA;;;;IACnB,KAAA,CAAA;QAEO,cAAsB,CAAA,SAAA,CAAA,sBAAA,GAA9B,UACE,KAA8B,EAC9B,kBAAgC,EAChC,SAAmB,EACnB,KAAgB,EAAA;YAJlB,IAmBC,KAAA,GAAA,IAAA,CAAA;IAbC,QAAA,IAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,CAAC,EAAI,EAAA,IAAA,EAAA,CAAA,CAAA,OAAA,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,CAAA,EAAA,GAAA,CAAC,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,CAAC,IAAI,CAAC,CAAA,EAAA,CAAC,CAAC;oCAEhF,CAAC,EAAA;IACR,YAAA,IAAM,OAAO,GAAG,KAAK,CAAC,CAAC,CAAoB,CAAC;IAE5C,YAAA,IAAM,OAAO,GAAG,OAAO,CAAC,OAAO;IAC7B,kBAAE,YAAA;wBAAO,IAAkB,IAAA,GAAA,EAAA,CAAA;6BAAlB,IAAkB,EAAA,GAAA,CAAA,EAAlB,EAAkB,GAAA,SAAA,CAAA,MAAA,EAAlB,EAAkB,EAAA,EAAA;4BAAlB,IAAkB,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;;;wCACvB,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,oBAAoB,CAAzB,KAAA,CAAA,IAAI,EAAsB,aAAA,CAAA,CAAA,OAAO,EAAE,kBAAkB,CAAK,EAAA,IAAI,EAAC,KAAA,CAAA,CAAA,CAAA,CAAA;IAArE,4BAAA,KAAA,CAAA,EAAA,OAAA,CAAA,CAAA,aAAA,SAAqE,CAAA,CAAA;;;IAAA,iBAAA;IACzE,kBAAE,YAAA;;wBAAC,IAAkB,IAAA,GAAA,EAAA,CAAA;6BAAlB,IAAkB,EAAA,GAAA,CAAA,EAAlB,EAAkB,GAAA,SAAA,CAAA,MAAA,EAAlB,EAAkB,EAAA,EAAA;4BAAlB,IAAkB,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;IACjB,oBAAA,OAAA,CAAA,EAAA,GAAA,IAAI,SAAS,EAAE,EAAC,eAAe,CAAC,KAAA,CAAA,EAAA,EAAA,aAAA,CAAA,CAAA,OAAO,EAAE,kBAAkB,GAAK,IAAI,EAAA,KAAA,CAAA,CAAA,CAAA;IAApE,iBAAqE,CAAC;gBAE5E,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;;IATxC,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAA;wBAA5B,CAAC,CAAA,CAAA;IAUT,SAAA;SACF,CAAA;QAEO,cAAiB,CAAA,SAAA,CAAA,iBAAA,GAAzB,UAA0B,IAAY,EAAA;YACpC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;SACzE,CAAA;IAEa,IAAA,cAAA,CAAA,SAAA,CAAA,oBAAoB,GAAlC,UACE,OAAoB,EACpB,OAAqB,EAAA;;YACrB,IAAkB,IAAA,GAAA,EAAA,CAAA;iBAAlB,IAAkB,EAAA,GAAA,CAAA,EAAlB,EAAkB,GAAA,SAAA,CAAA,MAAA,EAAlB,EAAkB,EAAA,EAAA;gBAAlB,IAAkB,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;;;;;;4BAEZ,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;IAC/C,wBAAA,GAAG,CAAC,IAAI,GAAG,MAAM,CAAC;IAEZ,wBAAA,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC;;IAG3C,wBAAA,KAAS,CAAC,GAAG,CAAC,EAAE,CAAC,IAAG,MAAA,OAAO,CAAC,MAAM,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,MAAM,CAAA,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;gCAC9C,QAAQ,GAAG,CAAA,IAAI,KAAA,IAAA,IAAJ,IAAI,KAAJ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAE,MAAM,IAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IACnD,4BAAA,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IAC1D,yBAAA;4BAEM,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,YAAY,CAAC,CAAA,CAAA;IAAnD,oBAAA,KAAA,CAAA,EAAA,OAAA,CAAA,CAAA,aAAO,SAA4C,CAAC,CAAA;;;;IACrD,KAAA,CAAA;IAEa,IAAA,cAAA,CAAA,SAAA,CAAA,mBAAmB,GAAjC,UACE,IAAqC,EACrC,GAAc;;QAEd,GAA0D,EAAA;;;;gCAEnD,OAAM,CAAA,CAAA,YAAA,IAAI,CAAI,KAAA,CAAA,KAAA,CAAA,EAAA,GAAG,CAAC,CAAA,CAAA;IAAzB,oBAAA,KAAA,CAAA,EAAA,OAAA,CAAA,CAAA,aAAO,SAAkB,CAAC,CAAA;;;;IAC3B,KAAA,CAAA;IAEa,IAAA,cAAA,CAAA,SAAA,CAAA,aAAa,GAA3B,UAA4B,IAAa,EAAE,YAA0B,EAAA;;;;;;;IACnE,wBAAA,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;IAC1B,4BAAA,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;IAC1D,yBAAA;IAED,wBAAA,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;IAC3B,4BAAA,OAAA,CAAA,CAAA,aAAO,IAAI,CAAC,CAAA;IACb,yBAAA;IAEG,wBAAA,IAAA,EAAA,IAAI,CAAC,IAAI,KAAK,IAAI,CAAA,EAAlB,OAAkB,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BACd,MAAM,GAAG,IAAc,CAAC;4BAC1B,MAAM,GAAG,IAAI,CAAC;4BAEd,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,aAAa,EAAE,YAAY,CAAC,CAAA,CAAA;;IAA5D,wBAAA,IAAA,CAAA,EAAA,CAAA,IAAA,EAA4D,EAA5D,OAA4D,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA;4BAC9D,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,cAAc,CACvB,EAAE,IAAI,EAAE,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,MAAM,EAAc,EAC9E,YAAY,CACb,CAAA,CAAA;;IAHD,wBAAA,EAAA,CAAA,IAAA,EAGC,CAAC;4BACF,MAAM,GAAG,KAAK,CAAC;;;kCACN,CAAA,EAAA,GAAA,MAAM,CAAC,KAAK,0CAAE,MAAM,CAAA,EAApB,OAAoB,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA;IACpB,wBAAA,CAAC,GAAG,CAAC,CAAA;;;IAAE,wBAAA,IAAA,EAAA,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAA,EAAA,OAAA,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA;IAC/B,wBAAA,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;4BAE7B,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,aAAa,EAAE,YAAY,CAAC,CAAA,CAAA;;IAA9D,wBAAA,IAAA,CAAA,EAAA,CAAA,IAAA,EAA8D,EAA9D,OAA8D,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA;4BAChE,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,cAAc,CACvB,EAAE,IAAI,EAAE,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,QAAQ,EAAc,EAClF,YAAY,CACb,CAAA,CAAA;;IAHD,wBAAA,EAAA,CAAA,IAAA,EAGC,CAAC;4BACF,MAAM,GAAG,KAAK,CAAC;4BACf,OAAM,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA;;IAT+B,wBAAA,CAAC,EAAE,CAAA;;;IAc1C,wBAAA,IAAA,EAAA,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAA,EAAzB,OAAyB,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BAC3B,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,cAAc,CACvB,EAAE,IAAI,EAAE,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,QAAQ,EAAc,EAChF,YAAY,CACb,CAAA,CAAA;;IAHD,wBAAA,EAAA,CAAA,IAAA,EAGC,CAAC;;iCAGJ,OAAO,CAAA,CAAA,YAAA,CAAA;;IAGL,wBAAA,IAAA,EAAA,IAAI,CAAC,IAAI,KAAK,OAAO,CAAA,EAArB,OAAqB,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BACjB,SAAS,GAAG,IAAiB,CAAC;4BACd,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CAC5C,SAAS,CAAC,eAAe,EACzB,YAAY,CACb,CAAA,CAAA;;4BAHK,YAAY,IAAI,EAAA,CAAA,IAAA,EAGrB,CAAW,CAAA;IACN,wBAAA,GAAG,GAAG,IAAI,SAAS,CACvB,YAAY,CAAC,UAAU,EACvB,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAChB,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAChB,SAAS,CAAC,SAAS,EACnB,YAAY,CACb,CAAC;IACF,wBAAA,MAAM,GAAG,CAAC;;IAGR,wBAAA,IAAA,EAAA,IAAI,CAAC,IAAI,KAAK,WAAW,CAAA,EAAzB,OAAyB,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BACrB,OAAO,GAAG,IAAqB,CAAC;;;;4BAEpC,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,cAAc,CACvB,EAAE,IAAI,EAAE,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC,OAAO,EAAc,EACtF,YAAY,CACb,CAAA,CAAA;;IAHD,wBAAA,EAAA,CAAA,IAAA,EAGC,CAAC;IAEE,wBAAA,IAAA,EAAA,CAAA,CAAA,EAAA,GAAA,OAAO,CAAC,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,MAAM,KAAI,CAAC,GAAG,CAAC,CAAA,EAAjC,OAAiC,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BACnC,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,cAAc,CACvB,EAAE,IAAI,EAAE,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC,QAAQ,EAAc,EACvF,YAAY,CACb,CAAA,CAAA;;IAHD,wBAAA,EAAA,CAAA,IAAA,EAGC,CAAC;;;;;IAIE,wBAAA,MAAA,GAAO,KAAG,YAAY,SAAS,GAAI,KAAiB,CAAC,IAAI,GAAG,OAAO,KAAG,CAAC;4BACvE,OAAO,GACX,KAAG,YAAY,SAAS;kCACnB,KAAiB,CAAC,OAAO;IAC5B;IACE,gCAAA,CAAA,EAAA,GAAC,KAAW,KAAA,IAAA,IAAX,KAAG,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAH,KAAG,CAAU,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,MAAM,CAAC,KAAG,CAAC,CAAC;IACrC,wBAAA,UAAU,GAAG,KAAG,YAAY,SAAS,GAAI,KAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;IACtE,wBAAA,IAAI,GAAG,KAAG,YAAY,SAAS,GAAI,KAAiB,CAAC,IAAI,GAAG,CAAC,CAAC;IAC9D,wBAAA,MAAM,GAAG,KAAG,YAAY,SAAS,GAAI,KAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;IAElE,wBAAA,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC/B,wBAAA,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC;4BAC5B,GAAG,GAAG,YAAY,CAAC;IACzB,wBAAA,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA,CAAA,EAAA,GAAA,UAAU,CAAC,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK,KAAI,OAAO,EAAE;IACrD,4BAAA,IAAI,EAAA,MAAA;IACJ,4BAAA,OAAO,EAAA,OAAA;IACP,4BAAA,IAAI,EAAA,IAAA;IACJ,4BAAA,MAAM,EAAA,MAAA;IACN,4BAAA,UAAU,EAAA,UAAA;IACX,yBAAA,CAAC,CAAC;4BACH,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,cAAc,CACvB,EAAE,IAAI,EAAE,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,SAAS,EAAc,EAChF,GAAG,CACJ,CAAA,CAAA;;IAHD,wBAAA,EAAA,CAAA,IAAA,EAGC,CAAC;IACF,wBAAA,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA,CAAA,EAAA,GAAA,UAAU,CAAC,KAAK,0CAAE,KAAK,KAAI,OAAO,EAAE,IAAI,CAAC,CAAC;;;IAEzD,wBAAA,IAAA,EAAA,CAAA,CAAA,EAAA,GAAA,OAAO,CAAC,WAAW,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,MAAM,KAAI,CAAC,GAAG,CAAC,CAAA,EAApC,OAAoC,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BACtC,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,cAAc,CACvB;oCACE,IAAI,EAAE,YAAY,CAAC,UAAU;IAC7B,gCAAA,IAAI,EAAE,UAAU;oCAChB,IAAI,EAAE,OAAO,CAAC,WAAW;iCACd,EACb,YAAY,CACb,CAAA,CAAA;;IAPD,wBAAA,EAAA,CAAA,IAAA,EAOC,CAAC;;;iCAIN,OAAO,CAAA,CAAA,YAAA,CAAA;;IAGL,wBAAA,IAAA,EAAA,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAA,EAAtB,OAAsB,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BAClB,UAAU,GAAG,IAAkB,CAAC;IACtC,wBAAA,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC;IACjC,wBAAA,EAAA,GAAA,YAAY,CAAA;iCAAgB,UAAU,CAAC,WAAW,EAAtB,OAAsB,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BAC9C,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,WAAW,EAAE,YAAY,CAAC,CAAA,CAAA;;IAA9D,wBAAA,EAAA,GAAA,SAA8D,CAAA;;;IAC9D,wBAAA,EAAA,GAAA,IAAI,CAAA;;;4BAFR,EAAa,CAAA,YAAY,KAEjB,CAAC;4BAET,OAAO,CAAA,CAAA,aAAA,YAAY,CAAC,YAAY,CAAC,CAAA;;IAGnC,wBAAA,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE;IAC5B,4BAAA,YAAY,CAAC,cAAc,GAAG,IAAI,CAAC;gCACnC,OAAO,CAAA,CAAA,YAAA,CAAA;IACR,yBAAA;IAED,wBAAA,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;IACzB,4BAAA,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC;gCAChC,OAAO,CAAA,CAAA,YAAA,CAAA;IACR,yBAAA;IAEG,wBAAA,IAAA,EAAA,IAAI,CAAC,IAAI,KAAK,KAAK,CAAA,EAAnB,OAAmB,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BACf,OAAO,GAAG,IAAe,CAAC;4BAEjB,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,EAAE,YAAY,CAAC,CAAA,CAAA;;4BAApE,KAAK,IAAI,EAAA,CAAA,IAAA,EAA2D,CAEhE,CAAA;IACD,wBAAA,CAAC,GAAG,CAAC,CAAA;;;IAAE,wBAAA,IAAA,EAAA,CAAC,GAAG,KAAK,CAAC,MAAM,CAAA,EAAA,OAAA,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;IACxB,wBAAA,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;4BACtB,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;4BACvD,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,cAAc,CACvB,EAAE,IAAI,EAAE,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAc,EAC9E,YAAY,CACb,CAAA,CAAA;;IAHD,wBAAA,EAAA,CAAA,IAAA,EAGC,CAAC;4BACF,IAAI,YAAY,CAAC,cAAc,EAAE;IAC/B,4BAAA,YAAY,CAAC,cAAc,GAAG,KAAK,CAAC;IACrC,yBAAA;4BACD,IAAI,YAAY,CAAC,WAAW,EAAE;gCAC5B,OAAM,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;IACP,yBAAA;;;IAZ+B,wBAAA,CAAC,EAAE,CAAA;;;4BAerC,IAAI,YAAY,CAAC,WAAW,EAAE;IAC5B,4BAAA,YAAY,CAAC,WAAW,GAAG,KAAK,CAAC;IAClC,yBAAA;4BACD,OAAO,CAAA,CAAA,YAAA,CAAA;;IAGL,wBAAA,IAAA,EAAA,IAAI,CAAC,IAAI,KAAK,OAAO,CAAA,EAArB,OAAqB,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BACjB,SAAS,GAAG,IAAiB,CAAC;;iCAE7B,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,SAAS,EAAE,YAAY,CAAC,CAAA,CAAA;;iCAA3D,EAA2D,CAAA,IAAA,EAAA,EAAA,OAAA,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BAChE,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,cAAc,CACvB,EAAE,IAAI,EAAE,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,CAAC,IAAI,EAAc,EAClF,YAAY,CACb,CAAA,CAAA;;IAHD,wBAAA,EAAA,CAAA,IAAA,EAGC,CAAC;4BAEF,IAAI,YAAY,CAAC,cAAc,EAAE;IAC/B,4BAAA,YAAY,CAAC,cAAc,GAAG,KAAK,CAAC;IACrC,yBAAA;4BACD,IAAI,YAAY,CAAC,WAAW,EAAE;gCAC5B,OAAM,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;IACP,yBAAA;;;4BAEH,IAAI,YAAY,CAAC,WAAW,EAAE;IAC5B,4BAAA,YAAY,CAAC,WAAW,GAAG,KAAK,CAAC;IAClC,yBAAA;4BAED,OAAO,CAAA,CAAA,YAAA,CAAA;;IAGT,wBAAA,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;gCACzB,OAAQ,CAAA,CAAA,aAAA,IAAkB,CAAC,KAAK,CAAC,CAAA;IAClC,yBAAA;IAED,wBAAA,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,EAAE;gCAC1B,MAAQ,GAAA,IAAyB,CAAC,IAAI,CAAC;gCACvC,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,MAAI,CAAC,CAAC;gCAEhD,IAAI,KAAK,KAAK,SAAS,EAAE;IACvB,gCAAA,IAAI,MAAI,CAAC,MAAM,CAAC,MAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;IACxC,oCAAA,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAC/C,iCAAA;IAAM,qCAAA;IACL,oCAAA,MAAM,IAAI,KAAK,CAAC,oBAAa,MAAI,EAAA,mBAAA,CAAmB,CAAC,CAAC;IACvD,iCAAA;IACF,6BAAA;IACD,4BAAA,OAAA,CAAA,CAAA,aAAO,KAAK,CAAC,CAAA;IACd,yBAAA;IAEG,wBAAA,IAAA,EAAA,IAAI,CAAC,IAAI,KAAK,OAAO,CAAA,EAArB,OAAqB,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BACjB,SAAS,GAAG,IAAiB,CAAC;4BACvB,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,EAAE,YAAY,CAAC,CAAA,CAAA;;IAA7D,wBAAA,IAAI,GAAG,EAAsD,CAAA,IAAA,EAAA,CAAA;4BACrD,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,EAAE,YAAY,CAAC,CAAA,CAAA;;IAA/D,wBAAA,KAAK,GAAG,EAAuD,CAAA,IAAA,EAAA,CAAA;4BAE/D,IAAI,GAAG,cAAc,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;4BAC9C,IAAI,OAAO,IAAI,KAAK,UAAU;IAAE,4BAAA,OAAA,CAAA,CAAA,aAAO,IAAI,CAAC,IAAiB,EAAE,KAAkB,CAAC,CAAC,CAAA;;IAC9E,4BAAA,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;;IAG/C,wBAAA,IAAA,EAAA,IAAI,CAAC,IAAI,KAAK,WAAW,CAAA,EAAzB,OAAyB,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BACrB,aAAa,GAAG,IAAqB,CAAC;4BACxC,GAAG,GAAG,CAAC,CAAC;4BACR,OAAO,GAAY,IAAI,CAAC;;;IAErB,wBAAA,IAAA,EAAA,GAAG,GAAG,aAAa,CAAC,KAAK,CAAC,MAAM,CAAA,EAAA,OAAA,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BAC/B,EAAE,GAAG,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;4BAE5B,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,IAAI,EAAE,YAAY,CAAC,CAAA,CAAA;;4BAAzD,OAAO,GAAG,SAA+C,CAAC;4BAE1D,IAAI,EAAE,CAAC,EAAE,KAAK,KAAK,IAAI,CAAC,OAAO,EAAE;IAC/B,4BAAA,OAAA,CAAA,CAAA,aAAO,KAAK,CAAC,CAAA;IACd,yBAAA;IACD,wBAAA,IAAI,EAAE,CAAC,EAAE,KAAK,IAAI,IAAI,OAAO,EAAE;IAC7B,4BAAA,OAAA,CAAA,CAAA,aAAO,OAAO,CAAC,CAAA;IAChB,yBAAA;;IAGH,oBAAA,KAAA,EAAA,EAAA,OAAA,CAAA,CAAA,aAAO,OAAO,CAAC,CAAA;;IAGjB,wBAAA,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,EAAE;IAC1B,4BAAA,cAAA,GAAe,IAAwB,CAAC;gCAE9C,OAAO,CAAA,CAAA,aAAA,YAAA;;wCAAC,IAAkB,IAAA,GAAA,EAAA,CAAA;6CAAlB,IAAkB,EAAA,GAAA,CAAA,EAAlB,EAAkB,GAAA,SAAA,CAAA,MAAA,EAAlB,EAAkB,EAAA,EAAA;4CAAlB,IAAkB,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;IACxB,oCAAA,OAAA,CAAA,EAAA,GAAA,IAAI,SAAS,EAAE,EAAC,eAAe,CAAC,KAAA,CAAA,EAAA,EAAA,aAAA,CAAA,CAAA,cAAY,EAAE,YAAY,GAAK,IAAI,EAAA,KAAA,CAAA,CAAA,CAAA;IAAnE,iCAAoE,CAAC,CAAA;IACxE,yBAAA;IAEG,wBAAA,IAAA,EAAA,IAAI,CAAC,IAAI,KAAK,UAAU,CAAA,EAAxB,OAAwB,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BACpB,YAAY,GAAG,IAAwB,CAAC;4BACxC,IAAI,GAAG,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAE9C,CAAC;IAEb,wBAAA,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE;gCAC9B,MAAM,KAAK,CAAC,GAAI,CAAA,MAAA,CAAA,YAAY,CAAC,IAAI,EAAA,qCAAA,CAAqC,CAAC,CAAC;IACzE,yBAAA;4BAEK,GAAG,GAAG,EAAE,CAAC;IAC8B,wBAAA,EAAA,GAAA,CAAA,EAA7B,EAAA,GAAA,YAAY,CAAC,UAAU,IAAI,EAAE,CAAA;;;IAA7B,wBAAA,IAAA,EAAA,cAA6B,CAAA,EAAA,OAAA,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BAAlC,CAAC,GAAA,EAAA,CAAA,EAAA,CAAA,CAAA;IACV,wBAAA,EAAA,GAAA,CAAA,EAAA,GAAA,GAAG,EAAC,IAAI,CAAA;4BAAC,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CAAC,CAAC,EAAE,YAAY,CAAC,CAAA,CAAA;;4BAAlD,EAAS,CAAA,KAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAyC,EAAC,CAAC;;;IADtC,wBAAA,EAAA,EAA6B,CAAA;;IAItC,oBAAA,KAAA,EAAA,EAAA,OAAA,CAAA,CAAA,YAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,GAAG,EAAE;gCAC/C,UAAU,EAAE,YAAY,CAAC,UAAU;IACnC,4BAAA,IAAI,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;IACzB,4BAAA,MAAM,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5B,yBAAA,CAAC,CAAA,CAAA;IAJF,oBAAA,KAAA,EAAA,EAAA,OAAA,CAAA,CAAA,aAAO,SAIL,CAAC,CAAA;;IAGD,wBAAA,IAAA,EAAA,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAA,EAAtB,OAAsB,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BAClB,UAAU,GAAG,IAAkB,CAAC;kCAElC,UAAU,CAAC,MAAM,CAAC,IAAI,KAAK,cAAc,CAAA,EAAzC,OAAyC,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BACrC,MAAO,GAAA,UAAU,CAAC,MAA0B,CAAC;4BACnD,EAAA,GAAA,CAAA,KAAA,YAAY,CAAC,UAAU,EAAC,GAAG,CAAA;IACzB,wBAAA,EAAA,GAAA,CAAA,MAAI,CAAC,IAAI,CAAA,CAAA;4BACT,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA,CAAA;;4BAF3D,EAEE,CAAA,KAAA,CAAA,EAAA,EAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,CAAA,IAAA,EAAyD,GAC1D,CAAC;;;kCACO,UAAU,CAAC,MAAM,CAAC,IAAI,KAAK,eAAe,CAAA,EAA1C,OAA0C,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;IAC7C,wBAAA,UAAU,GAAG,UAAU,CAAC,MAA2B,CAAC;4BAIpD,gBAAgB,GAAG,IAAI,iBAAiB,CAC5C,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,EAChE,UAAU,CAAC,GAAG,CACf,CAAC;4BACoB,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAA,CAAA;;4BAAxE,YAAY,IAAI,EAAA,CAAA,IAAA,EAAwD,CAG7E,CAAA;IAEK,wBAAA,aAAa,GAAG,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;4BAE1E,gBAAgB,GAAG,EAAE,CAAC;IACtB,wBAAA,IAAA,EAAA,aAAa,CAAC,IAAI,KAAK,cAAc,CAAA,EAArC,OAAqC,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;IACvC,wBAAA,gBAAgB,GAAI,aAAkC,CAAC,IAAI,CAAC;;;IACnD,wBAAA,IAAA,EAAA,aAAa,CAAC,IAAI,KAAK,sBAAsB,CAAA,EAA7C,OAA6C,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BAClC,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CACzC,aAA0C,CAAC,WAAW,EACvD,YAAY,CACb,CAAA,CAAA;;IAHD,wBAAA,gBAAgB,IAAI,EAGnB,CAAA,IAAA,EAAA,CAAW,CAAC;;IAEb,oBAAA,KAAA,EAAA,EAAA,MAAM,KAAK,CAAC,sDAAsD,CAAC,CAAC;;IAGtE,wBAAA,EAAA,GAAA,YAAY,CAAA;IAAC,wBAAA,EAAA,GAAA,gBAAgB,CAAA;4BAAI,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA,CAAA;;4BAA1F,EAA8B,CAAA,EAAA,CAAA,GAAG,SAAyD,CAAC;;IAG7F,oBAAA,KAAA,EAAA,EAAA,OAAA,CAAA,CAAA,aAAO,IAAI,CAAC,CAAA;;IAGV,wBAAA,IAAA,EAAA,IAAI,CAAC,IAAI,KAAK,eAAe,CAAA,EAA7B,OAA6B,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BACxB,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,wBAAwB,CAAC,IAAyB,EAAE,YAAY,CAAC,CAAA,CAAA;IAAnF,oBAAA,KAAA,EAAA,EAAA,OAAA,CAAA,CAAA,aAAO,SAA4E,CAAC,CAAA;;IAGlF,wBAAA,IAAA,EAAA,IAAI,CAAC,IAAI,KAAK,cAAc,CAAA,EAA5B,OAA4B,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BACxB,gBAAgB,GAAG,IAAwB,CAAC;4BAC5C,GAAG,GAAG,EAA6B,CAAC;kCAEJ,EAAtB,EAAA,GAAA,gBAAgB,CAAC,KAAK,CAAA;;;IAAtB,wBAAA,IAAA,EAAA,cAAsB,CAAA,EAAA,OAAA,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BAA3B,CAAC,GAAA,EAAA,CAAA,EAAA,CAAA,CAAA;IACV,wBAAA,EAAA,GAAA,GAAG,CAAA;4BAAE,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,EAAE,YAAY,CAAC,CAAA,CAAA;;4BAA/C,EAAA,IAAC,EAA8C,CAAA,IAAA,EAAA,CAAW,CAAA;4BAAI,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CACxF,CAAC,CAAC,KAAK,EACP,YAAY,CACb,CAAA,CAAA;;4BAHD,EAA+D,CAAA,EAAA,CAAA,GAAG,SAGjE,CAAC;;;IAJY,wBAAA,EAAA,EAAsB,CAAA;;IAOtC,oBAAA,KAAA,EAAA,EAAA,OAAA,CAAA,CAAA,aAAO,GAAG,CAAC,CAAA;;IAGT,wBAAA,IAAA,EAAA,IAAI,CAAC,IAAI,KAAK,aAAa,CAAA,EAA3B,OAA2B,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BACvB,SAAS,GAAG,IAAuB,CAAC;4BACpC,GAAG,GAAG,EAAe,CAAC;kCAEM,EAAf,EAAA,GAAA,SAAS,CAAC,KAAK,CAAA;;;IAAf,wBAAA,IAAA,EAAA,cAAe,CAAA,EAAA,OAAA,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BAAvB,IAAI,GAAA,EAAA,CAAA,EAAA,CAAA,CAAA;IACb,wBAAA,EAAA,GAAA,CAAA,EAAA,GAAA,GAAG,EAAC,IAAI,CAAA;4BAAC,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,YAAY,CAAC,CAAA,CAAA;;4BAArD,EAAS,CAAA,KAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAA4C,EAAC,CAAC;;;IADtC,wBAAA,EAAA,EAAe,CAAA;;IAIlC,oBAAA,KAAA,EAAA,EAAA,OAAA,CAAA,CAAA,aAAO,GAAG,CAAC,CAAA;;;;;IAEd,KAAA,CAAA;IAEa,IAAA,cAAA,CAAA,SAAA,CAAA,wBAAwB,GAAtC,UACE,MAAyB,EACzB,YAA0B,EAAA;;;;;IAGP,oBAAA,KAAA,CAAA,EAAA,OAAA,CAAA,CAAA,YAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,CAAA,CAAA;;4BAA3E,WAAW,IAAI,EAAA,CAAA,IAAA,EAA4D,CAAQ,CAAA;IAE9E,wBAAA,CAAC,GAAG,CAAC,CAAA;;;IAAE,wBAAA,IAAA,EAAA,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAA,EAAA,OAAA,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;IACpC,wBAAA,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAExC,wBAAA,IAAK,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAA+B,CAAC,YAAY,IAAI,CAAC,WAAW,EAAE;gCACxF,WAAW,GAAG,EAAE,CAAC;IAClB,yBAAA;IAEG,wBAAA,IAAA,EAAA,UAAU,CAAC,IAAI,KAAK,cAAc,CAAA,EAAlC,OAAkC,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA;IACpC,wBAAA,WAAW,GAAG,WAAW,CAAE,UAA+B,CAAC,IAAI,CAAY,CAAC;;;IACnE,wBAAA,IAAA,EAAA,UAAU,CAAC,IAAI,KAAK,sBAAsB,CAAA,EAA1C,OAA0C,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA;4BAC7C,IAAI,GAAG,UAAsC,CAAC;IAEtC,wBAAA,EAAA,GAAA,WAAW,CAAA;4BACtB,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,YAAY,CAAC,CAAA,CAAA;;;IAD3D,wBAAA,WAAW,GAAG,EACZ,EAAC,EAAwD,CAAA,IAAA,EAAA,EAC/C,CAAC;;;IACJ,wBAAA,IAAA,EAAA,UAAU,CAAC,IAAI,KAAK,UAAU,CAAA,EAA9B,OAA8B,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;4BACjC,YAAY,GAAG,UAA8B,CAAC;IAC9C,wBAAA,IAAI,GAAG,WAAW,CAAC,YAAY,CAAC,IAAI,CAAoC,CAAC;4BAE/E,IACE,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI;gCACnC,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAA+B,CAAC,YAAY,EACpE;gCACA,WAAW,GAAG,IAAI,CAAC;gCACnB,OAAS,CAAA,CAAA,YAAA,EAAA,CAAA,CAAA;IACV,yBAAA;IAED,wBAAA,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE;gCAC9B,MAAM,KAAK,CAAC,GAAI,CAAA,MAAA,CAAA,YAAY,CAAC,IAAI,EAAA,qCAAA,CAAqC,CAAC,CAAC;IACzE,yBAAA;4BACK,GAAG,GAAG,EAAE,CAAC;IAC8B,wBAAA,EAAA,GAAA,CAAA,EAA7B,EAAA,GAAA,YAAY,CAAC,UAAU,IAAI,EAAE,CAAA;;;IAA7B,wBAAA,IAAA,EAAA,cAA6B,CAAA,EAAA,OAAA,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA;4BAAlC,CAAC,GAAA,EAAA,CAAA,EAAA,CAAA,CAAA;IACV,wBAAA,EAAA,GAAA,CAAA,EAAA,GAAA,GAAG,EAAC,IAAI,CAAA;4BAAC,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,aAAa,CAAC,CAAC,EAAE,YAAY,CAAC,CAAA,CAAA;;4BAAlD,EAAS,CAAA,KAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAyC,EAAC,CAAC;;;IADtC,wBAAA,EAAA,EAA6B,CAAA;;IAI/B,oBAAA,KAAA,CAAA,EAAA,OAAA,CAAA,CAAA,YAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,GAAG,EAAE;gCACxE,UAAU,EAAE,YAAY,CAAC,UAAU;IACnC,4BAAA,IAAI,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;IACzB,4BAAA,MAAM,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5B,yBAAA,CAAC,CAAA,CAAA;;4BAJF,WAAW,GAAG,SAIZ,CAAC;;IAEH,oBAAA,KAAA,EAAA,EAAA,MAAM,KAAK,CAAC,kCAAkC,CAAC,CAAC;;IAzCN,wBAAA,CAAC,EAAE,CAAA;;iCA6CjD,OAAO,CAAA,CAAA,aAAA,WAAW,KAAK,SAAS,GAAG,IAAI,GAAG,WAAW,CAAC,CAAA;;;;IACvD,KAAA,CAAA;QACH,OAAC,cAAA,CAAA;IAAD,CAAC,EAAA,CAAA;;IC3mBM,IAAM,aAAa,GAAG;QAC3B,QAAQ,EAAA,YAAA;IACN,QAAA,OAAO,gEAAgE,CAAC;SACzE;QACD,QAAQ,EAAE,UAAC,GAAqC,EAAA;IAArC,QAAA,IAAA,GAAA,KAAA,KAAA,CAAA,EAAA,EAAA,GAAqC,GAAA,IAAA,CAAA,EAAA;IAC9C,QAAA,OAAA,mBAAmB,CAAC,GAAa,CAAC,IAAI,IAAI,IAAI,EAAE,CAAA;SAAA;IAClD,IAAA,KAAK,EAAE,KAAK;IACZ,IAAA,KAAK,EAAE,YAAA;YAAC,IAAkB,IAAA,GAAA,EAAA,CAAA;iBAAlB,IAAkB,EAAA,GAAA,CAAA,EAAlB,EAAkB,GAAA,SAAA,CAAA,MAAA,EAAlB,EAAkB,EAAA,EAAA;gBAAlB,IAAkB,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;IACxB,QAAA,OAAO,CAAC,GAAG,CAAA,KAAA,CAAX,OAAO,EAAQ,IAAI,CAAE,CAAA;IACrB,QAAA,OAAO,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;SACzC;IACD,IAAA,MAAM,EAAE,UAAC,CAAU,EAAE,QAAwB,EAAA;IAAxB,QAAA,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA,EAAA,QAAwB,GAAA,IAAA,CAAA,EAAA;IAC3C,QAAA,OAAA,QAAQ,KAAK,IAAI,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,IAAI,QAAQ,CAAA;SAAA;QAChD,MAAM,EAAE,UAAC,CAAU,EAAA,EAAc,OAAA,CAAC,YAAY,IAAI,CAAA,EAAA;QAClD,UAAU,EAAE,UAAC,CAAU,EAAc,EAAA,OAAA,OAAO,CAAC,KAAK,UAAU,CAAA,EAAA;QAC5D,QAAQ,EAAE,UAAC,CAAU,EAAc,EAAA,OAAA,OAAO,CAAC,KAAK,QAAQ,CAAA,EAAA;IACxD,IAAA,cAAc,EAAE,UAAC,GAA4B,EAAE,QAAgB,EAAA,EAAc,OAAA,OAAO,GAAG,CAAC,QAAQ,CAAC,GAAA;IACjG,IAAA,IAAI,EAAE,IAAI;IACV,IAAA,MAAM,EAAE,MAAM;IACd,IAAA,KAAK,EAAE,KAAK;IACZ,IAAA,IAAI,EAAE,IAAI;;QAEV,qBAAqB,EAAE,eAAc;;QAErC,mBAAmB,EAAE,cAA+B,QAAC,EAAE,EAAC,EAAA;KACzD,CAAC;IAWF,SAAS,KAAK,CAAC,KAAa,EAAE,IAAU,EAAE,IAAQ,EAAA;IAApB,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,EAAA,IAAU,GAAA,GAAA,CAAA,EAAA;IAAE,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,EAAA,IAAQ,GAAA,CAAA,CAAA,EAAA;QAChD,IAAM,GAAG,GAAa,EAAE,CAAC;IACzB,IAAA,IAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,GAAG,SAAS,GAAG,KAAK,GAAG,IAAI,CAAC;QAChC,KAAK,GAAG,SAAS,GAAG,CAAC,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,GAAG,KAAK,CAAC;QACd,OAAO,CAAC,GAAG,IAAI,EAAE;IACf,QAAA,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACZ,CAAC,IAAI,IAAI,CAAC;IACX,KAAA;IACD,IAAA,OAAO,GAAG,CAAC;IACb;;ICIA,IAAA,eAAA,kBAAA,YAAA;IAAA,IAAA,SAAA,eAAA,GAAA;YACW,IAAM,CAAA,MAAA,GAAY,EAAE,CAAC;SAiB/B;IAfC,IAAA,eAAA,CAAA,SAAA,CAAA,SAAS,GAAT,YAAA;YACE,OAAO,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SACrC,CAAA;IAED,IAAA,eAAA,CAAA,SAAA,CAAA,WAAW,GAAX,YAAA;YACE,OAAO,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SACvC,CAAA;IAED,IAAA,eAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;IACE,QAAA,OAAO,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;SACxD,CAAA;IAED,IAAA,eAAA,CAAA,SAAA,CAAA,SAAS,GAAT,YAAA;IACE,QAAA,OAAO,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;SAC1D,CAAA;QACH,OAAC,eAAA,CAAA;IAAD,CAAC,EAAA,CAAA,CAAA;IAED,IAAA,MAAA,kBAAA,YAAA;IAAA,IAAA,SAAA,MAAA,GAAA;YACU,IAAa,CAAA,aAAA,GAAiB,IAAI,CAAC;YACnC,IAAW,CAAA,WAAA,GAAG,EAAE,CAAC;SAgqB1B;IA9pBC;;;;IAIG;IACH,IAAA,MAAA,CAAA,SAAA,CAAA,KAAK,GAAL,UAAM,MAAe,EAAE,IAAkB,EAAE,IAAe,EAAA;;IAAnC,QAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,EAAA,IAAkB,GAAA,WAAA,CAAA,EAAA;IAAE,QAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,EAAA,IAAe,GAAA,QAAA,CAAA,EAAA;IACxD,QAAA,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IACxB,QAAA,IAAM,GAAG,GAAG,EAAE,IAAI,EAAA,IAAA,EAAE,IAAI,EAAA,IAAA,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAc,CAAC;IAE5D,QAAA,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;IAC7B,YAAA,OAAO,GAAG,CAAC;IACZ,SAAA;YAED,IAAI;;gBAEF,IAAM,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;;IAG9D,YAAA,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;IAC7C,SAAA;IAAC,QAAA,OAAO,KAAK,EAAE;gBACd,IAAM,GAAG,GAAG,KAAc,CAAC;gBAC3B,IAAM,KAAK,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,aAAa,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAK,EAAY,CAAC;gBAClD,MAAM,IAAI,eAAe,CACvB,GAAG,CAAC,IAAI,EACR,YAAY,CAAC,KAAK,CAAC,EACnB,cAAc,CAAC,KAAK,CAAC,EACrB,GAAG,CAAC,OAAO,IAAI,MAAM,CAAC,GAAG,CAAC,CAC3B,CAAC;IACH,SAAA;IACD,QAAA,OAAO,GAAG,CAAC;SACZ,CAAA;IAEO,IAAA,MAAA,CAAA,SAAA,CAAA,mBAAmB,GAA3B,UAA4B,YAA+B,EAAE,GAAa,EAAA;YAA1E,IAuTC,KAAA,GAAA,IAAA,CAAA;IAtTC,QAAA,IAAM,OAAO,GAAG,UAAC,MAAe,EAAE,eAAuB,EAAA;IACvD,YAAA,IAAM,gBAAgB,GAAG,KAAI,CAAC,wBAAwB,CACpD,MAAM,EACN,YAAY,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CACtC,CAAC;IACF,YAAA,IAAM,OAAO,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,EAAe,EAAE,KAAK,EAAE,EAAe,EAAc,CAAC;IAC9F,YAAA,KAAI,CAAC,mBAAmB,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;gBACpD,OAAO,OAAO,CAAC,IAAI,CAAC;IACtB,SAAC,CAAC;IAEF,QAAA,IAAM,WAAW,GAAG,UAAC,IAAa,EAAE,SAAyB,EAAE,MAAgB,EAAA;gBAC7E,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;gBAChC,aAAa,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;IAC5D,YAAA,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;IACzB,SAAC,CAAC;IAEF,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC5C,YAAA,IAAM,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;;gBAGpC,IAAI,EAAE,GAAG,CAAC,CAAC;IACX,YAAA,OAAO,EAAE,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE;IACrC,gBAAA,IAAI,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,KAAK,UAAU,CAAC,OAAO,EAAE;wBAC/D,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAClC,iBAAA;IAAM,qBAAA;IACL,oBAAA,EAAE,EAAE,CAAC;IACN,iBAAA;IACF,aAAA;IACD,YAAA,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE;oBAC9B,SAAS;IACV,aAAA;gBAED,IAAM,UAAU,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACzC,IAAM,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IACjF,YAAA,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC;gBAEhC,IAAM,cAAc,GAAa,EAAE,CAAC;gBACpC,IAAM,kBAAkB,GAAa,EAAE,CAAC;gBAExC,IAAI,YAAY,CAAC,UAAU,CAAC,KAAK,UAAU,CAAC,OAAO,EAAE;IACnD,gBAAA,GAAG,CAAC,IAAI,CAAC,IAAI,CACX,IAAI,WAAW,CAAC,aAAa,CAAC,UAAU,CAAW,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC,CAC9E,CAAC;IACH,aAAA;IAAM,iBAAA,IACL,aAAa,CAAC,UAAU,CAAC,KAAK,KAAK;IACnC,iBAAC,aAAa,CAAC,UAAU,CAAC,KAAK,OAAO,IAAI,aAAa,CAAC,WAAW,CAAC,KAAK,KAAK,CAAC,EAC/E;oBACA,IAAM,OAAO,GAAG,aAAa,CAAC,UAAU,CAAC,KAAK,OAAO,CAAC;IACtD,gBAAA,IAAM,QAAQ,GAAG,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAW,CAAC;oBAC9E,IAAM,YAAY,GAAG,WAAW,CAAC,MAAM,CAAC,KAAK,CAC3C,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,IAAI,EAAI,EAAA,OAAA,aAAa,CAAC,IAAI,CAAC,KAAK,GAAG,CAAA,EAAA,CAAC,GAAG,CAAC,EACrE,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,IAAI,IAAI,OAAA,aAAa,CAAC,IAAI,CAAC,KAAK,GAAG,CAA3B,EAA2B,CAAC,CAClE,CAAC;oBAEF,IAAM,MAAM,GAAG,WAAW,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,EAAI,EAAA,OAAA,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAW,CAAA,EAAA,CAAC,CAAC;IAEtF,gBAAA,IAAM,WAAW,GAAG,mBAAmB,CAAC,WAAW,CAAC,MAAM,EAAE,UAAA,CAAC,EAAA,EAAI,OAAA,CAAC,KAAK,GAAG,CAAT,EAAS,CAAC,CAAC;IAE5E,gBAAA,IAAI,WAAW,KAAK,CAAC,CAAC,EAAE;IACtB,oBAAA,MAAM,sBAAsB,CAAC;IAC9B,iBAAA;oBAED,IAAM,gBAAgB,GAAG,IAAI,CAAC,wBAAwB,CACpD,WAAW,CAAC,MAAM,EAClB,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAClD,CAAC;IACF,gBAAA,IAAM,OAAO,GAAG;IACd,oBAAA,IAAI,EAAE,QAAQ;IACd,oBAAA,IAAI,EAAE,EAAe;IACrB,oBAAA,KAAK,EAAE,EAAe;qBACX,CAAC;IACd,gBAAA,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;oBAEpD,GAAG,CAAC,KAAK,CAAC,IAAI,CACZ,IAAI,eAAe,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAClF,CAAC;IACH,aAAA;IAAM,iBAAA,IAAI,aAAa,CAAC,UAAU,CAAC,KAAK,IAAI,EAAE;IAC7C,gBAAA,IAAM,WAAW,GAAG,mBAAmB,CAAC,WAAW,CAAC,MAAM,EAAE,UAAA,CAAC,EAAA,EAAI,OAAA,CAAC,KAAK,GAAG,CAAT,EAAS,CAAC,CAAC;IAE5E,gBAAA,IAAI,WAAW,KAAK,CAAC,CAAC,EAAE;IACtB,oBAAA,MAAM,qBAAqB,CAAC;IAC7B,iBAAA;IAED,gBAAA,IAAM,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,MAAM,EAAE,WAAW,GAAG,CAAC,CAAC,CAAC;IAC5D,gBAAA,IAAM,eAAe,GAAG,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;oBAEjE,IAAM,aAAa,GAAG,WAAW,CAAC,eAAe,EAAE,cAAc,CAAC,OAAO,EAAE,cAAc,CAAC;0BACtF,IAAI,CAAC,sBAAsB,CAAC,cAAc,EAAE,eAAe,CAAC;IAC9D,sBAAE,IAAI,CAAC,oBAAoB,CAAC,eAAe,CAAC,CAAC;;oBAG/C,IAAM,SAAS,GAAe,EAAE,CAAC;IACjC,gBAAA,OACE,YAAY,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC;IAC3B,oBAAA,aAAa,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,MAAM,EACvD;IACA,oBAAA,IAAM,eAAe,GAAG,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;IAE1C,oBAAA,IAAM,SAAS,GAAG,mBAAmB,CAAC,eAAe,CAAC,MAAM,EAAE,UAAA,CAAC,EAAA,EAAI,OAAA,CAAC,KAAK,GAAG,CAAT,EAAS,CAAC,CAAC;IAE9E,oBAAA,IAAM,iBAAe,GAAG,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;wBAErE,IAAM,iBAAiB,GAAG,WAAW,CACnC,iBAAe,EACf,cAAc,CAAC,OAAO,EACtB,cAAc,CACf;8BACG,IAAI,CAAC,sBAAsB,CAAC,cAAc,EAAE,iBAAe,CAAC;IAC9D,0BAAE,IAAI,CAAC,oBAAoB,CAAC,iBAAe,CAAC,CAAC;IAE/C,oBAAA,IAAM,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC,MAAM,EAAE,SAAS,GAAG,CAAC,CAAC,CAAC;wBAChE,SAAS,CAAC,IAAI,CACZ,IAAI,QAAQ,CAAC,iBAAiB,EAAE,QAAQ,EAAE,WAAW,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAClF,CAAC;IACH,iBAAA;;oBAGD,IAAI,QAAQ,GAA0B,SAAS,CAAC;IAChD,gBAAA,IACE,YAAY,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC;IAC3B,oBAAA,aAAa,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,MAAM;IACvD,oBAAA,aAAa,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EACpD;IACA,oBAAA,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAClD,oBAAA,CAAC,EAAE,CAAC;IACL,iBAAA;oBAED,GAAG,CAAC,IAAI,CAAC,IAAI,CACX,IAAI,MAAM,CAAC,aAAa,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC,CAChF,CAAC;IACH,aAAA;IAAM,iBAAA,IAAI,aAAa,CAAC,UAAU,CAAC,KAAK,KAAK,EAAE;oBAC9C,IAAI,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAChD,oBAAA,MAAM,2CAA2C,CAAC;IACnD,iBAAA;oBAED,IAAM,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;oBAC/C,IAAM,OAAO,GAAiB,EAAE,CAAC;oBAEjC,IAAI,QAAQ,GAA0B,SAAS,CAAC;oBAChD,IAAI,WAAW,GAA0B,SAAS,CAAC;IAEnD,gBAAA,OACE,YAAY,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC;IAC3B,qBAAC,aAAa,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,MAAM;IACtD,wBAAA,aAAa,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,QAAQ;IACzD,wBAAA,aAAa,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,EAC7D;IACA,oBAAA,IAAI,aAAa,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,MAAM,EAAE;IAC3D,wBAAA,IAAI,QAAQ,EAAE;IACZ,4BAAA,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;IAC1D,yBAAA;IAED,wBAAA,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACnD,qBAAA;IAED,oBAAA,IAAI,aAAa,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;IAC9D,wBAAA,IAAI,WAAW,EAAE;IACf,4BAAA,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;IAC1D,yBAAA;IAED,wBAAA,WAAW,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACtD,qBAAA;IAED,oBAAA,IAAI,aAAa,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;4BAC7D,IAAM,QAAQ,GAAG,mBAAmB,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,UAAA,CAAC,EAAA,EAAI,OAAA,CAAC,KAAK,GAAG,CAAA,EAAA,CAAC,CAAC;4BACjF,IAAM,MAAM,GAAG,EAAgB,CAAC;4BAEhC,IAAI,QAAQ,KAAK,CAAC,EAAE;gCAClB,MAAM,CAAC,KAAK,GAAG,EAAE,IAAI,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAe,CAAC;IACpF,yBAAA;iCAAM,IAAI,QAAQ,KAAK,CAAC,EAAE;gCACzB,MAAM,CAAC,KAAK,GAAG;IACb,gCAAA,IAAI,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAClD,gCAAA,KAAK,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iCACvC,CAAC;IAChB,yBAAA;iCAAM,IAAI,QAAQ,KAAK,CAAC,EAAE;gCACzB,MAAM,CAAC,KAAK,GAAG;IACb,gCAAA,IAAI,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAClD,gCAAA,KAAK,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iCACvC,CAAC;IAChB,yBAAA;iCAAM,IAAI,QAAQ,KAAK,CAAC,EAAE;IACzB,4BAAA,MAAM,IAAI,KAAK,CACb,8FAA8F,CAC/F,CAAC;IACH,yBAAA;IAED,wBAAA,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC;IAEhE,wBAAA,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACtB,qBAAA;IAED,oBAAA,CAAC,EAAE,CAAC;IACL,iBAAA;IAED,gBAAA,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;IACnB,oBAAA,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACvC,iBAAA;oBAED,GAAG,CAAC,IAAI,CAAC,IAAI,CACX,IAAI,aAAa,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC,CACpF,CAAC;IACH,aAAA;IAAM,iBAAA,IAAI,aAAa,CAAC,UAAU,CAAC,KAAK,UAAU,EAAE;oBACnD,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,YAAY,EAAE,CAAC,CAAC;IACnC,aAAA;IAAM,iBAAA,IAAI,aAAa,CAAC,UAAU,CAAC,KAAK,OAAO,EAAE;oBAChD,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,SAAS,EAAE,CAAC,CAAC;IAChC,aAAA;IAAM,iBAAA,IAAI,aAAa,CAAC,UAAU,CAAC,KAAK,QAAQ,EAAE;IACjD,gBAAA,GAAG,CAAC,IAAI,CAAC,IAAI,CACX,IAAI,UAAU,CACZ,WAAW,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC;IAC3B,sBAAE,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;0BACtD,SAAS,EACb,WAAW,CAAC,UAAU,CAAC,CACxB,CACF,CAAC;IACH,aAAA;IAAM,iBAAA,IAAI,aAAa,CAAC,UAAU,CAAC,KAAK,OAAO,EAAE;IAChD,gBAAA,IAAI,WAAW,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;IACnC,oBAAA,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;IACpF,iBAAA;oBACD,IAAM,SAAS,GAAG,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAW,CAAC;;;;;;;IASjE,gBAAA,IAAM,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAEtE,gBAAA,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,SAAS,EAAE,MAAM,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC1E,aAAA;IAAM,iBAAA,IAAI,aAAa,CAAC,UAAU,CAAC,KAAK,KAAK,EAAE;IAC9C,gBAAA,IAAM,WAAW,GAAG,mBAAmB,CAAC,WAAW,CAAC,MAAM,EAAE,UAAA,CAAC,EAAA,EAAI,OAAA,CAAC,KAAK,GAAG,CAAT,EAAS,CAAC,CAAC;IAE5E,gBAAA,IAAI,WAAW,KAAK,CAAC,CAAC,EAAE;IACtB,oBAAA,MAAM,qBAAqB,CAAC;IAC7B,iBAAA;oBAED,IAAM,WAAW,GAAG,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAW,CAAC;IACnE,gBAAA,IAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC;IACxF,gBAAA,IAAM,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,MAAM,EAAE,WAAW,GAAG,CAAC,CAAC,CAAC;oBAE7D,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACxF,aAAA;IAAM,iBAAA,IAAI,aAAa,CAAC,UAAU,CAAC,KAAK,OAAO,EAAE;IAChD,gBAAA,IAAM,WAAW,GAAG,mBAAmB,CAAC,WAAW,CAAC,MAAM,EAAE,UAAA,CAAC,EAAA,EAAI,OAAA,CAAC,KAAK,GAAG,CAAT,EAAS,CAAC,CAAC;IAE5E,gBAAA,IAAI,WAAW,KAAK,CAAC,CAAC,EAAE;IACtB,oBAAA,MAAM,0BAA0B,CAAC;IAClC,iBAAA;IAED,gBAAA,IAAM,eAAe,GAAG,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;oBACjE,IAAM,aAAa,GAAG,WAAW,CAAC,eAAe,EAAE,cAAc,CAAC,OAAO,EAAE,cAAc,CAAC;0BACtF,IAAI,CAAC,sBAAsB,CAAC,cAAc,EAAE,eAAe,CAAC;IAC9D,sBAAE,IAAI,CAAC,oBAAoB,CAAC,eAAe,CAAC,CAAC;IAE/C,gBAAA,IAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,MAAM,EAAE,WAAW,GAAG,CAAC,CAAC,CAAC;IAE1D,gBAAA,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,aAAa,EAAE,IAAI,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC5E,aAAA;IAAM,iBAAA,IAAI,aAAa,CAAC,UAAU,CAAC,KAAK,QAAQ,EAAE;IACjD,gBAAA,IAAI,OAAO,GAAG,mBAAmB,CAAC,WAAW,CAAC,MAAM,EAAE,UAAA,CAAC,EAAA,EAAI,OAAA,CAAC,KAAK,IAAI,CAAV,EAAU,CAAC,CAAC;oBACvE,IAAI,OAAO,GAAG,CAAC,EAAE;IACf,oBAAA,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC;IACrC,iBAAA;IAED,gBAAA,IAAM,QAAM,GAAG;wBACb,IAAI,EAAE,WAAW,CAAC,MAAM;IACrB,yBAAA,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC;6BACjB,GAAG,CAAC,UAAA,CAAC,EAAI,EAAA,OAAA,aAAa,CAAC,CAAC,CAAC,CAAhB,EAAgB,CAAC;6BAC1B,IAAI,CAAC,EAAE,CAAC;wBACX,KAAK,EACH,WAAW,CAAC,MAAM;IACf,yBAAA,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC;6BAClB,GAAG,CAAC,UAAA,CAAC,EAAI,EAAA,OAAA,aAAa,CAAC,CAAC,CAAC,CAAhB,EAAgB,CAAC;IAC1B,yBAAA,IAAI,CAAC,EAAE,CAAC,IAAI,SAAS;qBACd,CAAC;IAEf,gBAAA,IAAM,IAAI,GAAG,EAAc,CAAC;oBAC5B,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,QAAM,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACjF,aAAA;IAAM,iBAAA,IAAI,aAAa,CAAC,UAAU,CAAC,KAAK,MAAM,EAAE;IAC/C,gBAAA,IAAM,WAAW,GAAG,mBAAmB,CAAC,WAAW,CAAC,MAAM,EAAE,UAAA,CAAC,EAAA,EAAI,OAAA,CAAC,KAAK,QAAQ,CAAd,EAAc,CAAC,CAAC;oBACjF,IAAI,WAAW,GAAG,CAAC,EAAE;IACnB,oBAAA,MAAM,KAAK,CAAC,6BAA6B,CAAC,CAAC;IAC5C,iBAAA;IAED,gBAAA,IAAM,QAAM,GAAG;wBACb,IAAI,EAAE,WAAW,CAAC,MAAM;IACrB,yBAAA,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC;6BACrB,GAAG,CAAC,UAAA,CAAC,EAAI,EAAA,OAAA,aAAa,CAAC,CAAC,CAAC,CAAhB,EAAgB,CAAC;6BAC1B,IAAI,CAAC,EAAE,CAAC;qBACC,CAAC;oBAEf,IAAM,KAAK,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,EAAA;wBAC7E,OAAO;IACL,wBAAA,IAAI,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzB,wBAAA,KAAK,EAAE,CAAC,CAAC,MAAM,KAAK,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS;yBAC3C,CAAC;IACjB,iBAAC,CAAC,CAAC;IAEH,gBAAA,IAAM,IAAI,GAAG,EAAc,CAAC;oBAE5B,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,QAAM,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC7E,aAAA;IAAM,iBAAA,IAAI,WAAW,CAAC,WAAW,CAAC,MAAM,EAAE,cAAc,CAAC,UAAU,EAAE,kBAAkB,CAAC,EAAE;oBACzF,IAAM,YAAY,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;oBAC1D,IAAM,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC1D,IAAM,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC1D,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChF,aAAA;IAAM,iBAAA,IAAI,WAAW,CAAC,WAAW,CAAC,MAAM,EAAE,cAAc,CAAC,OAAO,EAAE,cAAc,CAAC,EAAE;IAClF,gBAAA,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,cAAc,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;IAChF,aAAA;IAAM,iBAAA;IACL,gBAAA,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;IAC9D,aAAA;IACF,SAAA;SACF,CAAA;IAEO,IAAA,MAAA,CAAA,SAAA,CAAA,iBAAiB,GAAzB,UAA0B,CAAU,EAAE,KAAa,EAAE,GAAW,EAAA;;YAE9D,IAAI,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,UAAU,CAAC,aAAa,EAAE;IAC1F,YAAA,KAAK,EAAE,CAAC;IACR,YAAA,GAAG,EAAE,CAAC;IACP,SAAA;YAED,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;SAC5B,CAAA;IAEO,IAAA,MAAA,CAAA,SAAA,CAAA,yBAAyB,GAAjC,UAAkC,OAAiB,EAAE,MAAe,EAAA;YAClE,IAAM,KAAK,GAAG,CAAC,CAAC;YAEhB,IAAI,QAAQ,GAAmB,IAAI,CAAC;IACpC,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACvC,YAAA,IAAM,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAwB,CAAC;IACzE,YAAA,QAAQ,GAAG,QAAQ;IACjB,kBAAE,QAAQ;IACV,kBAAE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEjF,IAAM,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;gBACvE,IAAM,SAAS,GAAG,IAAI,CAAC,oBAAoB,CACzC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CACvD,CAAC;IAEF,YAAA,QAAQ,GAAG,IAAI,SAAS,CAAC,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChF,SAAA;IAED,QAAA,OAAO,QAAmB,CAAC;SAC5B,CAAA;IAEO,IAAA,MAAA,CAAA,SAAA,CAAA,sBAAsB,GAA9B,UAA+B,OAAiB,EAAE,MAAe,EAAA;YAC/D,IAAI,KAAK,GAAG,CAAC,CAAC;YACd,IAAM,UAAU,GAAsB,EAAE,CAAC;IACzC,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,IAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACnC,YAAA,IAAM,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvE,UAAU,CAAC,IAAI,CAAC;IACd,gBAAA,IAAI,EAAE,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC;IAC7C,gBAAA,EAAE,EAAE,aAAa,CAAC,OAAO,CAAqB;IAC/C,aAAA,CAAC,CAAC;IAEH,YAAA,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACxB,SAAA;YAED,UAAU,CAAC,IAAI,CAAC;IACd,YAAA,IAAI,EAAE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;IACnE,SAAA,CAAC,CAAC;IAEtB,QAAA,IAAM,GAAG,GAAG,IAAI,aAAa,CAAC,UAAU,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClE,QAAA,OAAO,GAAG,CAAC;SACZ,CAAA;IAEO,IAAA,MAAA,CAAA,SAAA,CAAA,wBAAwB,GAAhC,UAAiC,MAAe,EAAE,SAAiB,EAAA;YACjE,IAAM,KAAK,GAAsB,EAAE,CAAC;YAEpC,IAAI,MAAM,GAAG,CAAC,CAAC;IAEf,QAAA,IAAI,IAAI,GAAG,IAAI,eAAe,EAAE,CAAC;IACjC,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACtC,YAAA,IAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACxB,YAAA,IAAM,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;IAClC,YAAA,IAAM,OAAO,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;IACtC,YAAA,IAAM,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;IACnC,YAAA,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;gBAE3B,IAAI,KAAK,IAAI,SAAS,EAAE;oBAKtB,IAAI,MAAM,KAAK,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAe,CAAC,EAAE;IAE1D,oBAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjB,oBAAA,IAAI,GAAG,IAAI,eAAe,EAAE,CAAC;IAC9B,iBAAA;IAED,gBAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;oBAGxB,IAAI,MAAM,KAAK,CAAC,EAAE;wBAChB,MAAM,GAAG,OAAO,CAAC;IAClB,iBAAA;;;oBAID,IAAI,OAAO,GAAG,MAAM,EAAE;wBACpB,MAAM;IACP,iBAAA;IACF,aAAA;IACF,SAAA;IAED,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;IACtB,YAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClB,SAAA;IAED,QAAA,OAAO,KAAK,CAAC;SACd,CAAA;QAEO,MAAoB,CAAA,SAAA,CAAA,oBAAA,GAA5B,UAA6B,MAAe,EAAA;YAA5C,IAiOC,KAAA,GAAA,IAAA,CAAA;IAhOC,QAAA,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;IACvB,YAAA,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAC/C,SAAA;YACD,IAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC5C,QAAA,IAAI,aAAa,CAAC,SAAS,CAAC,KAAK,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,KAAK,UAAU,CAAC,aAAa,EAAE;IAC5F,YAAA,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;IACrD,SAAA;IAED,QAAA,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;;YAG/B,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,KAAK,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE;IACpF,YAAA,IAAM,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC7B,YAAA,IAAM,SAAS,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC;IAE3C,YAAA,IAAI,kBAAkB,CAAC,SAAS,CAAC,EAAE;IACjC,gBAAA,OAAO,IAAI,SAAS,CAAC,UAAU,CAAC,CAAC;IAClC,aAAA;IAAM,iBAAA,IAAI,SAAS,KAAK,UAAU,CAAC,UAAU,EAAE;oBAC9C,OAAO,IAAI,gBAAgB,CACzB,UAAU,EACV,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,KAAK,SAAS,CACvE,CAAC;IACH,aAAA;gBAED,MAAM,KAAK,CAAC,2BAAA,CAAA,MAAA,CAA4B,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAG,GAAA,CAAA,CAAC,CAAC;IACxE,SAAA;;YAGD,IAAM,cAAc,GAAG,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACjD,QAAA,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;IAC7B,YAAA,IAAM,MAAM,GACV,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG;IACzC,kBAAE,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;IAC3D,kBAAE,cAAc,CAAC,CAAC,CAAC,CAAC;gBACxB,IAAM,MAAM,GAAG,WAAW,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,EAAI,EAAA,OAAA,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAW,CAAA,EAAA,CAAC,CAAC;IAEhF,YAAA,IAAM,gBAAgB,GAAG,IAAI,CAAC,wBAAwB,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7E,YAAA,IAAM,OAAO,GAAG;oBACd,IAAI,EAAE,IAAI,CAAC,WAAW;IACtB,gBAAA,IAAI,EAAE,EAAe;IACrB,gBAAA,KAAK,EAAE,EAAe;iBACX,CAAC;IACd,YAAA,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;IAEpD,YAAA,OAAO,IAAI,gBAAgB,CAAC,OAAO,EAAE,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtE,SAAA;;YAGD,IAAM,kBAAkB,GAAG,aAAa,CAAC,MAAM,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC;YAC5E,IAAI,kBAAkB,CAAC,MAAM,EAAE;gBAC7B,OAAO,IAAI,CAAC,yBAAyB,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;IACnE,SAAA;;IAGD,QAAA,IAAM,GAAG,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;YAClC,IAAI,GAAG,CAAC,MAAM,EAAE;gBACd,IAAI,QAAQ,GAAmB,IAAI,CAAC;IACpC,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACnC,gBAAA,IAAM,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;oBACvB,IAAM,EAAE,GAAG,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,CAAc,CAAC;oBAEvD,IAAI,WAAW,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;IACzD,gBAAA,IAAI,MAAM,GAAG,WAAW,KAAK,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC;IAC9E,gBAAA,IAAI,WAAW,KAAK,IAAI,KAAK,MAAM,KAAK,GAAG,IAAI,MAAM,KAAK,GAAG,CAAC,EAAE;wBAC9D,IAAI,SAAS,GAAmB,IAAI,CAAC;;wBAErC,GAAG;4BACD,IAAM,YAAY,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;IAE5D,wBAAA,IAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,OAAO,GAAG,CAAC,EAAE,WAAW,CAAC,CAAC;IAC5E,wBAAA,IAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,CACxC,MAAM,EACN,WAAW,GAAG,CAAC,EACf,YAAY,IAAI,MAAM,CAAC,MAAM,CAC9B,CAAC;4BAEF,IAAM,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;4BACpD,IAAM,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;4BACtD,SAAS,GAAG,IAAI,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAEnF,wBAAA,CAAC,EAAE,CAAC;4BACJ,WAAW,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;IACrD,wBAAA,MAAM,GAAG,WAAW,KAAK,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC;IAC3E,qBAAA,QAAQ,WAAW,KAAK,IAAI,KAAK,MAAM,KAAK,GAAG,IAAI,MAAM,KAAK,GAAG,CAAC,EAAE;;wBAGrE,IAAI,QAAQ,KAAK,IAAI,EAAE;IACrB,wBAAA,IAAM,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;IAC7D,wBAAA,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;IACjD,qBAAA;IACD,oBAAA,QAAQ,GAAG,IAAI,SAAS,CACtB,QAAQ,EACR,EAAyB,EACzB,SAAS,EACT,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CACvB,CAAC;IACH,iBAAA;IAAM,qBAAA;wBACL,IAAM,SAAS,GAAG,QAAQ,GAAG,EAAE,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;IAC7E,oBAAA,IAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CACvC,MAAM,EACN,OAAO,GAAG,CAAC,EACX,WAAW,IAAI,MAAM,CAAC,MAAM,CAC7B,CAAC;wBACF,IAAM,IAAI,GAAY,QAAQ,IAAI,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;wBACvE,IAAM,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;IACpD,oBAAA,QAAQ,GAAG,IAAI,SAAS,CAAC,IAAI,EAAE,EAAyB,EAAE,KAAK,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1F,iBAAA;IACF,aAAA;gBAED,IAAI,QAAQ,KAAK,IAAI,EAAE;IACrB,gBAAA,MAAM,KAAK,CAAC,uBAAuB,CAAC,CAAC;IACtC,aAAA;IAED,YAAA,OAAO,QAAQ,CAAC;IACjB,SAAA;;IAID,QAAA,IAAM,IAAI,GAAG,6BAA6B,CAAC,MAAM,CAAC,CAAC;IAEnD,QAAA,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBACnB,IAAM,aAAa,GAAG,oBAAoB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBACzD,IAAM,UAAU,GAAc,EAAE,CAAC;IAEjC,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC7C,gBAAA,IAAM,gBAAgB,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;IAE1C,gBAAA,IAAI,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACzD,oBAAA,IAAM,YAAY,GAAG,aAAa,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;IAC1F,oBAAA,IAAI,YAAY,EAAE;4BAChB,gBAAgB,CAAC,GAAG,EAAE,CAAC;IACxB,qBAAA;IACD,oBAAA,IAAM,iBAAiB,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC,EAAE,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;wBACjF,IAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;IAEjE,oBAAA,UAAU,CAAC,IAAI,CACb,IAAI,wBAAwB,CAC1B,WAAW,EACX,YAAY,EACZ,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CACjC,CACF,CAAC;wBACF,SAAS;IACV,iBAAA;oBAED,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAC9D,aAAA;IAED,YAAA,OAAO,IAAI,iBAAiB,CAAC,UAAU,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClE,SAAA;;IAGD,QAAA,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACzD,YAAA,IAAM,cAAc,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;IACxE,YAAA,IAAI,cAAc,EAAE;;oBAElB,MAAM,CAAC,GAAG,EAAE,CAAC;IACd,aAAA;gBACD,IAAM,MAAI,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAW,CAAC;IAChD,YAAA,IAAM,iBAAiB,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAC7D,IAAM,YAAY,GAAG,WAAW,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;IACzD,YAAA,IAAM,WAAW,GAAG,YAAY,CAAC,GAAG,CAAC,UAAA,IAAI,EAAA,EAAI,OAAA,KAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAA/B,EAA+B,CAAC,CAAC;IAC9E,YAAA,IAAM,IAAI,GAAG,IAAI,gBAAgB,CAAC,MAAI,EAAE,WAAW,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7E,YAAA,IAAI,CAAC,YAAY,GAAG,cAAc,IAAI,SAAS,CAAC;IAChD,YAAA,OAAO,IAAI,CAAC;IACb,SAAA;;YAGD,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACxF,YAAA,IAAM,cAAc,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;gBAC7E,IAAM,KAAK,GAAG,EAA0B,CAAC;IACzC,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC9C,gBAAA,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE;wBAC7B,SAAS;IACV,iBAAA;oBACD,IAAM,QAAQ,GAAG,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IACrD,gBAAA,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;IACzB,oBAAA,IAAM,KAAK,GAAG;4BACZ,IAAI,EAAE,IAAI,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACnC,KAAK,EAAE,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;yBACxB,CAAC;IAExB,oBAAA,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACnB,iBAAA;IAAM,qBAAA,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;wBAChC,IAAI,MAAI,GAAmB,IAAI,CAAC;IAChC,oBAAA,IAAM,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAE7B,oBAAA,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;4BACzB,MAAI,GAAG,IAAI,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IACnC,qBAAA;6BAAM,IACL,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG;IAClC,wBAAA,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EACpD;IACA,wBAAA,MAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IAC1E,qBAAA;IAAM,yBAAA;IACL,wBAAA,MAAM,IAAI,KAAK,CACb,0FAA0F,CAC3F,CAAC;IACH,qBAAA;IAED,oBAAA,IAAM,KAAK,GAAG;IACZ,wBAAA,IAAI,EAAA,MAAA;4BACJ,KAAK,EAAE,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;yBACxB,CAAC;IAExB,oBAAA,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACnB,iBAAA;IAAM,qBAAA;IACL,oBAAA,MAAM,KAAK,CAAC,gBAAgB,CAAC,CAAC;IAC/B,iBAAA;IACF,aAAA;IAED,YAAA,OAAO,IAAI,gBAAgB,CAAC,KAAK,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5D,SAAA;;YAGD,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACxF,YAAA,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC;IAChE,iBAAA,MAAM,CAAC,UAAA,IAAI,EAAA,EAAI,OAAA,IAAI,KAAA,IAAA,IAAJ,IAAI,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAJ,IAAI,CAAE,MAAM,CAAA,EAAA,CAAC;IAC5B,iBAAA,GAAG,CAAC,UAAA,IAAI,EAAA,EAAI,OAAA,KAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAA/B,EAA+B,CAAC,CAAC;IAEhD,YAAA,OAAO,IAAI,eAAe,CAAC,KAAK,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3D,SAAA;IAED,QAAA,MAAM,KAAK,CAAC,kBAAmB,CAAA,MAAA,CAAA,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAI,IAAA,CAAA,CAAC,CAAC;SAC9D,CAAA;QACH,OAAC,MAAA,CAAA;IAAD,CAAC,EAAA,CAAA;;ICzuBD,IAAM,aAAa,GAA6B;QAC9C,IAAI,EAAE,CAAC,IAAI,CAAC;IACZ,IAAA,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;IAEtB,IAAA,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;IACtB,IAAA,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;IACtB,IAAA,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;IACtB,IAAA,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;QAEtB,GAAG,EAAE,CAAC,GAAG,CAAC;QACV,GAAG,EAAE,CAAC,GAAG,CAAC;QACV,GAAG,EAAE,CAAC,IAAI,CAAC;QACX,GAAG,EAAE,CAAC,GAAG,CAAC;QACV,GAAG,EAAE,CAAC,GAAG,CAAC;IAEV,IAAA,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC;IAChB,IAAA,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;QAEtB,GAAG,EAAE,CAAC,GAAG,CAAC;QACV,GAAG,EAAE,CAAC,GAAG,CAAC;QACV,GAAG,EAAE,CAAC,GAAG,CAAC;QACV,GAAG,EAAE,CAAC,GAAG,CAAC;QACV,GAAG,EAAE,CAAC,GAAG,CAAC;QACV,GAAG,EAAE,CAAC,GAAG,CAAC;KACX,CAAC;IAEF,IAAM,WAAW,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IACrC,IAAM,QAAQ,GAAa,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IAElF,IAAA,SAAA,kBAAA,YAAA;IAAA,IAAA,SAAA,SAAA,GAAA;YACU,IAAU,CAAA,UAAA,GAAG,CAAC,CAAC;YACf,IAAY,CAAA,YAAA,GAAG,CAAC,CAAC;YACjB,IAAY,CAAA,YAAA,GAAG,CAAC,CAAC;YACjB,IAAc,CAAA,cAAA,GAAG,CAAC,CAAC;YACnB,IAAU,CAAA,UAAA,GAAG,EAAE,CAAC;YAChB,IAAO,CAAA,OAAA,GAAG,CAAC,CAAC;YACZ,IAAO,CAAA,OAAA,GAAG,EAAE,CAAC;SAyPtB;IAvPC,IAAA,MAAA,CAAA,cAAA,CAAY,SAAS,CAAA,SAAA,EAAA,WAAA,EAAA;IAArB,QAAA,GAAA,EAAA,YAAA;gBACE,OAAO,IAAI,CAAC,UAAU,CAAC;aACxB;IACD,QAAA,GAAA,EAAA,UAAsB,KAAa,EAAA;IACjC,YAAA,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,KAAK,EAAE;IAC7B,gBAAA,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC;IACpC,gBAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC;IACzC,aAAA;IACD,YAAA,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;aACzB;;;IAPA,KAAA,CAAA,CAAA;IASD;;;IAGG;QACH,SAAQ,CAAA,SAAA,CAAA,QAAA,GAAR,UAAS,MAAc,EAAA;IACrB,QAAA,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;IAC7B,YAAA,OAAO,EAAE,CAAC;IACX,SAAA;IAED,QAAA,MAAM,GAAG,MAAM;;IAEZ,aAAA,OAAO,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC;;IAEpC,aAAA,OAAO,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;IACtC,QAAA,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAEtB,QAAA,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;IACjB,QAAA,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;IACpB,QAAA,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;IACtB,QAAA,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;IACtB,QAAA,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;YAExB,IAAM,MAAM,GAAY,EAAE,CAAC;YAE3B,IAAI,KAAK,GAAG,IAAI,CAAC;;YAEjB,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE;gBACpC,IAAI,CAAC,eAAe,EAAE,CAAC;IACvB,YAAA,IAAI,KAAK,EAAE;oBACT,IAAI,CAAC,YAAY,EAAE,CAAC;oBACpB,KAAK,GAAG,KAAK,CAAC;IACf,aAAA;IACD,YAAA,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;IACzB,SAAA;YAED,GAAG;gBACD,IAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAEpC,IAAI,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;IAChD,gBAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;oBAC3D,SAAS;IACV,aAAA;IAAM,iBAAA,IAAI,aAAa,CAAC,MAAM,CAAC,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;;IAEtF,gBAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAC3D,gBAAA,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;IAExB,gBAAA,IAAM,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;IAEtC,gBAAA,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC,EAAE;;IAEvB,oBAAA,OAAO,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,EAAE;4BAClE,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;IAClD,qBAAA;IACF,iBAAA;IACD,gBAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;IACxF,aAAA;qBAAM,IAAI,MAAM,KAAK,GAAG,EAAE;oBACzB,IAAI,OAAK,GAAG,IAAI,CAAC;oBACjB,OAAO,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,KAAK,IAAI,EAAE;wBAC9C,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;;IAGvC,oBAAA,IAAI,OAAK,EAAE;4BACT,OAAK,GAAG,KAAK,CAAC;4BACd,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;IAC3C,qBAAA;wBAED,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,MAAM,CAAC,MAAM;4BAAE,MAAM;IAC9C,iBAAA;IACD,gBAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC;IACtF,aAAA;IAAM,iBAAA,IAAI,MAAM,KAAK,GAAG,IAAI,MAAM,KAAK,GAAG,EAAE;;oBAE3C,IAAM,CAAC,GAAG,MAAM,CAAC;;;IAGjB,gBAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;;oBAG3D,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;IACpE,oBAAA,IAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC;IAChC,oBAAA,IAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;IACpC,oBAAA,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;wBACxB,IAAM,QAAQ,GAAG,IAAI,CAAC;IACtB,oBAAA,OAAO,QAAQ,EAAE;4BACf,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;4BACjD,IACE,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,MAAM,CAAC,MAAM;iCAChC,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC;oCAC7B,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC;oCAC9B,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EACjC;gCACA,MAAM;IACP,yBAAA;IACF,qBAAA;;IAED,oBAAA,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IACxB,oBAAA,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;IAE5B,oBAAA,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IACzB,iBAAA;IAAM,qBAAA;wBACL,OAAO,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,KAAK,CAAC,EAAE;IAC3C,wBAAA,IACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI;IAC7B,4BAAA,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAClD;gCACA,IAAI,CAAC,OAAO,EAAE,CAAC;IAChB,yBAAA;4BAED,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;4BACvC,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,MAAM,CAAC,MAAM,EAAE;gCACrC,MAAM,IAAI,KAAK,CAAC,OAAA,CAAA,MAAA,CAAQ,IAAI,CAAC,UAAU,EAA0B,0BAAA,CAAA,CAAC,CAAC;IACpE,yBAAA;IACF,qBAAA;;wBAGD,IAAI,CAAC,YAAY,EAAE,CAAC;IACrB,iBAAA;;IAGD,gBAAA,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;IAC/B,oBAAA,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC;IACpC,oBAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC;IACzC,iBAAA;IACD,gBAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,UAAU,CAAC,aAAa,CAAC,CAAC;IAC5F,aAAA;qBAAM,IAAI,MAAM,IAAI,GAAG,EAAE;IACxB,gBAAA,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC;IAC1B,aAAA;aACF,QAAQ,IAAI,CAAC,eAAe,EAAE,GAAG,MAAM,CAAC,MAAM,EAAE;YAEjD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAE1C,QAAA,OAAO,MAAM,CAAC;SACf,CAAA;QAEO,SAAe,CAAA,SAAA,CAAA,eAAA,GAAvB,UAAwB,KAAS,EAAA;IAAT,QAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,EAAA,KAAS,GAAA,CAAA,CAAA,EAAA;YAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;gBAC9B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;gBAChC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE;oBACvC,IAAI,CAAC,YAAY,EAAE,CAAC;IACpB,gBAAA,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;IACzB,aAAA;IAAM,iBAAA;oBACL,IAAI,CAAC,cAAc,EAAE,CAAC;IACvB,aAAA;IACF,SAAA;YAED,OAAO,IAAI,CAAC,OAAO,CAAC;SACrB,CAAA;IAEO,IAAA,SAAA,CAAA,SAAA,CAAA,cAAc,GAAtB,UACE,SAAiB,EACjB,IAA8B,EAAA;IAA9B,QAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,EAAA,IAA8B,GAAA,IAAA,CAAA,EAAA;YAE9B,IAAI,KAAK,GAAqC,SAAS,CAAC;YAExD,IAAI,IAAI,KAAK,IAAI,EAAE;gBACjB,IAAI,SAAS,KAAK,MAAM,EAAE;IACxB,gBAAA,IAAI,GAAG,UAAU,CAAC,WAAW,CAAC;oBAC9B,KAAK,GAAG,IAAI,CAAC;IACd,aAAA;IAAM,iBAAA,IAAI,SAAS,KAAK,MAAM,IAAI,SAAS,KAAK,OAAO,EAAE;IACxD,gBAAA,IAAI,GAAG,UAAU,CAAC,WAAW,CAAC;IAC9B,gBAAA,KAAK,GAAG,SAAS,KAAK,MAAM,CAAC;IAC9B,aAAA;qBAAM,IAAI,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,KAAK,IAAI,EAAE;IACrD,gBAAA,IAAI,GAAG,UAAU,CAAC,aAAa,CAAC;IAChC,gBAAA,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;IAC3C,aAAA;qBAAM,IAAI,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;IAC3C,gBAAA,IAAI,GAAG,UAAU,CAAC,OAAO,CAAC;IAC3B,aAAA;IAAM,iBAAA;IACL,gBAAA,IAAI,GAAG,UAAU,CAAC,UAAU,CAAC;IAC9B,aAAA;IACF,SAAA;YAED,OAAO;IACL,YAAA,KAAK,EAAE,KAAK;IACZ,YAAA,IAAI,EAAE,IAAI;aACX,CAAC;SACH,CAAA;QAEO,SAAY,CAAA,SAAA,CAAA,YAAA,GAApB,UACE,QAAgB,EAChB,MAAe,EACf,gBAAwB,EACxB,IAA8B,EAAA;IAD9B,QAAA,IAAA,gBAAA,KAAA,KAAA,CAAA,EAAA,EAAA,gBAAwB,GAAA,KAAA,CAAA,EAAA;IACxB,QAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,EAAA,IAA8B,GAAA,IAAA,CAAA,EAAA;;IAG9B,QAAA,IAAI,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,gBAAgB,KAAK,QAAQ,KAAK,IAAI;IAAE,YAAA,OAAO,EAAE,CAAC;YAE5E,IAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAClD,MAAM,CAAC,IAAI,CAAC;IACV,YAAA,KAAK,CAAC,KAAK;gBACX,WAAW,CAAC,EAAE,CACZ,KAAK,CAAC,IAAc,EACpB,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,cAAc,CACpB;IACO,SAAA,CAAC,CAAC;IACZ,QAAA,OAAO,EAAE,CAAC;SACX,CAAA;QAEO,SAAiB,CAAA,SAAA,CAAA,iBAAA,GAAzB,UAA0B,KAAsB,EAAA;IAC9C,QAAA,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IAC7B,YAAA,OAAO,KAAK,CAAC;IACd,SAAA;IAED,QAAA,IAAI,CAAC,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IACvC,YAAA,OAAO,IAAI,CAAC;IACb,SAAA;IAED,QAAA,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;;IAGrB,QAAA,KAAK,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1C,IAAM,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC9B,YAAA,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE;;IAEpB,gBAAA,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAAE,oBAAA,OAAO,IAAI,CAAC;IAChE,aAAA;IACF,SAAA;IAED,QAAA,IAAM,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;IAC9B,QAAA,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC;SACjC,CAAA;IAEO,IAAA,SAAA,CAAA,SAAA,CAAA,cAAc,GAAtB,UAAuB,MAAc,EAAE,aAAsB,EAAA;YAC3D,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;;gBAE5C,IAAM,SAAS,GAAG,aAAa,CAAC,MAAM,KAAK,CAAC,GAAG,aAAa,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;gBAC9F,QACE,SAAS,KAAK,IAAI;IAClB,iBAAC,YAAY,CAAC,SAAS,CAAC,KAAK,UAAU,CAAC,QAAQ,IAAI,aAAa,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,EACrF;IACH,SAAA;IAAM,aAAA,IAAI,MAAM,KAAK,GAAG,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI,EAAE;IAC5E,YAAA,OAAO,IAAI,CAAC;IACb,SAAA;IACD,QAAA,OAAO,KAAK,CAAC;SACd,CAAA;QACH,OAAC,SAAA,CAAA;IAAD,CAAC,EAAA,CAAA;;aCnRe,QAAQ,GAAA;IACtB,IAAA,OAAO,WAAW,CAAC,MAAM,EAAE,CAAC;IAC9B,CAAC;AAED,QAAA,WAAA,kBAAA,YAAA;IAAA,IAAA,SAAA,WAAA,GAAA;YACmB,IAAY,CAAA,YAAA,GAAA,QAAA,CAAA,EAAA,EAAiC,aAAa,CAAG,CAAA;YAEtE,IAAqB,CAAA,qBAAA,GAAmC,IAAI,CAAC;SAqQtE;IAhQQ,IAAA,WAAA,CAAA,MAAM,GAAb,YAAA;YACE,OAAO,IAAI,WAAW,EAAE,CAAC;SAC1B,CAAA;IAED,IAAA,MAAA,CAAA,cAAA,CAAI,WAAuB,CAAA,SAAA,EAAA,yBAAA,EAAA;IAA3B,QAAA,GAAA,EAAA,YAAA;gBACE,OAAO,IAAI,CAAC,YAAY,CAAC;aAC1B;;;IAAA,KAAA,CAAA,CAAA;IAED,IAAA,MAAA,CAAA,cAAA,CAAI,WAAoB,CAAA,SAAA,EAAA,sBAAA,EAAA;IAAxB,QAAA,GAAA,EAAA,YAAA;gBACE,OAAO,IAAI,CAAC,qBAAqB,CAAC;aACnC;;;IAAA,KAAA,CAAA,CAAA;IAED,IAAA,WAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;IACE,QAAA,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;SACnC,CAAA;IAED,IAAA,WAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,YAAA;IACE,QAAA,OAAO,aAAa,CAAC,QAAQ,EAAE,CAAC;SACjC,CAAA;QAED,WAAQ,CAAA,SAAA,CAAA,QAAA,GAAR,UAAS,MAAc,EAAA;IACrB,QAAA,IAAM,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;IAClC,QAAA,OAAO,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;SACnC,CAAA;IAED,IAAA,WAAA,CAAA,SAAA,CAAA,KAAK,GAAL,UAAM,MAAc,EAAE,UAAwB,EAAA;IAAxB,QAAA,IAAA,UAAA,KAAA,KAAA,CAAA,EAAA,EAAA,UAAwB,GAAA,WAAA,CAAA,EAAA;IAC5C,QAAA,IAAM,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;IAClC,QAAA,IAAM,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;IAC5B,QAAA,IAAM,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,UAAU,CAAC,CAAC;IACrE,QAAA,OAAO,OAAO,CAAC;SAChB,CAAA;QAED,WAAI,CAAA,SAAA,CAAA,IAAA,GAAJ,UACE,SAA4B,EAC5B,KAAmC,EACnC,iBAAuD,EACvD,UAAwB,EAAA;IAFxB,QAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,EAAA,KAAmC,GAAA,EAAA,CAAA,EAAA;IACnC,QAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,EAAA,EAAA,iBAAuD,GAAA,EAAA,CAAA,EAAA;IACvD,QAAA,IAAA,UAAA,KAAA,KAAA,CAAA,EAAA,EAAA,UAAwB,GAAA,WAAA,CAAA,EAAA;IAExB,QAAA,IAAM,GAAG,GACP,OAAO,SAAS,KAAK,QAAQ;kBACzB,IAAI,CAAC,KAAK,CAAC,SAAmB,EAAE,UAAU,CAAC;kBAC1C,SAAsB,CAAC;IAE9B,QAAA,IAAM,YAAY,GAAG;IACnB,YAAA,UAAU,EAAE,UAAU;IACtB,YAAA,iBAAiB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;IACpC,YAAA,UAAU,EAAE,IAAI,KAAK,CAAC,KAAK,CAAC;aACb,CAAC;IAElB,QAAA,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,uBAAuB,EAAE,YAAA;gBACnD,OAAA,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAA;IAA/C,SAA+C,CAChD,CAAC;IACF,QAAA,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,qBAAqB,EAAE,YAAM,EAAA,OAAA,YAAY,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAlC,EAAkC,CAAC,CAAC;YAC7F,IAAI,CAAC,qBAAqB,GAAG,YAAY,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;IAEhE,QAAA,IAAM,MAAM,GAAG,IAAI,SAAS,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;IAC5D,QAAA,IAAI,CAAC,iBAAiB,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE;IACnD,YAAA,OAAO,MAAM,CAAC;IACf,SAAA;IAAM,aAAA;IACL,YAAA,IAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAE,iBAAiB,CAAC,CAAC,CAAC,GAAG,iBAA2B,CAAA;gBACrG,IAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAE,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;gBACpF,IAAM,IAAI,GAAG,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACnD,YAAA,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE;IAC9B,gBAAA,MAAM,KAAK,CAAC,WAAA,CAAA,MAAA,CAAY,iBAAiB,EAAA,oCAAA,CAAoC,CAAC,CAAC;IAChF,aAAA;gBACD,OAAO,IAAI,CAAI,KAAA,CAAA,KAAA,CAAA,EAAA,UAAU,CAAE,CAAA;IAC5B,SAAA;SACF,CAAA;QAEK,WAAS,CAAA,SAAA,CAAA,SAAA,GAAf,UACE,SAA4B,EAC5B,KAAmC,EACnC,iBAAuD,EACvD,UAAwB,EACxB,cAA4C,EAAA;IAH5C,QAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,EAAA,KAAmC,GAAA,EAAA,CAAA,EAAA;IACnC,QAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,EAAA,EAAA,iBAAuD,GAAA,EAAA,CAAA,EAAA;IACvD,QAAA,IAAA,UAAA,KAAA,KAAA,CAAA,EAAA,EAAA,UAAwB,GAAA,WAAA,CAAA,EAAA;;;;;;;IAGlB,wBAAA,GAAG,GACP,OAAO,SAAS,KAAK,QAAQ;kCACzB,IAAI,CAAC,KAAK,CAAC,SAAmB,EAAE,UAAU,CAAC;kCAC1C,SAAsB,CAAC;IACxB,wBAAA,SAAS,GAAG,IAAI,cAAc,EAAE,CAAC;IACjC,wBAAA,YAAY,GAAG;IACnB,4BAAA,UAAU,EAAE,UAAU;IACtB,4BAAA,iBAAiB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;IACpC,4BAAA,UAAU,EAAE,IAAI,KAAK,CAAC,KAAK,CAAC;6BACb,CAAC;IAElB,wBAAA,IAAI,OAAO,cAAc,KAAK,UAAU,EAAE;gCACxC,cAAc,CAAC,YAAY,CAAC,CAAC;IAC9B,yBAAA;IAED,wBAAA,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,uBAAuB,EAAE,YAAA;gCACnD,OAAA,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAA;IAA/C,yBAA+C,CAChD,CAAC;IACF,wBAAA,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,qBAAqB,EAAE,YAAM,EAAA,OAAA,YAAY,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAlC,EAAkC,CAAC,CAAC;4BAC7F,IAAI,CAAC,qBAAqB,GAAG,YAAY,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;IAEjD,wBAAA,OAAA,CAAA,CAAA,YAAM,SAAS;qCAC3B,sBAAsB,CACrB,UAAO,UAAkB,EAAA,EAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;oDACvB,OAAM,CAAA,CAAA,aAAC,IAAI,CAAC,YAAY;IACtB,kDAAE,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC;sDAC7B,OAAO,CAAC,MAAM,CAAC,gCAAgC,CAAC,EAAC,CAAA;IAFrD,wCAAA,KAAA,CAAA,EAAA,OAAA,CAAA,CAAA,aAAA,SAEqD,CAAA,CAAA;;;qCAAA,CACxD;qCACA,oBAAoB,CAAC,UAAM,UAAU,EAAA,EAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA,EAAA,OAAA,WAAA,CAAA,IAAA,EAAA,UAAA,EAAA,EAAA;;IAAI,oCAAA,KAAA,CAAA,EAAA,OAAA,CAAA,CAAA,YAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAA,CAAA;IAAnC,oCAAA,KAAA,CAAA,EAAA,OAAA,CAAA,CAAA,aAAA,SAAmC,CAAA,CAAA;;yCAAA,CAAC;IAC7E,iCAAA,2BAA2B,CAAC,UAAC,UAAU,EAAE,GAAa,EAAA;;oCAErD,IAAM,UAAU,GAAG,KAAI,CAAC,mBAAmB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACxD,gCAAA,IAAM,aAAa,GAAG;IACpB,oCAAA,UAAU,EAAA,UAAA;IACV,oCAAA,UAAU,EAAE,IAAI,KAAK,CAAC,UAAU,CAAC;wCACjC,iBAAiB,EAAE,YAAY,CAAC,iBAAiB;qCAClD,CAAC;IACF,gCAAA,aAAa,CAAC,UAAU,CAAC,GAAG,CAAC,uBAAuB,EAAE,YAAA;wCACpD,OAAA,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAA;IAAhD,iCAAgD,CACjD,CAAC;IACF,gCAAA,aAAa,CAAC,UAAU,CAAC,GAAG,CAAC,qBAAqB,EAAE,YAAA;IAClD,oCAAA,OAAA,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAA;IAAnC,iCAAmC,CACpC,CAAC;IACF,gCAAA,OAAO,aAAa,CAAC;IACvB,6BAAC,CAAC;IACD,iCAAA,cAAc,CAAC,GAAG,EAAE,YAAY,CAAC,CAAA,CAAA;;IAxB9B,wBAAA,MAAM,GAAG,EAwBqB,CAAA,IAAA,EAAA,CAAA;kCAEhC,CAAC,iBAAiB,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAA,EAA/C,OAA+C,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA;IACjD,wBAAA,OAAA,CAAA,CAAA,aAAO,MAAM,CAAC,CAAA;;IAER,wBAAA,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAE,iBAAiB,CAAC,CAAC,CAAC,GAAG,iBAA2B,CAAA;4BAC/F,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAE,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;4BAE9E,IAAI,GAAG,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACnD,wBAAA,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE;IAC9B,4BAAA,MAAM,KAAK,CAAC,WAAA,CAAA,MAAA,CAAY,iBAAiB,EAAA,oCAAA,CAAoC,CAAC,CAAC;IAChF,yBAAA;4BACM,OAAM,CAAA,CAAA,YAAA,IAAI,CAAI,KAAA,CAAA,KAAA,CAAA,EAAA,UAAU,CAAC,CAAA,CAAA;IAAhC,oBAAA,KAAA,CAAA,EAAA,OAAA,CAAA,CAAA,aAAO,SAAyB,CAAC,CAAA;;;;IAEpC,KAAA,CAAA;IAED;;IAEG;QACG,WAAQ,CAAA,SAAA,CAAA,QAAA,GAAd,UACE,MAAc,EACd,OAAqC,EACrC,iBAAuD,EACvD,UAAwB,EACxB,cAA4C,EAAA;IAH5C,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAqC,GAAA,EAAA,CAAA,EAAA;IACrC,QAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,EAAA,EAAA,iBAAuD,GAAA,EAAA,CAAA,EAAA;IACvD,QAAA,IAAA,UAAA,KAAA,KAAA,CAAA,EAAA,EAAA,UAAwB,GAAA,WAAA,CAAA,EAAA;;;;;;IAGxB,wBAAA,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;IAC7B,4BAAA,OAAA,CAAA,CAAA,aAAO,IAAI,CAAC,CAAA;IACb,yBAAA;4BACK,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IAE3C,wBAAA,OAAO,GAAG,OAAO,IAAI,OAAO,OAAO,KAAK,QAAQ,GAAG,OAAO,GAAG,EAAE,CAAC;4BAChE,OAAO,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;4BAE3C,WAAW,GAAG,sBACf,IAAI,CAAC,YAAY,CACjB,EAAA,OAAO,CACgB,CAAC;IAEtB,wBAAA,OAAA,CAAA,CAAA,YAAM,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,WAAW,EAAE,iBAAiB,EAAE,UAAU,EAAE,cAAc,CAAC,CAAA,CAAA;IAA5F,oBAAA,KAAA,CAAA,EAAA,OAAA,CAAA,CAAA,aAAO,SAAqF,CAAC,CAAA;;;;IAC9F,KAAA,CAAA;QAED,WAAsB,CAAA,SAAA,CAAA,sBAAA,GAAtB,UAAuB,MAAqB,EAAA;IAC1C,QAAA,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;IAChC,YAAA,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;IAC7B,SAAA;IAAM,aAAA;IACL,YAAA,MAAM,KAAK,CAAC,gBAAgB,CAAC,CAAC;IAC/B,SAAA;IACD,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;QAED,WAAoB,CAAA,SAAA,CAAA,oBAAA,GAApB,UAAqB,MAAoB,EAAA;IACvC,QAAA,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;IAChC,YAAA,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;IAC5B,SAAA;IAAM,aAAA;IACL,YAAA,MAAM,KAAK,CAAC,mCAAmC,CAAC,CAAC;IAClD,SAAA;IAED,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED,IAAA,WAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UACE,QAAgB,EAChB,EAA6D,EAAA;IAE7D,QAAA,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;IACjC,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;QAED,WAAmB,CAAA,SAAA,CAAA,mBAAA,GAAnB,UAAoB,GAA4B,EAAA;YAC9C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;IACtC,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED,IAAA,WAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,OAAY,EAAE,QAAgB,EAAA;IAA9B,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAY,GAAA,EAAA,CAAA,EAAA;YACtB,OAAO,OAAO,CAAC,OAAO,CAAC,MAAA,CAAA,MAAA,CAAO,QAAQ,CAAE,CAAC,GAAG,CAAC,CAAC,CAAC;SAChD,CAAA;IAED,IAAA,WAAA,CAAA,SAAA,CAAA,mBAAmB,GAAnB,UACE,GAAa,EACb,OAAgC,EAAA;YAEhC,IAAM,aAAa,GAAG,UAAC,EAAc,EAAA;;gBACnC,OAAO;IACL,gBAAA,IAAI,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI;IACpB,gBAAA,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK;IACnB,gBAAA,UAAU,EAAE,CAAA,EAAA,GAAA,EAAE,CAAC,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,GAAG,CAAC,UAAA,CAAC,EAAI,EAAA,QAAC,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,KAAK,EAAE,EAAC,EAAA,CAAC;iBAC7C,CAAC;IACvB,SAAC,CAAC;YAEF,IAAM,WAAW,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,QAAQ,CAAnB,EAAmB,CAAiB,CAAC;YAE9E,IAAM,QAAQ,GAAG,WAAW;IACzB,aAAA,MAAM,CAAC,UAAA,EAAE,EAAI,EAAA,OAAA,aAAa,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,WAAW,CAAA,EAAA,CAAC;IAC3D,aAAA,GAAG,CAAC,UAAA,EAAE,EAAA,EAAI,OAAA,aAAa,CAAC,EAAE,CAAC,CAAA,EAAA,CAAC,CAAC;IAEhC,QAAA,IAAI,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,aAAa,EAAE;gBACzC,IAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;IACjD,YAAA,OAAO,GAAQ,QAAA,CAAA,QAAA,CAAA,EAAA,EAAA,OAAO,CAAK,EAAA,SAAS,CAAE,CAAC;IACxC,SAAA;IAED,QAAA,OAAO,OAAkC,CAAC;SAC3C,CAAA;QAEa,WAAY,CAAA,SAAA,CAAA,YAAA,GAA1B,UAA2B,UAAkB,EAAA;;;;;;IAC3C,wBAAA,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;IACtB,4BAAA,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;IACpD,yBAAA;IAEe,wBAAA,OAAA,CAAA,CAAA,YAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAA,CAAA;;IAA7C,wBAAA,OAAO,GAAG,EAAmC,CAAA,IAAA,EAAA,CAAA;4BACnD,OAAO,CAAA,CAAA,aAAA,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,CAAA;;;;IACxC,KAAA,CAAA;QAEO,WAAe,CAAA,SAAA,CAAA,eAAA,GAAvB,UAAwB,QAA2B,EAAA;YAAnD,IAqBC,KAAA,GAAA,IAAA,CAAA;IApBC,QAAA,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;IACvB,YAAA,MAAM,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAC7C,SAAA;YACD,IAAM,SAAS,GAA4B,EAAE,CAAC;IAC9C,QAAA,QAAQ,CAAC,OAAO,CAAC,UAAC,EAAyC,EAAA;IAAvC,YAAA,IAAA,IAAI,UAAA,EAAE,EAAE,GAAA,EAAA,CAAA,EAAA,EAAE,UAAU,GAAA,EAAA,CAAA,UAAA,CAAA;IACtC,YAAA,IAAM,GAAG,GAAG,CAAC,KAAI,CAAC,aAAa,IAAI,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;IACnE,YAAA,IAAI,UAAU,KAAV,IAAA,IAAA,UAAU,uBAAV,UAAU,CAAE,MAAM,EAAE;IACtB,gBAAA,UAAU,CAAC,OAAO,CAAC,UAAA,IAAI,EAAA;IACrB,oBAAA,SAAS,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnD,iBAAC,CAAC,CAAC;IACJ,aAAA;IAAM,iBAAA,IAAI,EAAE,EAAE;IACb,gBAAA,SAAS,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;IACrB,aAAA;IAAM,iBAAA;IACL,gBAAA,SAAS,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;IACvB,aAAA;IACD,YAAA,IAAI,EAAE,EAAE;IACN,gBAAA,SAAS,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;IACrB,aAAA;IACH,SAAC,CAAC,CAAC;IACH,QAAA,OAAO,SAAS,CAAC;SAClB,CAAA;QACH,OAAC,WAAA,CAAA;IAAD,CAAC,EAAA;;;;;;;;;"}