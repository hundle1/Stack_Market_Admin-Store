{"version":3,"file":"jspython-interpreter.esm.js","sources":["../src/common/utils.ts","../src/common/operators.ts","../src/common/token-types.ts","../src/common/ast-types.ts","../src/evaluator/scope.ts","../src/evaluator/evaluator.ts","../src/evaluator/evaluatorAsync.ts","../src/initialScope.ts","../src/parser/parser.ts","../src/tokenizer/tokenizer.ts","../src/interpreter.ts"],"sourcesContent":["export function parseDatetimeOrNull(value: string | number | Date): Date | null {\r\n  if (!value) {\r\n    return null;\r\n  }\r\n  if (typeof value === 'number') {\r\n    return new Date(value);\r\n  }\r\n  if (value instanceof Date && !isNaN(value.valueOf())) {\r\n    return value;\r\n  }\r\n  // only string values can be converted to Date\r\n  if (typeof value !== 'string') {\r\n    return null;\r\n  }\r\n\r\n  const strValue = String(value);\r\n  if (!strValue.length) {\r\n    return null;\r\n  }\r\n\r\n  const parseMonth = (mm: string): number => {\r\n    if (!mm || !mm.length) {\r\n      return NaN;\r\n    }\r\n\r\n    const m = parseInt(mm, 10);\r\n    if (!isNaN(m)) {\r\n      return m - 1;\r\n    }\r\n\r\n    // make sure english months are coming through\r\n    if (mm.startsWith('jan')) {\r\n      return 0;\r\n    }\r\n    if (mm.startsWith('feb')) {\r\n      return 1;\r\n    }\r\n    if (mm.startsWith('mar')) {\r\n      return 2;\r\n    }\r\n    if (mm.startsWith('apr')) {\r\n      return 3;\r\n    }\r\n    if (mm.startsWith('may')) {\r\n      return 4;\r\n    }\r\n    if (mm.startsWith('jun')) {\r\n      return 5;\r\n    }\r\n    if (mm.startsWith('jul')) {\r\n      return 6;\r\n    }\r\n    if (mm.startsWith('aug')) {\r\n      return 7;\r\n    }\r\n    if (mm.startsWith('sep')) {\r\n      return 8;\r\n    }\r\n    if (mm.startsWith('oct')) {\r\n      return 9;\r\n    }\r\n    if (mm.startsWith('nov')) {\r\n      return 10;\r\n    }\r\n    if (mm.startsWith('dec')) {\r\n      return 11;\r\n    }\r\n\r\n    return NaN;\r\n  };\r\n\r\n  const correctYear = (yy: number): number => {\r\n    if (yy < 100) {\r\n      return yy < 68 ? yy + 2000 : yy + 1900;\r\n    } else {\r\n      return yy;\r\n    }\r\n  };\r\n\r\n  const validDateOrNull = (\r\n    yyyy: number,\r\n    month: number,\r\n    day: number,\r\n    hours: number,\r\n    mins: number,\r\n    ss: number\r\n  ): Date | null => {\r\n    if (month > 11 || day > 31 || hours >= 60 || mins >= 60 || ss >= 60) {\r\n      return null;\r\n    }\r\n\r\n    const dd = new Date(yyyy, month, day, hours, mins, ss, 0);\r\n    return !isNaN(dd.valueOf()) ? dd : null;\r\n  };\r\n\r\n  const strTokens = strValue\r\n    .replace('T', ' ')\r\n    .toLowerCase()\r\n    .split(/[: /-]/);\r\n  const dt = strTokens.map(parseFloat);\r\n\r\n  // try ISO first\r\n  let d = validDateOrNull(dt[0], dt[1] - 1, dt[2], dt[3] || 0, dt[4] || 0, dt[5] || 0);\r\n  if (d) {\r\n    return d;\r\n  }\r\n\r\n  // then UK\r\n  d = validDateOrNull(\r\n    correctYear(dt[2]),\r\n    parseMonth(strTokens[1]),\r\n    dt[0],\r\n    dt[3] || 0,\r\n    dt[4] || 0,\r\n    dt[5] || 0\r\n  );\r\n  if (d) {\r\n    return d;\r\n  }\r\n\r\n  // then US\r\n  d = validDateOrNull(\r\n    correctYear(dt[2]),\r\n    parseMonth(strTokens[0]),\r\n    correctYear(dt[1]),\r\n    dt[3] || 0,\r\n    dt[4] || 0,\r\n    dt[5] || 0\r\n  );\r\n  if (d) {\r\n    return d;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport function getImportType(name: string): 'jspyModule' | 'jsPackage' | 'json' {\r\n  if (name.startsWith('/') || name.startsWith('./')) {\r\n    return name.endsWith('.json') ? 'json' : 'jspyModule';\r\n  }\r\n\r\n  return 'jsPackage';\r\n}\r\n\r\nfunction jspyErrorMessage(\r\n  error: string,\r\n  module: string,\r\n  line: number,\r\n  column: number,\r\n  message: string\r\n): string {\r\n  return `${error}: ${module}(${line},${column}): ${message}`;\r\n}\r\n\r\nexport class JspyTokenizerError extends Error {\r\n  constructor(\r\n    public module: string,\r\n    public line: number,\r\n    public column: number,\r\n    public message: string\r\n  ) {\r\n    super();\r\n    this.message = jspyErrorMessage('JspyTokenizerError', module, line, column, message);\r\n    Object.setPrototypeOf(this, JspyTokenizerError.prototype);\r\n  }\r\n}\r\n\r\nexport class JspyParserError extends Error {\r\n  constructor(\r\n    public module: string,\r\n    public line: number,\r\n    public column: number,\r\n    public message: string\r\n  ) {\r\n    super();\r\n    this.message = jspyErrorMessage('JspyParserError', module, line, column, message);\r\n    Object.setPrototypeOf(this, JspyParserError.prototype);\r\n  }\r\n}\r\n\r\nexport class JspyEvalError extends Error {\r\n  constructor(\r\n    public module: string,\r\n    public line: number,\r\n    public column: number,\r\n    public message: string\r\n  ) {\r\n    super();\r\n    this.message = jspyErrorMessage('JspyEvalError', module, line, column, message);\r\n    Object.setPrototypeOf(this, JspyEvalError.prototype);\r\n  }\r\n}\r\n\r\nexport class JspyError extends Error {\r\n  constructor(\r\n    public module: string,\r\n    public line: number,\r\n    public column: number,\r\n    public name: string,\r\n    public message: string\r\n  ) {\r\n    super();\r\n    this.message = jspyErrorMessage('JspyError', module || 'name.jspy', line, column, message);\r\n    Object.setPrototypeOf(this, JspyError.prototype);\r\n  }\r\n}\r\n","export enum OperationTypes {\r\n  Arithmetic,\r\n  Assignment,\r\n  Comparison,\r\n  Logical,\r\n  Membership\r\n}\r\n\r\nexport type AssignmentOperators = '=' | '+=' | '-=' | '*=' | '/=' | '++' | '--';\r\nexport type ArithmeticOperators = '+' | '-' | '*' | '/' | '%' | '**' | '//';\r\nexport type ComparisonOperators = '>' | '>=' | '==' | '!=' | '<>' | '<' | '<=';\r\nexport type LogicalOperators = 'and' | 'or'; // | \"not\" | \"not in\";\r\nexport type MembershipOperators = 'in';\r\n\r\nexport type Operators =\r\n  | AssignmentOperators\r\n  | ArithmeticOperators\r\n  | ComparisonOperators\r\n  | LogicalOperators\r\n  | MembershipOperators;\r\n\r\nexport const OperatorsMap: Map<Operators, OperationTypes> = new Map<Operators, OperationTypes>([\r\n  ['+', OperationTypes.Arithmetic],\r\n  ['-', OperationTypes.Arithmetic],\r\n  ['*', OperationTypes.Arithmetic],\r\n  ['/', OperationTypes.Arithmetic],\r\n  ['%', OperationTypes.Arithmetic],\r\n  ['**', OperationTypes.Arithmetic],\r\n  ['//', OperationTypes.Arithmetic],\r\n\r\n  ['>', OperationTypes.Comparison],\r\n  ['>=', OperationTypes.Comparison],\r\n  ['==', OperationTypes.Comparison],\r\n  ['!=', OperationTypes.Comparison],\r\n  ['<>', OperationTypes.Comparison],\r\n  ['<', OperationTypes.Comparison],\r\n  ['<=', OperationTypes.Comparison],\r\n\r\n  ['and', OperationTypes.Logical],\r\n  ['or', OperationTypes.Logical],\r\n  // \"not\", OperationTypes.Logical],\r\n  // \"not in\", OperationTypes.Logical],\r\n\r\n  ['in', OperationTypes.Membership],\r\n\r\n  ['=', OperationTypes.Assignment],\r\n  ['+=', OperationTypes.Assignment],\r\n  ['-=', OperationTypes.Assignment],\r\n  ['*=', OperationTypes.Assignment],\r\n  ['/=', OperationTypes.Assignment],\r\n  ['++', OperationTypes.Assignment],\r\n  ['--', OperationTypes.Assignment]\r\n]);\r\n\r\nexport type Primitive = string | number | boolean | null;\r\n\r\nexport type ExpressionOperators =\r\n  | ArithmeticOperators\r\n  | ComparisonOperators\r\n  | LogicalOperators\r\n  | MembershipOperators;\r\ntype ExpressionOperation = (l: Primitive, r: Primitive) => Primitive;\r\n\r\nexport const OperationFuncs: Map<ExpressionOperators, ExpressionOperation> = new Map<\r\n  ExpressionOperators,\r\n  ExpressionOperation\r\n>([\r\n  ['+' as ExpressionOperators, ((l, r) => arithmeticOperation(l, r, '+')) as ExpressionOperation],\r\n  ['-' as ExpressionOperators, ((l, r) => arithmeticOperation(l, r, '-')) as ExpressionOperation],\r\n  ['/' as ExpressionOperators, ((l, r) => arithmeticOperation(l, r, '/')) as ExpressionOperation],\r\n  ['*' as ExpressionOperators, ((l, r) => arithmeticOperation(l, r, '*')) as ExpressionOperation],\r\n  ['%' as ExpressionOperators, ((l, r) => arithmeticOperation(l, r, '%')) as ExpressionOperation],\r\n  ['**' as ExpressionOperators, ((l, r) => arithmeticOperation(l, r, '**')) as ExpressionOperation],\r\n  ['//' as ExpressionOperators, ((l, r) => arithmeticOperation(l, r, '//')) as ExpressionOperation],\r\n\r\n  ['>' as ExpressionOperators, ((l, r) => comparissonOperation(l, r, '>')) as ExpressionOperation],\r\n  [\r\n    '>=' as ExpressionOperators,\r\n    ((l, r) => comparissonOperation(l, r, '>=')) as ExpressionOperation\r\n  ],\r\n  ['<' as ExpressionOperators, ((l, r) => comparissonOperation(l, r, '<')) as ExpressionOperation],\r\n  [\r\n    '<=' as ExpressionOperators,\r\n    ((l, r) => comparissonOperation(l, r, '<=')) as ExpressionOperation\r\n  ],\r\n  [\r\n    '==' as ExpressionOperators,\r\n    ((l, r) => comparissonOperation(l, r, '==')) as ExpressionOperation\r\n  ],\r\n  [\r\n    '!=' as ExpressionOperators,\r\n    ((l, r) => comparissonOperation(l, r, '!=')) as ExpressionOperation\r\n  ],\r\n  [\r\n    '<>' as ExpressionOperators,\r\n    ((l, r) => comparissonOperation(l, r, '<>')) as ExpressionOperation\r\n  ],\r\n\r\n  ['and' as ExpressionOperators, ((l, r) => logicalOperation(l, r, 'and')) as ExpressionOperation],\r\n  ['or' as ExpressionOperators, ((l, r) => logicalOperation(l, r, 'or')) as ExpressionOperation],\r\n  // \"not\" as ExpressionOperators, ((l, r) => logicalOperation(l, r, \"not\")) as ExpressionOperation],\r\n  // \"not in\" as ExpressionOperators, ((l, r) => logicalOperation(l, r, \"not in\")) as ExpressionOperation],\r\n\r\n  ['in' as ExpressionOperators, ((l, r) => membershipOperation(l, r, 'in')) as ExpressionOperation]\r\n]);\r\n\r\nfunction membershipOperation(l: Primitive, r: Primitive, op: MembershipOperators): Primitive {\r\n  if (typeof l === 'string') {\r\n    return (l as string).includes(String(r));\r\n  }\r\n\r\n  if (Array.isArray(l)) {\r\n    return (l as unknown[]).includes(r);\r\n  }\r\n\r\n  throw new Error(`Unknown operation '${op}'`);\r\n}\r\n\r\nfunction logicalOperation(l: Primitive, r: Primitive, op: LogicalOperators): Primitive {\r\n  switch (op) {\r\n    case 'and':\r\n      return l && r;\r\n\r\n    case 'or':\r\n      return l || r;\r\n  }\r\n  throw new Error(`Unknown operation '${op}'`);\r\n}\r\n\r\nfunction comparissonOperation(l: Primitive, r: Primitive, op: ComparisonOperators): Primitive {\r\n  switch (op) {\r\n    case '==':\r\n      return l === r;\r\n\r\n    case '!=':\r\n      return l !== r;\r\n\r\n    case '<>':\r\n      return l !== r;\r\n\r\n    case '>':\r\n      return (l as number) > (r as number);\r\n\r\n    case '<':\r\n      return (l as number) < (r as number);\r\n\r\n    case '>=':\r\n      return (l as number) >= (r as number);\r\n\r\n    case '<=':\r\n      return (l as number) <= (r as number);\r\n  }\r\n\r\n  throw new Error(`Unknown operation '${op}'`);\r\n}\r\n\r\nfunction arithmeticOperation(l: Primitive, r: Primitive, op: ArithmeticOperators): Primitive {\r\n  switch (op) {\r\n    case '+':\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return (l as any) + (r as any);\r\n\r\n    case '-':\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return (l as any) - (r as any);\r\n\r\n    case '*':\r\n      return (l as number) * (r as number);\r\n\r\n    case '/':\r\n      return (l as number) / (r as number);\r\n\r\n    case '%':\r\n      return (l as number) % (r as number);\r\n\r\n    case '**':\r\n      return Math.pow(l as number, r as number);\r\n  }\r\n\r\n  throw new Error(`Unknown operation '${op}'`);\r\n}\r\n","import { OperationTypes, Operators, OperatorsMap } from './operators';\r\n\r\nexport enum TokenTypes {\r\n  Identifier = 0,\r\n  Keyword = 1,\r\n  Separator = 2,\r\n  Operator = 3,\r\n  LiteralNumber = 4,\r\n  LiteralBool = 5,\r\n  LiteralString = 6,\r\n  LiteralNull = 7,\r\n  Comment = 8\r\n}\r\n/**\r\n * Token represent a single considered token in a script. Is represented as an array, where element at:\r\n *  0 : value\r\n *  1 : token details. For a memory and performance reasons we use Uint16Array with 5 elements in it:\r\n *    [\r\n *      0 - tokenType number equivalent of @TokenTypes\r\n *      1 - beginLine\r\n *      2 - beginColumn\r\n *      3 - endLine\r\n *      4 - endColumn\r\n *    ]\r\n * [(value). Uint16Array[5]([tokenType, beginLine, beginColumn, endLine, endColumn])]\r\n * tokenType\r\n */\r\nexport type Token = [string | number | boolean | null, Uint16Array];\r\nexport type TokenValue = string | number | boolean | null;\r\n\r\nexport function isTokenTypeLiteral(tokenType: TokenTypes): boolean {\r\n  return (\r\n    tokenType === TokenTypes.LiteralString ||\r\n    tokenType === TokenTypes.LiteralNumber ||\r\n    tokenType === TokenTypes.LiteralBool ||\r\n    tokenType === TokenTypes.LiteralNull\r\n  );\r\n}\r\n\r\nexport function getTokenType(token: Token): TokenTypes {\r\n  return token[1][0] as TokenTypes;\r\n}\r\n\r\nexport function getTokenValue(token: Token | null): TokenValue {\r\n  return token ? token[0] : null;\r\n}\r\n\r\nexport function getTokenLoc(token: Token): Uint16Array {\r\n  return token[1].subarray(1);\r\n}\r\n\r\nexport function getStartLine(token: Token): number {\r\n  return token[1][1];\r\n}\r\n\r\nexport function getStartColumn(token: Token): number {\r\n  return token[1][2];\r\n}\r\n\r\nexport function getEndLine(token: Token): number {\r\n  return token[1][3];\r\n}\r\n\r\nexport function getEndColumn(token: Token): number {\r\n  return token[1][4];\r\n}\r\n\r\nexport function splitTokensByIndexes(tokens: Token[], sepIndexes: number[]): Token[][] {\r\n  const result: Token[][] = [];\r\n\r\n  if (!tokens.length) {\r\n    return [];\r\n  }\r\n\r\n  let start = 0;\r\n  for (let i = 0; i < sepIndexes.length; i++) {\r\n    const ind = sepIndexes[i];\r\n    if (getTokenValue(tokens[start - 1]) === '[') {\r\n      start = start - 1;\r\n    }\r\n    result.push(tokens.slice(start, ind));\r\n    start = ind + 1;\r\n  }\r\n\r\n  if (getTokenValue(tokens[start - 1]) === '[') {\r\n    start = start - 1;\r\n  }\r\n  result.push(tokens.slice(start, tokens.length));\r\n  return result;\r\n}\r\n\r\nexport function splitTokens(tokens: Token[], separator: string): Token[][] {\r\n  if (!tokens.length) {\r\n    return [];\r\n  }\r\n  const sepIndexes = findTokenValueIndexes(tokens, value => value === separator);\r\n  return splitTokensByIndexes(tokens, sepIndexes);\r\n}\r\n\r\nexport function findTokenValueIndex(\r\n  tokens: Token[],\r\n  predicate: (value: TokenValue) => boolean,\r\n  start = 0\r\n): number {\r\n  for (let i = start; i < tokens.length; i++) {\r\n    if (getTokenType(tokens[i]) === TokenTypes.LiteralString) {\r\n      continue;\r\n    }\r\n\r\n    if (getTokenValue(tokens[i]) === '(') {\r\n      i = skipInnerBrackets(tokens, i, '(', ')');\r\n    } else if (getTokenValue(tokens[i]) === '[') {\r\n      i = skipInnerBrackets(tokens, i, '[', ']');\r\n    } else if (getTokenValue(tokens[i]) === '{') {\r\n      i = skipInnerBrackets(tokens, i, '{', '}');\r\n    } else if (predicate(getTokenValue(tokens[i]))) {\r\n      return i;\r\n    }\r\n  }\r\n\r\n  return -1;\r\n}\r\n\r\nexport function findChainingCallTokensIndexes(tokens: Token[]): number[] {\r\n  const opIndexes: number[] = [];\r\n\r\n  for (let i = 0; i < tokens.length; i++) {\r\n    const tValue = getTokenValue(tokens[i]);\r\n    const tType = getTokenType(tokens[i]);\r\n\r\n    if (tType === TokenTypes.LiteralString) {\r\n      continue;\r\n    }\r\n\r\n    if (tValue === '.') {\r\n      opIndexes.push(i);\r\n    } else if (tValue === '(') {\r\n      i = skipInnerBrackets(tokens, i, '(', ')');\r\n    } else if (tValue === '[' && i === 0) {\r\n      i = skipInnerBrackets(tokens, i, '[', ']');\r\n    } else if (tValue === '[' && i !== 0) {\r\n      opIndexes.push(i);\r\n      i = skipInnerBrackets(tokens, i, '[', ']');\r\n    } else if (tValue === '{') {\r\n      i = skipInnerBrackets(tokens, i, '{', '}');\r\n    }\r\n  }\r\n\r\n  return opIndexes;\r\n}\r\n\r\nexport function findTokenValueIndexes(\r\n  tokens: Token[],\r\n  predicate: (value: TokenValue) => boolean\r\n): number[] {\r\n  const opIndexes: number[] = [];\r\n\r\n  for (let i = 0; i < tokens.length; i++) {\r\n    const tValue = getTokenValue(tokens[i]);\r\n    const tType = getTokenType(tokens[i]);\r\n\r\n    if (tType === TokenTypes.LiteralString) {\r\n      continue;\r\n    }\r\n\r\n    if (tValue === '(') {\r\n      i = skipInnerBrackets(tokens, i, '(', ')');\r\n    } else if (tValue === '[') {\r\n      i = skipInnerBrackets(tokens, i, '[', ']');\r\n    } else if (tValue === '{') {\r\n      i = skipInnerBrackets(tokens, i, '{', '}');\r\n    } else if (predicate(tValue)) {\r\n      opIndexes.push(i);\r\n    }\r\n  }\r\n\r\n  return opIndexes;\r\n}\r\n\r\nexport function findOperators(\r\n  tokens: Token[],\r\n  operationType: OperationTypes | null = null\r\n): number[] {\r\n  return !operationType\r\n    ? findTokenValueIndexes(tokens, value => OperatorsMap.has(value as Operators))\r\n    : findTokenValueIndexes(\r\n        tokens,\r\n        value => OperatorsMap.get(value as Operators) === operationType\r\n      );\r\n}\r\n\r\nfunction skipInnerBrackets(\r\n  tokens: Token[],\r\n  i: number,\r\n  openChar: string,\r\n  closeChar: string\r\n): number {\r\n  let innerBrackets = 0;\r\n  while (getTokenValue(tokens[++i]) !== closeChar || innerBrackets !== 0) {\r\n    if (i + 1 >= tokens.length) {\r\n      throw new Error(`Closing '${closeChar}' is missing`);\r\n    }\r\n\r\n    const tokenValue = getTokenValue(tokens[i]);\r\n    if (tokenValue === openChar) {\r\n      innerBrackets++;\r\n    }\r\n    if (tokenValue === closeChar) {\r\n      innerBrackets--;\r\n    }\r\n  }\r\n  return i;\r\n}\r\n","import { ExpressionOperators, LogicalOperators } from './operators';\r\nimport { getTokenLoc, getTokenValue, Token } from './token-types';\r\n\r\nexport type AstNodeType =\r\n  | 'assign'\r\n  | 'binOp'\r\n  | 'const'\r\n  | 'logicalOp'\r\n  | 'getSingleVar'\r\n  | 'setSingleVar'\r\n  | 'chainingCalls'\r\n  | 'chainingObjectAccess'\r\n  | 'funcCall'\r\n  | 'funcDef'\r\n  | 'arrowFuncDef'\r\n  | 'createObject'\r\n  | 'createArray'\r\n  | 'if'\r\n  | 'elif'\r\n  | 'for'\r\n  | 'while'\r\n  | 'tryExcept'\r\n  | 'raise'\r\n  | 'import'\r\n  | 'comment'\r\n  | 'return'\r\n  | 'continue'\r\n  | 'break';\r\n\r\nexport interface NameAlias {\r\n  name: string;\r\n  alias: string | undefined;\r\n}\r\n\r\nexport interface ExceptBody {\r\n  error: NameAlias;\r\n  body: AstNode[];\r\n}\r\n\r\nexport interface FuncDefNode {\r\n  params: string[];\r\n  funcAst: AstBlock;\r\n}\r\n\r\nexport interface IsNullCoelsing {\r\n  nullCoelsing: boolean | undefined;\r\n}\r\n\r\nexport interface ObjectPropertyInfo {\r\n  name: AstNode;\r\n  value: AstNode;\r\n}\r\n\r\nexport abstract class AstNode {\r\n  loc: Uint16Array | undefined = undefined;\r\n  constructor(public type: AstNodeType) {}\r\n}\r\n\r\nexport class AssignNode extends AstNode {\r\n  constructor(public target: AstNode, public source: AstNode, public loc: Uint16Array) {\r\n    super('assign');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class ConstNode extends AstNode {\r\n  public value: number | string | boolean | null;\r\n\r\n  constructor(token: Token) {\r\n    super('const');\r\n    this.value = getTokenValue(token);\r\n    this.loc = getTokenLoc(token);\r\n  }\r\n}\r\n\r\nexport class CommentNode extends AstNode {\r\n  constructor(public comment: string, public loc: Uint16Array) {\r\n    super('comment');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class ReturnNode extends AstNode {\r\n  constructor(public returnValue: AstNode | undefined = undefined, public loc: Uint16Array) {\r\n    super('return');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class RaiseNode extends AstNode {\r\n  constructor(public errorName: string, public errorMessageAst: AstNode, public loc: Uint16Array) {\r\n    super('raise');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class ContinueNode extends AstNode {\r\n  constructor() {\r\n    super('continue');\r\n  }\r\n}\r\n\r\nexport class BreakNode extends AstNode {\r\n  constructor() {\r\n    super('break');\r\n  }\r\n}\r\n\r\nexport class SetSingleVarNode extends AstNode {\r\n  public name: string;\r\n  constructor(token: Token) {\r\n    super('setSingleVar');\r\n    this.name = token[0] as string;\r\n    this.loc = getTokenLoc(token);\r\n  }\r\n}\r\n\r\nexport class FunctionCallNode extends AstNode implements IsNullCoelsing {\r\n  public nullCoelsing: boolean | undefined = undefined;\r\n\r\n  constructor(public name: string, public paramNodes: AstNode[] | null, public loc: Uint16Array) {\r\n    super('funcCall');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class FunctionDefNode extends AstNode implements FuncDefNode {\r\n  constructor(\r\n    public funcAst: AstBlock,\r\n    public params: string[],\r\n    public isAsync: boolean,\r\n    public loc: Uint16Array\r\n  ) {\r\n    super('funcDef');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class ArrowFuncDefNode extends AstNode implements FuncDefNode {\r\n  constructor(public funcAst: AstBlock, public params: string[], public loc: Uint16Array) {\r\n    super('arrowFuncDef');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class ElifNode extends AstNode {\r\n  constructor(\r\n    public conditionNode: AstNode,\r\n    public elifBody: AstNode[],\r\n    public loc: Uint16Array\r\n  ) {\r\n    super('elif');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class IfNode extends AstNode {\r\n  constructor(\r\n    public conditionNode: AstNode,\r\n    public ifBody: AstNode[],\r\n    public elifs: ElifNode[] | undefined = undefined,\r\n    public elseBody: AstNode[] | undefined = undefined,\r\n    public loc: Uint16Array,\r\n  ) {\r\n    super('if');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class TryExceptNode extends AstNode {\r\n  constructor(\r\n    public tryBody: AstNode[],\r\n    public exepts: ExceptBody[],\r\n    public elseBody: AstNode[] | undefined,\r\n    public finallyBody: AstNode[] | undefined,\r\n\r\n    public loc: Uint16Array\r\n  ) {\r\n    super('tryExcept');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class ForNode extends AstNode {\r\n  constructor(\r\n    public sourceArray: AstNode,\r\n    public itemVarName: string,\r\n    public body: AstNode[],\r\n    public loc: Uint16Array\r\n  ) {\r\n    super('for');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class WhileNode extends AstNode {\r\n  constructor(public condition: AstNode, public body: AstNode[], public loc: Uint16Array) {\r\n    super('while');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class ImportNode extends AstNode {\r\n  constructor(\r\n    public module: NameAlias,\r\n    public body: AstBlock,\r\n    public parts: NameAlias[] | undefined = undefined,\r\n    public loc: Uint16Array\r\n  ) {\r\n    super('import');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class GetSingleVarNode extends AstNode implements IsNullCoelsing {\r\n  name: string;\r\n  nullCoelsing: boolean | undefined = undefined;\r\n\r\n  constructor(token: Token, nullCoelsing: boolean | undefined = undefined) {\r\n    super('getSingleVar');\r\n    this.name = token[0] as string;\r\n    this.nullCoelsing = nullCoelsing;\r\n    this.loc = getTokenLoc(token);\r\n  }\r\n}\r\n\r\nexport class ChainingCallsNode extends AstNode {\r\n  constructor(public innerNodes: AstNode[], public loc: Uint16Array) {\r\n    super('chainingCalls');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class CreateObjectNode extends AstNode {\r\n  constructor(public props: ObjectPropertyInfo[], public loc: Uint16Array) {\r\n    super('createObject');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class CreateArrayNode extends AstNode {\r\n  constructor(public items: AstNode[], public loc: Uint16Array) {\r\n    super('createArray');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class ChainingObjectAccessNode extends AstNode {\r\n  constructor(\r\n    public indexerBody: AstNode,\r\n    public nullCoelsing: boolean | undefined = undefined,\r\n    public loc: Uint16Array\r\n  ) {\r\n    super('chainingObjectAccess');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport interface LogicalNodeItem {\r\n  node: AstNode;\r\n  op: LogicalOperators | undefined;\r\n}\r\n\r\nexport class LogicalOpNode extends AstNode {\r\n  constructor(public items: LogicalNodeItem[], public loc: Uint16Array) {\r\n    super('logicalOp');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport class BinOpNode extends AstNode {\r\n  constructor(\r\n    public left: AstNode,\r\n    public op: ExpressionOperators,\r\n    public right: AstNode,\r\n    public loc: Uint16Array\r\n  ) {\r\n    super('binOp');\r\n    this.loc = loc;\r\n  }\r\n}\r\n\r\nexport interface AstBlock {\r\n  name: string;\r\n  type: 'module' | 'func' | 'if' | 'for' | 'while' | 'trycatch';\r\n  funcs: FunctionDefNode[];\r\n  body: AstNode[];\r\n}\r\n","export interface CancellationToken {\r\n  cancel?: boolean;\r\n  message?: string;\r\n}\r\n\r\nexport interface BlockContext {\r\n  moduleName: string;\r\n  blockScope: Scope;\r\n  cancellationToken: CancellationToken;\r\n  returnCalled?: boolean;\r\n  breakCalled?: boolean;\r\n  continueCalled?: boolean;\r\n  returnObject?: unknown;\r\n}\r\n\r\nexport function cloneContext(context: BlockContext): BlockContext {\r\n  return {\r\n    moduleName: context.moduleName,\r\n    blockScope: context.blockScope.clone(),\r\n    // this instance should never change. Otherwise cancel won't work\r\n    cancellationToken: context.cancellationToken\r\n  } as BlockContext;\r\n}\r\n\r\nexport class Scope {\r\n  private readonly scope: Record<string, unknown> = {};\r\n\r\n  constructor(initialScope: Record<string, unknown>) {\r\n    this.scope = { ...initialScope };\r\n  }\r\n\r\n  getScope(): Record<string, unknown> {\r\n    return this.scope;\r\n  }\r\n\r\n  clone(): Scope {\r\n    return new Scope(this.scope);\r\n  }\r\n  set(key: string, value: unknown): void {\r\n    this.scope[key] = value;\r\n  }\r\n\r\n  get(key: string): unknown {\r\n    return this.scope[key];\r\n  }\r\n}\r\n","import {\r\n  ArrowFuncDefNode,\r\n  AssignNode,\r\n  AstBlock,\r\n  AstNode,\r\n  BinOpNode,\r\n  ChainingCallsNode,\r\n  ChainingObjectAccessNode,\r\n  ConstNode,\r\n  CreateArrayNode,\r\n  CreateObjectNode,\r\n  ForNode,\r\n  FuncDefNode,\r\n  FunctionCallNode,\r\n  FunctionDefNode,\r\n  GetSingleVarNode,\r\n  IfNode,\r\n  IsNullCoelsing,\r\n  LogicalOpNode,\r\n  OperationFuncs,\r\n  Primitive,\r\n  RaiseNode,\r\n  ReturnNode,\r\n  SetSingleVarNode,\r\n  TryExceptNode,\r\n  WhileNode\r\n} from '../common';\r\nimport { JspyError, JspyEvalError } from '../common/utils';\r\nimport { BlockContext, cloneContext } from './scope';\r\n\r\nexport class Evaluator {\r\n  evalBlock(ast: AstBlock, blockContext: BlockContext): unknown {\r\n    let lastResult = null;\r\n\r\n    for (const node of ast?.funcs || []) {\r\n      const funcDef = node as FunctionDefNode;\r\n\r\n      // a child scope needs to be created here\r\n      const newScope = blockContext.blockScope;\r\n\r\n      newScope.set(funcDef.funcAst.name, (...args: unknown[]): unknown =>\r\n        this.jspyFuncInvoker(funcDef, blockContext, ...args)\r\n      );\r\n    }\r\n\r\n    for (let i = 0; i < ast.body.length; i++) {\r\n      const node = ast.body[i];\r\n      if (blockContext.cancellationToken.cancel) {\r\n        const loc = node.loc || [];\r\n\r\n        if (!blockContext.cancellationToken.message) {\r\n          blockContext.cancellationToken.message = `Cancelled. ${blockContext.moduleName}: ${loc[0]}, ${loc[1]}`;\r\n        }\r\n\r\n        return blockContext.cancellationToken.message;\r\n      }\r\n\r\n      if (node.type === 'comment') {\r\n        continue;\r\n      }\r\n      if (node.type === 'import') {\r\n        // we can't use it here, because loader has to be promise\r\n        throw new Error(`Import is not support with 'eval'. Use method 'evalAsync' instead`);\r\n      }\r\n      try {\r\n        lastResult = this.evalNode(node, blockContext);\r\n\r\n        if (blockContext.returnCalled) {\r\n          const res = blockContext.returnObject;\r\n\r\n          // stop processing return\r\n          if (ast.type == 'func' || ast.type == 'module') {\r\n            blockContext.returnCalled = false;\r\n            blockContext.returnObject = null;\r\n          }\r\n          return res;\r\n        }\r\n\r\n        if (blockContext.continueCalled) {\r\n          break;\r\n        }\r\n        if (blockContext.breakCalled) {\r\n          break;\r\n        }\r\n      } catch (err) {\r\n        const loc = node.loc ? node.loc : [0, 0];\r\n        if (err instanceof JspyError) {\r\n          throw err;\r\n        } else if (err instanceof JspyEvalError) {\r\n          throw err;\r\n        } else {\r\n          throw new JspyEvalError(\r\n            blockContext.moduleName,\r\n            loc[0],\r\n            loc[1],\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            (err as any).message || err\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return lastResult;\r\n  }\r\n\r\n  jspyFuncInvoker(funcDef: FuncDefNode, context: BlockContext, ...args: unknown[]): unknown {\r\n    const ast = Object.assign({}, funcDef.funcAst);\r\n    ast.type = 'func';\r\n\r\n    const blockContext = cloneContext(context);\r\n\r\n    // set parameters into new scope, based incomming arguments\r\n    for (let i = 0; i < funcDef.params?.length || 0; i++) {\r\n      const argValue = args?.length > i ? args[i] : null;\r\n      blockContext.blockScope.set(funcDef.params[i], argValue);\r\n    }\r\n\r\n    return this.evalBlock(ast, blockContext);\r\n  }\r\n\r\n  private invokeFunction(\r\n    func: (...args: unknown[]) => unknown,\r\n    fps: unknown[],\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    loc: { moduleName: string; line: number; column: number }\r\n  ): unknown {\r\n    return func(...fps);\r\n  }\r\n\r\n  private evalNode(node: AstNode, blockContext: BlockContext): unknown {\r\n    if (node.type === 'import') {\r\n      // skip this for now. As modules are implemented externally\r\n      return null;\r\n    }\r\n\r\n    if (node.type === 'comment') {\r\n      return null;\r\n    }\r\n\r\n    if (node.type === 'if') {\r\n      const ifNode = node as IfNode;\r\n      let doElse = true;\r\n      if (this.evalNode(ifNode.conditionNode, blockContext)) {\r\n        this.evalBlock(\r\n          { name: blockContext.moduleName, type: 'if', body: ifNode.ifBody } as AstBlock,\r\n          blockContext\r\n        );\r\n        doElse = false;\r\n      } else if (ifNode.elifs?.length) {\r\n        for (let i = 0; i < ifNode.elifs.length; i++) {\r\n          const elIfNode = ifNode.elifs[i];\r\n\r\n          if (this.evalNode(elIfNode.conditionNode, blockContext)) {\r\n            this.evalBlock(\r\n              { name: blockContext.moduleName, type: 'if', body: elIfNode.elifBody } as AstBlock,\r\n              blockContext\r\n            );\r\n            doElse = false;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (doElse && ifNode.elseBody) {\r\n        this.evalBlock(\r\n          { name: blockContext.moduleName, type: 'if', body: ifNode.elseBody } as AstBlock,\r\n          blockContext\r\n        );\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'raise') {\r\n      const raiseNode = node as RaiseNode;\r\n      const errorMessage = this.evalNode(raiseNode.errorMessageAst, blockContext) as string;\r\n      const err = new JspyError(\r\n        blockContext.moduleName,\r\n        raiseNode.loc[0],\r\n        raiseNode.loc[1],\r\n        raiseNode.errorName,\r\n        errorMessage\r\n      );\r\n      throw err;\r\n    }\r\n\r\n    if (node.type === 'tryExcept') {\r\n      const tryNode = node as TryExceptNode;\r\n      try {\r\n        this.evalBlock(\r\n          { name: blockContext.moduleName, type: 'trycatch', body: tryNode.tryBody } as AstBlock,\r\n          blockContext\r\n        );\r\n\r\n        if (tryNode.elseBody?.length || 0 > 0) {\r\n          this.evalBlock(\r\n            { name: blockContext.moduleName, type: 'trycatch', body: tryNode.elseBody } as AstBlock,\r\n            blockContext\r\n          );\r\n        }\r\n      } catch (err) {\r\n        const name = err instanceof JspyError ? (err as JspyError).name : typeof err;\r\n        const message =\r\n          err instanceof JspyError\r\n            ? (err as JspyError).message\r\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n              (err as any)?.message ?? String(err);\r\n        const moduleName = err instanceof JspyError ? (err as JspyError).module : 0;\r\n        const line = err instanceof JspyError ? (err as JspyError).line : 0;\r\n        const column = err instanceof JspyError ? (err as JspyError).column : 0;\r\n\r\n        const firstExept = tryNode.exepts[0];\r\n        const catchBody = firstExept.body;\r\n        const ctx = blockContext; // cloneContext(blockContext);\r\n        ctx.blockScope.set(firstExept.error?.alias || 'error', {\r\n          name,\r\n          message,\r\n          line,\r\n          column,\r\n          moduleName\r\n        });\r\n        this.evalBlock(\r\n          { name: blockContext.moduleName, type: 'trycatch', body: catchBody } as AstBlock,\r\n          ctx\r\n        );\r\n        ctx.blockScope.set(firstExept.error?.alias || 'error', null);\r\n      } finally {\r\n        if (tryNode.finallyBody?.length || 0 > 0) {\r\n          this.evalBlock(\r\n            {\r\n              name: blockContext.moduleName,\r\n              type: 'trycatch',\r\n              body: tryNode.finallyBody\r\n            } as AstBlock,\r\n            blockContext\r\n          );\r\n        }\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'return') {\r\n      const returnNode = node as ReturnNode;\r\n      blockContext.returnCalled = true;\r\n      blockContext.returnObject = returnNode.returnValue\r\n        ? this.evalNode(returnNode.returnValue, blockContext)\r\n        : null;\r\n\r\n      return blockContext.returnObject;\r\n    }\r\n\r\n    if (node.type === 'continue') {\r\n      blockContext.continueCalled = true;\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'break') {\r\n      blockContext.breakCalled = true;\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'for') {\r\n      const forNode = node as ForNode;\r\n\r\n      const array = this.evalNode(forNode.sourceArray, blockContext) as unknown[] | string;\r\n\r\n      for (let i = 0; i < array.length; i++) {\r\n        const item = array[i];\r\n\r\n        blockContext.blockScope.set(forNode.itemVarName, item);\r\n        this.evalBlock(\r\n          { name: blockContext.moduleName, type: 'for', body: forNode.body } as AstBlock,\r\n          blockContext\r\n        );\r\n        if (blockContext.continueCalled) {\r\n          blockContext.continueCalled = false;\r\n        }\r\n        if (blockContext.breakCalled) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (blockContext.breakCalled) {\r\n        blockContext.breakCalled = false;\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'while') {\r\n      const whileNode = node as WhileNode;\r\n\r\n      while (this.evalNode(whileNode.condition, blockContext)) {\r\n        this.evalBlock(\r\n          { name: blockContext.moduleName, type: 'while', body: whileNode.body } as AstBlock,\r\n          blockContext\r\n        );\r\n\r\n        if (blockContext.continueCalled) {\r\n          blockContext.continueCalled = false;\r\n        }\r\n        if (blockContext.breakCalled) {\r\n          break;\r\n        }\r\n      }\r\n      if (blockContext.breakCalled) {\r\n        blockContext.breakCalled = false;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'const') {\r\n      return (node as ConstNode).value;\r\n    }\r\n\r\n    if (node.type === 'getSingleVar') {\r\n      const name = (node as GetSingleVarNode).name;\r\n\r\n      const value = blockContext.blockScope.get((node as GetSingleVarNode).name);\r\n      if (value === undefined) {\r\n        if (name.charAt(name.length - 1) === ';') {\r\n          throw new Error(`Unexpected ';' in the end.`);\r\n        } else {\r\n          throw new Error(`Variable '${name}' is not defined.`);\r\n        }\r\n      }\r\n      return value;\r\n    }\r\n\r\n    if (node.type === 'binOp') {\r\n      const binOpNode = node as BinOpNode;\r\n      const left = this.evalNode(binOpNode.left, blockContext);\r\n      const right = this.evalNode(binOpNode.right, blockContext);\r\n      const func = OperationFuncs.get(binOpNode.op);\r\n      if (typeof func === 'function') return func(left as Primitive, right as Primitive);\r\n      else throw new Error('Unknown binary oprastion');\r\n    }\r\n\r\n    if (node.type === 'logicalOp') {\r\n      const logicalGroups = node as LogicalOpNode;\r\n      let ind = 0;\r\n      let gResult: unknown = true;\r\n\r\n      while (ind < logicalGroups.items.length) {\r\n        const eg = logicalGroups.items[ind++];\r\n\r\n        gResult = this.evalNode(eg.node, blockContext);\r\n\r\n        if (eg.op === 'and' && !gResult) {\r\n          return false;\r\n        }\r\n        if (eg.op === 'or' && gResult) {\r\n          return gResult;\r\n        }\r\n      }\r\n\r\n      return gResult;\r\n    }\r\n\r\n    if (node.type === 'arrowFuncDef') {\r\n      const arrowFuncDef = node as ArrowFuncDefNode;\r\n\r\n      return (...args: unknown[]): unknown =>\r\n        this.jspyFuncInvoker(arrowFuncDef, blockContext, ...args);\r\n    }\r\n\r\n    if (node.type === 'funcCall') {\r\n      const funcCallNode = node as FunctionCallNode;\r\n      const func = blockContext.blockScope.get(funcCallNode.name) as (\r\n        ...args: unknown[]\r\n      ) => unknown;\r\n      if (typeof func !== 'function') {\r\n        throw Error(`'${funcCallNode.name}' is not a function or not defined.`);\r\n      }\r\n\r\n      const pms = funcCallNode.paramNodes?.map(n => this.evalNode(n, blockContext)) || [];\r\n\r\n      return this.invokeFunction(func, pms, {\r\n        moduleName: blockContext.moduleName,\r\n        line: funcCallNode.loc[0],\r\n        column: funcCallNode.loc[1]\r\n      });\r\n    }\r\n\r\n    if (node.type === 'assign') {\r\n      const assignNode = node as AssignNode;\r\n\r\n      if (assignNode.target.type === 'getSingleVar') {\r\n        const node = assignNode.target as SetSingleVarNode;\r\n        blockContext.blockScope.set(node.name, this.evalNode(assignNode.source, blockContext));\r\n      } else if (assignNode.target.type === 'chainingCalls') {\r\n        const targetNode = assignNode.target as ChainingCallsNode;\r\n\r\n        // create a node for all but last property token\r\n        // potentially it can go to parser\r\n        const targetObjectNode = new ChainingCallsNode(\r\n          targetNode.innerNodes.slice(0, targetNode.innerNodes.length - 1),\r\n          targetNode.loc\r\n        );\r\n        const targetObject = this.evalNode(targetObjectNode, blockContext) as Record<\r\n          string,\r\n          unknown\r\n        >;\r\n\r\n        const lastInnerNode = targetNode.innerNodes[targetNode.innerNodes.length - 1];\r\n\r\n        let lastPropertyName = '';\r\n        if (lastInnerNode.type === 'getSingleVar') {\r\n          lastPropertyName = (lastInnerNode as GetSingleVarNode).name;\r\n        } else if (lastInnerNode.type === 'chainingObjectAccess') {\r\n          lastPropertyName = this.evalNode(\r\n            (lastInnerNode as ChainingObjectAccessNode).indexerBody,\r\n            blockContext\r\n          ) as string;\r\n        } else {\r\n          throw Error('Not implemented Assign operation with chaining calls');\r\n        }\r\n\r\n        targetObject[lastPropertyName] = this.evalNode(assignNode.source, blockContext);\r\n      }\r\n\r\n      return null;\r\n    }\r\n\r\n    if (node.type === 'chainingCalls') {\r\n      return this.resolveChainingCallsNode(node as ChainingCallsNode, blockContext);\r\n    }\r\n\r\n    if (node.type === 'createObject') {\r\n      const createObjectNode = node as CreateObjectNode;\r\n      const obj = {} as Record<string, unknown>;\r\n\r\n      for (const p of createObjectNode.props) {\r\n        obj[this.evalNode(p.name, blockContext) as string] = this.evalNode(p.value, blockContext);\r\n      }\r\n\r\n      return obj;\r\n    }\r\n\r\n    if (node.type === 'createArray') {\r\n      const arrayNode = node as CreateArrayNode;\r\n      const res = [] as unknown[];\r\n\r\n      for (const item of arrayNode.items) {\r\n        res.push(this.evalNode(item, blockContext));\r\n      }\r\n\r\n      return res;\r\n    }\r\n  }\r\n\r\n  private resolveChainingCallsNode(chNode: ChainingCallsNode, blockContext: BlockContext): unknown {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let startObject = this.evalNode(chNode.innerNodes[0], blockContext) as any;\r\n\r\n    for (let i = 1; i < chNode.innerNodes.length; i++) {\r\n      const nestedProp = chNode.innerNodes[i];\r\n\r\n      if ((chNode.innerNodes[i - 1] as unknown as IsNullCoelsing).nullCoelsing && !startObject) {\r\n        startObject = {};\r\n      }\r\n\r\n      if (nestedProp.type === 'getSingleVar') {\r\n        startObject = startObject[(nestedProp as SetSingleVarNode).name] as unknown;\r\n      } else if (nestedProp.type === 'chainingObjectAccess') {\r\n        const node = nestedProp as ChainingObjectAccessNode;\r\n        // startObject = startObject[node.] as unknown;\r\n        startObject = startObject[\r\n          this.evalNode(node.indexerBody, blockContext) as string\r\n        ] as unknown;\r\n      } else if (nestedProp.type === 'funcCall') {\r\n        const funcCallNode = nestedProp as FunctionCallNode;\r\n        const func = startObject[funcCallNode.name] as (...args: unknown[]) => unknown;\r\n\r\n        if (\r\n          (func === undefined || func === null) &&\r\n          (chNode.innerNodes[i - 1] as unknown as IsNullCoelsing).nullCoelsing\r\n        ) {\r\n          startObject = null;\r\n          continue;\r\n        }\r\n\r\n        if (typeof func !== 'function') {\r\n          throw Error(`'${funcCallNode.name}' is not a function or not defined.`);\r\n        }\r\n        const pms = [];\r\n        for (const p of funcCallNode.paramNodes || []) {\r\n          pms.push(this.evalNode(p, blockContext));\r\n        }\r\n\r\n        startObject = this.invokeFunction(func.bind(startObject), pms, {\r\n          moduleName: blockContext.moduleName,\r\n          line: funcCallNode.loc[0],\r\n          column: funcCallNode.loc[0]\r\n        });\r\n      } else {\r\n        throw Error(\"Can't resolve chainingCalls node\");\r\n      }\r\n    }\r\n\r\n    return startObject === undefined ? null : startObject;\r\n  }\r\n}\r\n","import {\r\n  ArrowFuncDefNode,\r\n  AssignNode,\r\n  AstBlock,\r\n  AstNode,\r\n  BinOpNode,\r\n  ChainingCallsNode,\r\n  ChainingObjectAccessNode,\r\n  ConstNode,\r\n  CreateArrayNode,\r\n  CreateObjectNode,\r\n  ForNode,\r\n  FuncDefNode,\r\n  FunctionCallNode,\r\n  FunctionDefNode,\r\n  GetSingleVarNode,\r\n  IfNode,\r\n  ImportNode,\r\n  IsNullCoelsing,\r\n  LogicalOpNode,\r\n  OperationFuncs,\r\n  Primitive,\r\n  RaiseNode,\r\n  ReturnNode,\r\n  SetSingleVarNode,\r\n  TryExceptNode,\r\n  WhileNode\r\n} from '../common';\r\nimport { JspyEvalError, JspyError, getImportType } from '../common/utils';\r\nimport { Evaluator } from './evaluator';\r\nimport { BlockContext, cloneContext } from './scope';\r\n\r\n/**\r\n * This is copy/paste from Evaluator.\r\n * Sadly, we have to copy code around to support both async and non async methods.\r\n * So, any changes to this method, should be replicated in the evaluator.ts\r\n */\r\nexport class EvaluatorAsync {\r\n  private moduleParser: (modulePath: string) => Promise<AstBlock> = () =>\r\n    Promise.reject('Module parser is not registered!');\r\n  private jsonFileLoader: (jsonFilePath: string) => Promise<string> = () => Promise.reject('{}');\r\n  private blockContextFactory?: (modulePath: string, ast: AstBlock) => BlockContext;\r\n\r\n  registerModuleParser(moduleParser: (modulePath: string) => Promise<AstBlock>): EvaluatorAsync {\r\n    this.moduleParser = moduleParser;\r\n    return this;\r\n  }\r\n\r\n  registerJsonFileLoader(jsonFileLoader: (modulePath: string) => Promise<string>): EvaluatorAsync {\r\n    this.jsonFileLoader = jsonFileLoader;\r\n    return this;\r\n  }\r\n\r\n  registerBlockContextFactory(\r\n    blockContextFactory: (modulePath: string, ast: AstBlock) => BlockContext\r\n  ): EvaluatorAsync {\r\n    this.blockContextFactory = blockContextFactory;\r\n    return this;\r\n  }\r\n\r\n  async evalBlockAsync(ast: AstBlock, blockContext: BlockContext): Promise<unknown> {\r\n    let lastResult = null;\r\n\r\n    for (const node of ast?.funcs || []) {\r\n      const funcDef = node as FunctionDefNode;\r\n\r\n      // a child scope needs to be created here\r\n      const newScope = blockContext.blockScope;\r\n\r\n      const invoker = funcDef.isAsync\r\n        ? async (...args: unknown[]): Promise<unknown> =>\r\n            await this.jspyFuncInvokerAsync(funcDef, blockContext, ...args)\r\n        : (...args: unknown[]): unknown =>\r\n            new Evaluator().jspyFuncInvoker(funcDef, blockContext, ...args);\r\n\r\n      newScope.set(funcDef.funcAst.name, invoker);\r\n    }\r\n\r\n    for (let i = 0; i < ast.body.length; i++) {\r\n      const node = ast.body[i];\r\n      if (blockContext.cancellationToken.cancel) {\r\n        const loc = node.loc || [];\r\n\r\n        if (!blockContext.cancellationToken.message) {\r\n          blockContext.cancellationToken.message = `Cancelled. ${blockContext.moduleName}: ${loc[0]}, ${loc[1]}`;\r\n        }\r\n\r\n        return blockContext.cancellationToken.message;\r\n      }\r\n\r\n      if (node.type === 'comment') {\r\n        continue;\r\n      }\r\n      if (node.type === 'import') {\r\n        const importNode = node as ImportNode;\r\n        const iType = getImportType(importNode.module.name);\r\n\r\n        if (iType === 'json') {\r\n          const jsonValue = JSON.parse(await this.jsonFileLoader(importNode.module.name));\r\n          blockContext.blockScope.set(\r\n            importNode.module.alias || this.defaultModuleName(importNode.module.name),\r\n            jsonValue\r\n          );\r\n          continue;\r\n        } else if (iType !== 'jspyModule') {\r\n          // it is not JSPY import. It is JS and should be handled externally\r\n          continue;\r\n        }\r\n\r\n        if (typeof this.blockContextFactory !== 'function') {\r\n          throw new Error('blockContextFactory is not initialized');\r\n        }\r\n\r\n        const moduleAst = await this.moduleParser(importNode.module.name);\r\n        const moduleBlockContext = this.blockContextFactory(importNode.module.name, moduleAst);\r\n        await this.evalBlockAsync(moduleAst, moduleBlockContext);\r\n\r\n        let scope = blockContext.blockScope.getScope();\r\n\r\n        if (!importNode.parts?.length) {\r\n          // if no parts, then we need to assign to a separate object\r\n          scope = {};\r\n          blockContext.blockScope.set(\r\n            importNode.module.alias || this.defaultModuleName(importNode.module.name),\r\n            scope\r\n          );\r\n        }\r\n\r\n        this.assignFunctionsToScope(\r\n          scope,\r\n          moduleBlockContext,\r\n          moduleAst,\r\n          importNode.parts?.map(p => p.name)\r\n        );\r\n        continue;\r\n      }\r\n\r\n      try {\r\n        lastResult = await this.evalNodeAsync(node, blockContext);\r\n        if (blockContext.returnCalled) {\r\n          const res = blockContext.returnObject;\r\n          // stop processing return\r\n          if (ast.type == 'func' || ast.type == 'module') {\r\n            blockContext.returnCalled = false;\r\n            blockContext.returnObject = null;\r\n          }\r\n          return res;\r\n        }\r\n\r\n        if (blockContext.continueCalled) {\r\n          break;\r\n        }\r\n        if (blockContext.breakCalled) {\r\n          break;\r\n        }\r\n      } catch (err) {\r\n        const loc = node.loc ? node.loc : [0, 0];\r\n        if (err instanceof JspyError) {\r\n          throw err;\r\n        } else if (err instanceof JspyEvalError) {\r\n          throw err;\r\n        } else {\r\n          throw new JspyEvalError(\r\n            blockContext.moduleName,\r\n            loc[0],\r\n            loc[1],\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            (err as any).message || err\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return lastResult;\r\n  }\r\n\r\n  private assignFunctionsToScope(\r\n    scope: Record<string, unknown>,\r\n    moduleBlockContext: BlockContext,\r\n    moduleAst: AstBlock,\r\n    parts?: string[]\r\n  ): void {\r\n    const funcs = moduleAst.funcs.filter(f => !parts || parts.indexOf(f.funcAst?.name) >= 0);\r\n\r\n    for (let i = 0; i < funcs.length; i++) {\r\n      const funcDef = funcs[i] as FunctionDefNode;\r\n\r\n      const invoker = funcDef.isAsync\r\n        ? async (...args: unknown[]): Promise<unknown> =>\r\n            await this.jspyFuncInvokerAsync(funcDef, moduleBlockContext, ...args)\r\n        : (...args: unknown[]): unknown =>\r\n            new Evaluator().jspyFuncInvoker(funcDef, moduleBlockContext, ...args);\r\n\r\n      scope[funcDef.funcAst.name] = invoker;\r\n    }\r\n  }\r\n\r\n  private defaultModuleName(name: string): string {\r\n    return name.substring(name.lastIndexOf('/') + 1, name.lastIndexOf('.'));\r\n  }\r\n\r\n  private async jspyFuncInvokerAsync(\r\n    funcDef: FuncDefNode,\r\n    context: BlockContext,\r\n    ...args: unknown[]\r\n  ): Promise<unknown> {\r\n    const ast = Object.assign({}, funcDef.funcAst);\r\n    ast.type = 'func';\r\n\r\n    const blockContext = cloneContext(context);\r\n\r\n    // set parameters into new scope, based incomming arguments\r\n    for (let i = 0; i < funcDef.params?.length || 0; i++) {\r\n      const argValue = args?.length > i ? args[i] : null;\r\n      blockContext.blockScope.set(funcDef.params[i], argValue);\r\n    }\r\n\r\n    return await this.evalBlockAsync(ast, blockContext);\r\n  }\r\n\r\n  private async invokeFunctionAsync(\r\n    func: (...args: unknown[]) => unknown,\r\n    fps: unknown[],\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    loc?: { moduleName: string; line: number; column: number }\r\n  ): Promise<unknown> {\r\n    return await func(...fps);\r\n  }\r\n\r\n  private async evalNodeAsync(node: AstNode, blockContext: BlockContext): Promise<unknown> {\r\n    if (node.type === 'import') {\r\n      throw new Error('Import should be defined at the start');\r\n    }\r\n\r\n    if (node.type === 'comment') {\r\n      return null;\r\n    }\r\n\r\n    if (node.type === 'if') {\r\n      const ifNode = node as IfNode;\r\n      let doElse = true;\r\n\r\n      if (await this.evalNodeAsync(ifNode.conditionNode, blockContext)) {\r\n        await this.evalBlockAsync(\r\n          { name: blockContext.moduleName, type: 'if', body: ifNode.ifBody } as AstBlock,\r\n          blockContext\r\n        );\r\n        doElse = false;\r\n      } else if (ifNode.elifs?.length) {\r\n        for (let i = 0; i < ifNode.elifs.length; i++) {\r\n          const elIfNode = ifNode.elifs[i];\r\n\r\n          if (await this.evalNodeAsync(elIfNode.conditionNode, blockContext)) {\r\n            await this.evalBlockAsync(\r\n              { name: blockContext.moduleName, type: 'if', body: elIfNode.elifBody } as AstBlock,\r\n              blockContext\r\n            );\r\n            doElse = false;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (doElse && ifNode.elseBody) {\r\n        await this.evalBlockAsync(\r\n          { name: blockContext.moduleName, type: 'if', body: ifNode.elseBody } as AstBlock,\r\n          blockContext\r\n        );\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'raise') {\r\n      const raiseNode = node as RaiseNode;\r\n      const errorMessage = (await this.evalNodeAsync(\r\n        raiseNode.errorMessageAst,\r\n        blockContext\r\n      )) as string;\r\n      const err = new JspyError(\r\n        blockContext.moduleName,\r\n        raiseNode.loc[0],\r\n        raiseNode.loc[1],\r\n        raiseNode.errorName,\r\n        errorMessage\r\n      );\r\n      throw err;\r\n    }\r\n\r\n    if (node.type === 'tryExcept') {\r\n      const tryNode = node as TryExceptNode;\r\n      try {\r\n        await this.evalBlockAsync(\r\n          { name: blockContext.moduleName, type: 'trycatch', body: tryNode.tryBody } as AstBlock,\r\n          blockContext\r\n        );\r\n\r\n        if (tryNode.elseBody?.length || 0 > 0) {\r\n          await this.evalBlockAsync(\r\n            { name: blockContext.moduleName, type: 'trycatch', body: tryNode.elseBody } as AstBlock,\r\n            blockContext\r\n          );\r\n        }\r\n      } catch (err) {\r\n        // catches here all exceptions. Including JSPY Eval errors\r\n        const name = err instanceof JspyError ? (err as JspyError).name : typeof err;\r\n        const message =\r\n          err instanceof JspyError\r\n            ? (err as JspyError).message\r\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n              (err as any)?.message ?? String(err);\r\n        const moduleName = err instanceof JspyError ? (err as JspyError).module : 0;\r\n        const line = err instanceof JspyError ? (err as JspyError).line : 0;\r\n        const column = err instanceof JspyError ? (err as JspyError).column : 0;\r\n\r\n        const firstExept = tryNode.exepts[0];\r\n        const catchBody = firstExept.body;\r\n        const ctx = blockContext;\r\n        ctx.blockScope.set(firstExept.error?.alias || 'error', {\r\n          name,\r\n          message,\r\n          line,\r\n          column,\r\n          moduleName\r\n        });\r\n        await this.evalBlockAsync(\r\n          { name: blockContext.moduleName, type: 'trycatch', body: catchBody } as AstBlock,\r\n          ctx\r\n        );\r\n        ctx.blockScope.set(firstExept.error?.alias || 'error', null);\r\n      } finally {\r\n        if (tryNode.finallyBody?.length || 0 > 0) {\r\n          await this.evalBlockAsync(\r\n            {\r\n              name: blockContext.moduleName,\r\n              type: 'trycatch',\r\n              body: tryNode.finallyBody\r\n            } as AstBlock,\r\n            blockContext\r\n          );\r\n        }\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'return') {\r\n      const returnNode = node as ReturnNode;\r\n      blockContext.returnCalled = true;\r\n      blockContext.returnObject = returnNode.returnValue\r\n        ? await this.evalNodeAsync(returnNode.returnValue, blockContext)\r\n        : null;\r\n\r\n      return blockContext.returnObject;\r\n    }\r\n\r\n    if (node.type === 'continue') {\r\n      blockContext.continueCalled = true;\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'break') {\r\n      blockContext.breakCalled = true;\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'for') {\r\n      const forNode = node as ForNode;\r\n\r\n      const array = (await this.evalNodeAsync(forNode.sourceArray, blockContext)) as\r\n        | unknown[]\r\n        | string;\r\n      for (let i = 0; i < array.length; i++) {\r\n        const item = array[i];\r\n        blockContext.blockScope.set(forNode.itemVarName, item);\r\n        await this.evalBlockAsync(\r\n          { name: blockContext.moduleName, type: 'for', body: forNode.body } as AstBlock,\r\n          blockContext\r\n        );\r\n        if (blockContext.continueCalled) {\r\n          blockContext.continueCalled = false;\r\n        }\r\n        if (blockContext.breakCalled) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (blockContext.breakCalled) {\r\n        blockContext.breakCalled = false;\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'while') {\r\n      const whileNode = node as WhileNode;\r\n\r\n      while (await this.evalNodeAsync(whileNode.condition, blockContext)) {\r\n        await this.evalBlockAsync(\r\n          { name: blockContext.moduleName, type: 'while', body: whileNode.body } as AstBlock,\r\n          blockContext\r\n        );\r\n\r\n        if (blockContext.continueCalled) {\r\n          blockContext.continueCalled = false;\r\n        }\r\n        if (blockContext.breakCalled) {\r\n          break;\r\n        }\r\n      }\r\n      if (blockContext.breakCalled) {\r\n        blockContext.breakCalled = false;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'const') {\r\n      return (node as ConstNode).value;\r\n    }\r\n\r\n    if (node.type === 'getSingleVar') {\r\n      const name = (node as GetSingleVarNode).name;\r\n      const value = blockContext.blockScope.get(name);\r\n\r\n      if (value === undefined) {\r\n        if (name.charAt(name.length - 1) === ';') {\r\n          throw new Error(`Unexpected ';' in the end.`);\r\n        } else {\r\n          throw new Error(`Variable '${name}' is not defined.`);\r\n        }\r\n      }\r\n      return value;\r\n    }\r\n\r\n    if (node.type === 'binOp') {\r\n      const binOpNode = node as BinOpNode;\r\n      const left = await this.evalNodeAsync(binOpNode.left, blockContext);\r\n      const right = await this.evalNodeAsync(binOpNode.right, blockContext);\r\n\r\n      const func = OperationFuncs.get(binOpNode.op);\r\n      if (typeof func === 'function') return func(left as Primitive, right as Primitive);\r\n      else throw new Error('Unknown binary oprastion');\r\n    }\r\n\r\n    if (node.type === 'logicalOp') {\r\n      const logicalGroups = node as LogicalOpNode;\r\n      let ind = 0;\r\n      let gResult: unknown = true;\r\n\r\n      while (ind < logicalGroups.items.length) {\r\n        const eg = logicalGroups.items[ind++];\r\n\r\n        gResult = await this.evalNodeAsync(eg.node, blockContext);\r\n\r\n        if (eg.op === 'and' && !gResult) {\r\n          return false;\r\n        }\r\n        if (eg.op === 'or' && gResult) {\r\n          return gResult;\r\n        }\r\n      }\r\n\r\n      return gResult;\r\n    }\r\n\r\n    if (node.type === 'arrowFuncDef') {\r\n      const arrowFuncDef = node as ArrowFuncDefNode;\r\n\r\n      return (...args: unknown[]): unknown =>\r\n        new Evaluator().jspyFuncInvoker(arrowFuncDef, blockContext, ...args);\r\n    }\r\n\r\n    if (node.type === 'funcCall') {\r\n      const funcCallNode = node as FunctionCallNode;\r\n      const func = blockContext.blockScope.get(funcCallNode.name) as (\r\n        ...args: unknown[]\r\n      ) => unknown;\r\n\r\n      if (typeof func !== 'function') {\r\n        throw Error(`'${funcCallNode.name}' is not a function or not defined.`);\r\n      }\r\n\r\n      const pms = [];\r\n      for (const p of funcCallNode.paramNodes || []) {\r\n        pms.push(await this.evalNodeAsync(p, blockContext));\r\n      }\r\n\r\n      return await this.invokeFunctionAsync(func, pms, {\r\n        moduleName: blockContext.moduleName,\r\n        line: funcCallNode.loc[0],\r\n        column: funcCallNode.loc[0]\r\n      });\r\n    }\r\n\r\n    if (node.type === 'assign') {\r\n      const assignNode = node as AssignNode;\r\n\r\n      if (assignNode.target.type === 'getSingleVar') {\r\n        const node = assignNode.target as SetSingleVarNode;\r\n        blockContext.blockScope.set(\r\n          node.name,\r\n          await this.evalNodeAsync(assignNode.source, blockContext)\r\n        );\r\n      } else if (assignNode.target.type === 'chainingCalls') {\r\n        const targetNode = assignNode.target as ChainingCallsNode;\r\n\r\n        // create a node for all but last property token\r\n        // potentially it can go to parser\r\n        const targetObjectNode = new ChainingCallsNode(\r\n          targetNode.innerNodes.slice(0, targetNode.innerNodes.length - 1),\r\n          targetNode.loc\r\n        );\r\n        const targetObject = (await this.evalNodeAsync(targetObjectNode, blockContext)) as Record<\r\n          string,\r\n          unknown\r\n        >;\r\n\r\n        const lastInnerNode = targetNode.innerNodes[targetNode.innerNodes.length - 1];\r\n\r\n        let lastPropertyName = '';\r\n        if (lastInnerNode.type === 'getSingleVar') {\r\n          lastPropertyName = (lastInnerNode as GetSingleVarNode).name;\r\n        } else if (lastInnerNode.type === 'chainingObjectAccess') {\r\n          lastPropertyName = (await this.evalNodeAsync(\r\n            (lastInnerNode as ChainingObjectAccessNode).indexerBody,\r\n            blockContext\r\n          )) as string;\r\n        } else {\r\n          throw Error('Not implemented Assign operation with chaining calls');\r\n        }\r\n\r\n        targetObject[lastPropertyName] = await this.evalNodeAsync(assignNode.source, blockContext);\r\n      }\r\n\r\n      return null;\r\n    }\r\n\r\n    if (node.type === 'chainingCalls') {\r\n      return await this.resolveChainingCallsNode(node as ChainingCallsNode, blockContext);\r\n    }\r\n\r\n    if (node.type === 'createObject') {\r\n      const createObjectNode = node as CreateObjectNode;\r\n      const obj = {} as Record<string, unknown>;\r\n\r\n      for (const p of createObjectNode.props) {\r\n        obj[(await this.evalNodeAsync(p.name, blockContext)) as string] = await this.evalNodeAsync(\r\n          p.value,\r\n          blockContext\r\n        );\r\n      }\r\n\r\n      return obj;\r\n    }\r\n\r\n    if (node.type === 'createArray') {\r\n      const arrayNode = node as CreateArrayNode;\r\n      const res = [] as unknown[];\r\n\r\n      for (const item of arrayNode.items) {\r\n        res.push(await this.evalNodeAsync(item, blockContext));\r\n      }\r\n\r\n      return res;\r\n    }\r\n  }\r\n\r\n  private async resolveChainingCallsNode(\r\n    chNode: ChainingCallsNode,\r\n    blockContext: BlockContext\r\n  ): Promise<unknown> {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let startObject = (await this.evalNodeAsync(chNode.innerNodes[0], blockContext)) as any;\r\n\r\n    for (let i = 1; i < chNode.innerNodes.length; i++) {\r\n      const nestedProp = chNode.innerNodes[i];\r\n\r\n      if ((chNode.innerNodes[i - 1] as unknown as IsNullCoelsing).nullCoelsing && !startObject) {\r\n        startObject = {};\r\n      }\r\n\r\n      if (nestedProp.type === 'getSingleVar') {\r\n        startObject = startObject[(nestedProp as SetSingleVarNode).name] as unknown;\r\n      } else if (nestedProp.type === 'chainingObjectAccess') {\r\n        const node = nestedProp as ChainingObjectAccessNode;\r\n        // startObject = startObject[node.] as unknown;\r\n        startObject = startObject[\r\n          (await this.evalNodeAsync(node.indexerBody, blockContext)) as string\r\n        ] as unknown;\r\n      } else if (nestedProp.type === 'funcCall') {\r\n        const funcCallNode = nestedProp as FunctionCallNode;\r\n        const func = startObject[funcCallNode.name] as (...args: unknown[]) => unknown;\r\n\r\n        if (\r\n          (func === undefined || func === null) &&\r\n          (chNode.innerNodes[i - 1] as unknown as IsNullCoelsing).nullCoelsing\r\n        ) {\r\n          startObject = null;\r\n          continue;\r\n        }\r\n\r\n        if (typeof func !== 'function') {\r\n          throw Error(`'${funcCallNode.name}' is not a function or not defined.`);\r\n        }\r\n        const pms = [];\r\n        for (const p of funcCallNode.paramNodes || []) {\r\n          pms.push(await this.evalNodeAsync(p, blockContext));\r\n        }\r\n\r\n        startObject = await this.invokeFunctionAsync(func.bind(startObject), pms, {\r\n          moduleName: blockContext.moduleName,\r\n          line: funcCallNode.loc[0],\r\n          column: funcCallNode.loc[0]\r\n        });\r\n      } else {\r\n        throw Error(\"Can't resolve chainingCalls node\");\r\n      }\r\n    }\r\n\r\n    return startObject === undefined ? null : startObject;\r\n  }\r\n}\r\n","import { parseDatetimeOrNull } from './common/utils';\r\n\r\nexport const INITIAL_SCOPE = {\r\n  jsPython(): string {\r\n    return `JSPython v2.1.10 (c) 2022 FalconSoft Ltd. All rights reserved.`;\r\n  },\r\n  dateTime: (str: number | string | unknown = null): Date =>\r\n    parseDatetimeOrNull(str as string) || new Date(),\r\n  range: range,\r\n  print: (...args: unknown[]): unknown => {\r\n    console.log(...args);\r\n    return args.length > 0 ? args[0] : null;\r\n  },\r\n  isNull: (v: unknown, defValue: unknown = null): boolean | unknown =>\r\n    defValue === null ? v === null : v || defValue,\r\n  isDate: (d: unknown): boolean => d instanceof Date,\r\n  isFunction: (v: unknown): boolean => typeof v === 'function',\r\n  isString: (v: unknown): boolean => typeof v === 'string',\r\n  deleteProperty: (obj: Record<string, unknown>, propName: string): boolean => delete obj[propName],\r\n  Math: Math,\r\n  Object: Object,\r\n  Array: Array,\r\n  JSON: JSON,\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  printExecutionContext: (): void => {}, // will be overriden at runtime\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  getExecutionContext: (): Record<string, unknown> => ({}) // will be overriden at runtime\r\n};\r\n\r\n/**\r\n * This interface needs to be replaced\r\n */\r\nexport interface PackageToImport {\r\n  name: string;\r\n  properties?: { name: string; as?: string }[];\r\n  as?: string;\r\n}\r\n\r\nfunction range(start: number, stop = NaN, step = 1): number[] {\r\n  const arr: number[] = [];\r\n  const isStopNaN = isNaN(stop);\r\n  stop = isStopNaN ? start : stop;\r\n  start = isStopNaN ? 0 : start;\r\n  let i = start;\r\n  while (i < stop) {\r\n    arr.push(i);\r\n    i += step;\r\n  }\r\n  return arr;\r\n}\r\n","import {\r\n  BinOpNode,\r\n  ConstNode,\r\n  AstBlock,\r\n  Token,\r\n  AstNode,\r\n  Operators,\r\n  AssignNode,\r\n  TokenTypes,\r\n  GetSingleVarNode,\r\n  FunctionCallNode,\r\n  getTokenType,\r\n  getTokenValue,\r\n  isTokenTypeLiteral,\r\n  getStartLine,\r\n  getStartColumn,\r\n  getEndColumn,\r\n  getEndLine,\r\n  findOperators,\r\n  splitTokens,\r\n  findTokenValueIndex,\r\n  FunctionDefNode,\r\n  CreateObjectNode,\r\n  ObjectPropertyInfo,\r\n  CreateArrayNode,\r\n  ArrowFuncDefNode,\r\n  ExpressionOperators,\r\n  IfNode,\r\n  ForNode,\r\n  WhileNode,\r\n  ImportNode,\r\n  NameAlias,\r\n  ContinueNode,\r\n  BreakNode,\r\n  ReturnNode,\r\n  CommentNode,\r\n  getTokenLoc,\r\n  OperationTypes,\r\n  LogicalNodeItem,\r\n  LogicalOperators,\r\n  LogicalOpNode,\r\n  ComparisonOperators,\r\n  TryExceptNode,\r\n  ExceptBody,\r\n  RaiseNode,\r\n  findChainingCallTokensIndexes,\r\n  splitTokensByIndexes,\r\n  ChainingCallsNode,\r\n  ChainingObjectAccessNode,\r\n  ElifNode\r\n} from '../common';\r\nimport { JspyParserError } from '../common/utils';\r\n\r\nclass InstructionLine {\r\n  readonly tokens: Token[] = [];\r\n\r\n  startLine(): number {\r\n    return getStartLine(this.tokens[0]);\r\n  }\r\n\r\n  startColumn(): number {\r\n    return getStartColumn(this.tokens[0]);\r\n  }\r\n\r\n  endLine(): number {\r\n    return getEndLine(this.tokens[this.tokens.length - 1]);\r\n  }\r\n\r\n  endColumn(): number {\r\n    return getEndColumn(this.tokens[this.tokens.length - 1]);\r\n  }\r\n}\r\n\r\nexport class Parser {\r\n  private _currentToken: Token | null = null;\r\n  private _moduleName = '';\r\n\r\n  /**\r\n   * Parses tokens and return Ast - Abstract Syntax Tree for jsPython code\r\n   * @param tokens tokens\r\n   * @param options parsing options. By default it will exclude comments and include LOC (Line of code)\r\n   */\r\n  parse(tokens: Token[], name = 'main.jspy', type = 'module'): AstBlock {\r\n    this._moduleName = name;\r\n    const ast = { name, type, funcs: [], body: [] } as AstBlock;\r\n\r\n    if (!tokens || !tokens.length) {\r\n      return ast;\r\n    }\r\n\r\n    try {\r\n      // group all tokens into an Instruction lines.\r\n      const instructions = this.tokensToInstructionLines(tokens, 1);\r\n\r\n      // process all instructions\r\n      this.instructionsToNodes(instructions, ast);\r\n    } catch (error) {\r\n      const err = error as Error;\r\n      const token = this._currentToken ?? ({} as Token);\r\n      throw new JspyParserError(\r\n        ast.name,\r\n        getStartLine(token),\r\n        getStartColumn(token),\r\n        err.message || String(err)\r\n      );\r\n    }\r\n    return ast;\r\n  }\r\n\r\n  private instructionsToNodes(instructions: InstructionLine[], ast: AstBlock): void {\r\n    const getBody = (tokens: Token[], startTokenIndex: number): AstNode[] => {\r\n      const instructionLines = this.tokensToInstructionLines(\r\n        tokens,\r\n        getStartLine(tokens[startTokenIndex])\r\n      );\r\n      const bodyAst = { name: ast.name, body: [] as AstNode[], funcs: [] as AstNode[] } as AstBlock;\r\n      this.instructionsToNodes(instructionLines, bodyAst);\r\n      return bodyAst.body;\r\n    };\r\n\r\n    const findIndexes = (tkns: Token[], operation: OperationTypes, result: number[]): boolean => {\r\n      result.splice(0, result.length);\r\n      findOperators(tkns, operation).forEach(r => result.push(r));\r\n      return !!result.length;\r\n    };\r\n\r\n    for (let i = 0; i < instructions.length; i++) {\r\n      const instruction = instructions[i];\r\n\r\n      // remove comments\r\n      let tt = 0;\r\n      while (tt < instruction.tokens.length) {\r\n        if (getTokenType(instruction.tokens[tt]) === TokenTypes.Comment) {\r\n          instruction.tokens.splice(tt, 1);\r\n        } else {\r\n          tt++;\r\n        }\r\n      }\r\n      if (!instruction.tokens.length) {\r\n        continue;\r\n      }\r\n\r\n      const firstToken = instruction.tokens[0];\r\n      const secondToken = instruction.tokens.length > 1 ? instruction.tokens[1] : null;\r\n      this._currentToken = firstToken;\r\n\r\n      const logicOpIndexes: number[] = [];\r\n      const assignTokenIndexes: number[] = [];\r\n\r\n      if (getTokenType(firstToken) === TokenTypes.Comment) {\r\n        ast.body.push(\r\n          new CommentNode(getTokenValue(firstToken) as string, getTokenLoc(firstToken))\r\n        );\r\n      } else if (\r\n        getTokenValue(firstToken) === 'def' ||\r\n        (getTokenValue(firstToken) === 'async' && getTokenValue(secondToken) === 'def')\r\n      ) {\r\n        const isAsync = getTokenValue(firstToken) === 'async';\r\n        const funcName = getTokenValue(instruction.tokens[isAsync ? 2 : 1]) as string;\r\n        const paramsTokens = instruction.tokens.slice(\r\n          instruction.tokens.findIndex(tkns => getTokenValue(tkns) === '(') + 1,\r\n          instruction.tokens.findIndex(tkns => getTokenValue(tkns) === ')')\r\n        );\r\n\r\n        const params = splitTokens(paramsTokens, ',').map(t => getTokenValue(t[0]) as string);\r\n\r\n        const endDefOfDef = findTokenValueIndex(instruction.tokens, v => v === ':');\r\n\r\n        if (endDefOfDef === -1) {\r\n          throw `Can't find : for def`;\r\n        }\r\n\r\n        const instructionLines = this.tokensToInstructionLines(\r\n          instruction.tokens,\r\n          getStartLine(instruction.tokens[endDefOfDef + 1])\r\n        );\r\n        const funcAst = {\r\n          name: funcName,\r\n          body: [] as AstNode[],\r\n          funcs: [] as AstNode[]\r\n        } as AstBlock;\r\n        this.instructionsToNodes(instructionLines, funcAst);\r\n\r\n        ast.funcs.push(\r\n          new FunctionDefNode(funcAst, params, isAsync, getTokenLoc(instruction.tokens[0]))\r\n        );\r\n      } else if (getTokenValue(firstToken) === 'if') {\r\n        const endDefOfDef = findTokenValueIndex(instruction.tokens, v => v === ':');\r\n\r\n        if (endDefOfDef === -1) {\r\n          throw `Can't find : for if`;\r\n        }\r\n\r\n        const ifBody = getBody(instruction.tokens, endDefOfDef + 1);\r\n        const conditionTokens = instruction.tokens.slice(1, endDefOfDef);\r\n\r\n        const conditionNode = findIndexes(conditionTokens, OperationTypes.Logical, logicOpIndexes)\r\n          ? this.groupLogicalOperations(logicOpIndexes, conditionTokens)\r\n          : this.createExpressionNode(conditionTokens);\r\n\r\n        // elifs\r\n        const elifNodes: ElifNode[] = [];\r\n        while (\r\n          instructions.length > i + 1 &&\r\n          getTokenValue(instructions[i + 1].tokens[0]) === 'elif'\r\n        ) {\r\n          const elifInstruction = instructions[++i];\r\n\r\n          const endOfElif = findTokenValueIndex(elifInstruction.tokens, v => v === ':');\r\n\r\n          const conditionTokens = elifInstruction.tokens.slice(1, endDefOfDef);\r\n\r\n          const elifConditionNode = findIndexes(\r\n            conditionTokens,\r\n            OperationTypes.Logical,\r\n            logicOpIndexes\r\n          )\r\n            ? this.groupLogicalOperations(logicOpIndexes, conditionTokens)\r\n            : this.createExpressionNode(conditionTokens);\r\n\r\n          const elifBody = getBody(elifInstruction.tokens, endOfElif + 1);\r\n          elifNodes.push(\r\n            new ElifNode(elifConditionNode, elifBody, getTokenLoc(elifInstruction.tokens[0]))\r\n          );\r\n        }\r\n\r\n        // else\r\n        let elseBody: AstNode[] | undefined = undefined;\r\n        if (\r\n          instructions.length > i + 1 &&\r\n          getTokenValue(instructions[i + 1].tokens[0]) === 'else' &&\r\n          getTokenValue(instructions[i + 1].tokens[1]) === ':'\r\n        ) {\r\n          elseBody = getBody(instructions[i + 1].tokens, 2);\r\n          i++;\r\n        }\r\n\r\n        ast.body.push(\r\n          new IfNode(conditionNode, ifBody, elifNodes, elseBody, getTokenLoc(firstToken))\r\n        );\r\n      } else if (getTokenValue(firstToken) === 'try') {\r\n        if (getTokenValue(instruction.tokens[1]) !== ':') {\r\n          throw `'try' statement should be followed by ':'`;\r\n        }\r\n\r\n        const tryBody = getBody(instruction.tokens, 2);\r\n        const excepts: ExceptBody[] = [];\r\n\r\n        let elseBody: AstNode[] | undefined = undefined;\r\n        let finallyBody: AstNode[] | undefined = undefined;\r\n\r\n        while (\r\n          instructions.length > i + 1 &&\r\n          (getTokenValue(instructions[i + 1].tokens[0]) === 'else' ||\r\n            getTokenValue(instructions[i + 1].tokens[0]) === 'except' ||\r\n            getTokenValue(instructions[i + 1].tokens[0]) === 'finally')\r\n        ) {\r\n          if (getTokenValue(instructions[i + 1].tokens[0]) === 'else') {\r\n            if (elseBody) {\r\n              throw new Error(`Only one 'else' is allowed in a 'try'`);\r\n            }\r\n\r\n            elseBody = getBody(instructions[i + 1].tokens, 2);\r\n          }\r\n\r\n          if (getTokenValue(instructions[i + 1].tokens[0]) === 'finally') {\r\n            if (finallyBody) {\r\n              throw new Error(`Only one 'else' is allowed in a 'try'`);\r\n            }\r\n\r\n            finallyBody = getBody(instructions[i + 1].tokens, 2);\r\n          }\r\n\r\n          if (getTokenValue(instructions[i + 1].tokens[0]) === 'except') {\r\n            const endIndex = findTokenValueIndex(instructions[i + 1].tokens, v => v === ':');\r\n            const except = {} as ExceptBody;\r\n\r\n            if (endIndex === 2) {\r\n              except.error = { name: getTokenValue(instructions[i + 1].tokens[1]) } as NameAlias;\r\n            } else if (endIndex === 3) {\r\n              except.error = {\r\n                name: getTokenValue(instructions[i + 1].tokens[1]),\r\n                alias: getTokenValue(instructions[i + 1].tokens[2])\r\n              } as NameAlias;\r\n            } else if (endIndex === 4) {\r\n              except.error = {\r\n                name: getTokenValue(instructions[i + 1].tokens[1]),\r\n                alias: getTokenValue(instructions[i + 1].tokens[3])\r\n              } as NameAlias;\r\n            } else if (endIndex !== 1) {\r\n              throw new Error(\r\n                `Incorrect 'except:' statement. Valid stats: (except: or except Error: or except Error as e:)`\r\n              );\r\n            }\r\n\r\n            except.body = getBody(instructions[i + 1].tokens, endIndex + 1);\r\n\r\n            excepts.push(except);\r\n          }\r\n\r\n          i++;\r\n        }\r\n\r\n        if (!excepts.length) {\r\n          throw new Error('Except: is missing');\r\n        }\r\n\r\n        ast.body.push(\r\n          new TryExceptNode(tryBody, excepts, elseBody, finallyBody, getTokenLoc(firstToken))\r\n        );\r\n      } else if (getTokenValue(firstToken) === 'continue') {\r\n        ast.body.push(new ContinueNode());\r\n      } else if (getTokenValue(firstToken) === 'break') {\r\n        ast.body.push(new BreakNode());\r\n      } else if (getTokenValue(firstToken) === 'return') {\r\n        ast.body.push(\r\n          new ReturnNode(\r\n            instruction.tokens.length > 1\r\n              ? this.createExpressionNode(instruction.tokens.slice(1))\r\n              : undefined,\r\n            getTokenLoc(firstToken)\r\n          )\r\n        );\r\n      } else if (getTokenValue(firstToken) === 'raise') {\r\n        if (instruction.tokens.length === 1) {\r\n          throw new Error(`Incorrect 'raise' usage. Please specify error name and message `);\r\n        }\r\n        const errorName = getTokenValue(instruction.tokens[1]) as string;\r\n\r\n        // const errorMessage =\r\n        //   instruction.tokens.length == 5 &&\r\n        //   getTokenValue(instruction.tokens[2]) === '(' &&\r\n        //   getTokenValue(instruction.tokens[4]) === ')'\r\n        //     ? (getTokenValue(instruction.tokens[3]) as string)\r\n        //     : undefined;\r\n\r\n        const errMsg = this.createExpressionNode(instruction.tokens.slice(1));\r\n\r\n        ast.body.push(new RaiseNode(errorName, errMsg, getTokenLoc(firstToken)));\r\n      } else if (getTokenValue(firstToken) === 'for') {\r\n        const endDefOfDef = findTokenValueIndex(instruction.tokens, v => v === ':');\r\n\r\n        if (endDefOfDef === -1) {\r\n          throw `Can't find : for if`;\r\n        }\r\n\r\n        const itemVarName = getTokenValue(instruction.tokens[1]) as string;\r\n        const sourceArray = this.createExpressionNode(instruction.tokens.slice(3, endDefOfDef));\r\n        const forBody = getBody(instruction.tokens, endDefOfDef + 1);\r\n\r\n        ast.body.push(new ForNode(sourceArray, itemVarName, forBody, getTokenLoc(firstToken)));\r\n      } else if (getTokenValue(firstToken) === 'while') {\r\n        const endDefOfDef = findTokenValueIndex(instruction.tokens, v => v === ':');\r\n\r\n        if (endDefOfDef === -1) {\r\n          throw `Can't find : for [while]`;\r\n        }\r\n\r\n        const conditionTokens = instruction.tokens.slice(1, endDefOfDef);\r\n        const conditionNode = findIndexes(conditionTokens, OperationTypes.Logical, logicOpIndexes)\r\n          ? this.groupLogicalOperations(logicOpIndexes, conditionTokens)\r\n          : this.createExpressionNode(conditionTokens);\r\n\r\n        const body = getBody(instruction.tokens, endDefOfDef + 1);\r\n\r\n        ast.body.push(new WhileNode(conditionNode, body, getTokenLoc(firstToken)));\r\n      } else if (getTokenValue(firstToken) === 'import') {\r\n        let asIndex = findTokenValueIndex(instruction.tokens, v => v === 'as');\r\n        if (asIndex < 0) {\r\n          asIndex = instruction.tokens.length;\r\n        }\r\n\r\n        const module = {\r\n          name: instruction.tokens\r\n            .slice(1, asIndex)\r\n            .map(t => getTokenValue(t))\r\n            .join(''),\r\n          alias:\r\n            instruction.tokens\r\n              .slice(asIndex + 1)\r\n              .map(t => getTokenValue(t))\r\n              .join('') || undefined\r\n        } as NameAlias;\r\n\r\n        const body = {} as AstBlock; // empty for now\r\n        ast.body.push(new ImportNode(module, body, undefined, getTokenLoc(firstToken)));\r\n      } else if (getTokenValue(firstToken) === 'from') {\r\n        const importIndex = findTokenValueIndex(instruction.tokens, v => v === 'import');\r\n        if (importIndex < 0) {\r\n          throw Error(`'import' must follow 'from'`);\r\n        }\r\n\r\n        const module = {\r\n          name: instruction.tokens\r\n            .slice(1, importIndex)\r\n            .map(t => getTokenValue(t))\r\n            .join('')\r\n        } as NameAlias;\r\n\r\n        const parts = splitTokens(instruction.tokens.slice(importIndex + 1), ',').map(t => {\r\n          return {\r\n            name: getTokenValue(t[0]),\r\n            alias: t.length === 3 ? getTokenValue(t[2]) : undefined\r\n          } as NameAlias;\r\n        });\r\n\r\n        const body = {} as AstBlock; // empty for now\r\n\r\n        ast.body.push(new ImportNode(module, body, parts, getTokenLoc(firstToken)));\r\n      } else if (findIndexes(instruction.tokens, OperationTypes.Assignment, assignTokenIndexes)) {\r\n        const assignTokens = splitTokens(instruction.tokens, '=');\r\n        const target = this.createExpressionNode(assignTokens[0]);\r\n        const source = this.createExpressionNode(assignTokens[1]);\r\n        ast.body.push(new AssignNode(target, source, getTokenLoc(assignTokens[0][0])));\r\n      } else if (findIndexes(instruction.tokens, OperationTypes.Logical, logicOpIndexes)) {\r\n        ast.body.push(this.groupLogicalOperations(logicOpIndexes, instruction.tokens));\r\n      } else {\r\n        ast.body.push(this.createExpressionNode(instruction.tokens));\r\n      }\r\n    }\r\n  }\r\n\r\n  private sliceWithBrackets(a: Token[], begin: number, end: number): Token[] {\r\n    // if expression is in brackets, then we need clean brackets\r\n    if (getTokenValue(a[begin]) === '(' && getTokenType(a[begin]) !== TokenTypes.LiteralString) {\r\n      begin++;\r\n      end--;\r\n    }\r\n\r\n    return a.slice(begin, end);\r\n  }\r\n\r\n  private groupComparisonOperations(indexes: number[], tokens: Token[]): AstNode {\r\n    const start = 0;\r\n\r\n    let leftNode: AstNode | null = null;\r\n    for (let i = 0; i < indexes.length; i++) {\r\n      const opToken = getTokenValue(tokens[indexes[i]]) as ComparisonOperators;\r\n      leftNode = leftNode\r\n        ? leftNode\r\n        : this.createExpressionNode(this.sliceWithBrackets(tokens, start, indexes[i]));\r\n\r\n      const endInd = i + 1 < indexes.length ? indexes[i + 1] : tokens.length;\r\n      const rightNode = this.createExpressionNode(\r\n        this.sliceWithBrackets(tokens, indexes[i] + 1, endInd)\r\n      );\r\n\r\n      leftNode = new BinOpNode(leftNode, opToken, rightNode, getTokenLoc(tokens[0]));\r\n    }\r\n\r\n    return leftNode as AstNode;\r\n  }\r\n\r\n  private groupLogicalOperations(logicOp: number[], tokens: Token[]): LogicalOpNode {\r\n    let start = 0;\r\n    const logicItems: LogicalNodeItem[] = [];\r\n    for (let i = 0; i < logicOp.length; i++) {\r\n      const opToken = tokens[logicOp[i]];\r\n      const logicalSlice = this.sliceWithBrackets(tokens, start, logicOp[i]);\r\n      logicItems.push({\r\n        node: this.createExpressionNode(logicalSlice),\r\n        op: getTokenValue(opToken) as LogicalOperators\r\n      });\r\n\r\n      start = logicOp[i] + 1;\r\n    }\r\n\r\n    logicItems.push({\r\n      node: this.createExpressionNode(this.sliceWithBrackets(tokens, start, tokens.length))\r\n    } as LogicalNodeItem);\r\n\r\n    const lop = new LogicalOpNode(logicItems, getTokenLoc(tokens[0]));\r\n    return lop;\r\n  }\r\n\r\n  private tokensToInstructionLines(tokens: Token[], startLine: number): InstructionLine[] {\r\n    const lines: InstructionLine[] = [];\r\n\r\n    let column = 0;\r\n    let currentLine = startLine;\r\n    let line = new InstructionLine();\r\n    for (let i = 0; i < tokens.length; i++) {\r\n      const token = tokens[i];\r\n      const sLine = getStartLine(token);\r\n      const sColumn = getStartColumn(token);\r\n      const value = getTokenValue(token);\r\n      this._currentToken = token;\r\n\r\n      if (sLine >= startLine) {\r\n        if (currentLine !== sLine) {\r\n          currentLine = sLine;\r\n        }\r\n\r\n        if (column === sColumn && !')}]'.includes(value as string)) {\r\n          currentLine = sLine;\r\n          lines.push(line);\r\n          line = new InstructionLine();\r\n        }\r\n\r\n        line.tokens.push(token);\r\n\r\n        // first line defines a minimum indent\r\n        if (column === 0) {\r\n          column = sColumn;\r\n        }\r\n\r\n        // stop looping through if line has less indent\r\n        // it means the corrent block finished\r\n        if (sColumn < column) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (line.tokens.length) {\r\n      lines.push(line);\r\n    }\r\n\r\n    return lines;\r\n  }\r\n\r\n  private createExpressionNode(tokens: Token[]): AstNode {\r\n    if (tokens.length === 0) {\r\n      throw new Error(`Tokens length can't empty.`);\r\n    }\r\n    const lastToken = tokens[tokens.length - 1];\r\n    if (getTokenValue(lastToken) === ';' && getTokenType(lastToken) !== TokenTypes.LiteralString) {\r\n      throw new Error(`Unexpected symbol ';' in the end`);\r\n    }\r\n\r\n    this._currentToken = tokens[0];\r\n\r\n    // const or variable\r\n    if (tokens.length === 1 || (tokens.length === 2 && getTokenValue(tokens[1]) === '?')) {\r\n      const firstToken = tokens[0];\r\n      const tokenType = getTokenType(firstToken);\r\n\r\n      if (isTokenTypeLiteral(tokenType)) {\r\n        return new ConstNode(firstToken);\r\n      } else if (tokenType === TokenTypes.Identifier) {\r\n        return new GetSingleVarNode(\r\n          firstToken,\r\n          (tokens.length === 2 && getTokenValue(tokens[1]) === '?') || undefined\r\n        );\r\n      }\r\n\r\n      throw Error(`Unhandled single token: '${JSON.stringify(firstToken)}'`);\r\n    }\r\n\r\n    // arrow function\r\n    const arrowFuncParts = splitTokens(tokens, '=>');\r\n    if (arrowFuncParts.length > 1) {\r\n      const pArray =\r\n        getTokenValue(arrowFuncParts[0][0]) === '('\r\n          ? arrowFuncParts[0].splice(1, arrowFuncParts[0].length - 2)\r\n          : arrowFuncParts[0];\r\n      const params = splitTokens(pArray, ',').map(t => getTokenValue(t[0]) as string);\r\n\r\n      const instructionLines = this.tokensToInstructionLines(arrowFuncParts[1], 0);\r\n      const funcAst = {\r\n        name: this._moduleName,\r\n        body: [] as AstNode[],\r\n        funcs: [] as AstNode[]\r\n      } as AstBlock;\r\n      this.instructionsToNodes(instructionLines, funcAst);\r\n\r\n      return new ArrowFuncDefNode(funcAst, params, getTokenLoc(tokens[0]));\r\n    }\r\n\r\n    // comparison operations\r\n    const comparissonIndexes = findOperators(tokens, OperationTypes.Comparison);\r\n    if (comparissonIndexes.length) {\r\n      return this.groupComparisonOperations(comparissonIndexes, tokens);\r\n    }\r\n\r\n    // create arithmetic expression\r\n    const ops = findOperators(tokens);\r\n    if (ops.length) {\r\n      let prevNode: AstNode | null = null;\r\n      for (let i = 0; i < ops.length; i++) {\r\n        const opIndex = ops[i];\r\n        const op = getTokenValue(tokens[opIndex]) as Operators;\r\n\r\n        let nextOpIndex = i + 1 < ops.length ? ops[i + 1] : null;\r\n        let nextOp = nextOpIndex !== null ? getTokenValue(tokens[nextOpIndex]) : null;\r\n        if (nextOpIndex !== null && (nextOp === '*' || nextOp === '/')) {\r\n          let rightNode: AstNode | null = null;\r\n          // iterate through all continuous '*', '/' operations\r\n          do {\r\n            const nextOpIndex2 = i + 2 < ops.length ? ops[i + 2] : null;\r\n\r\n            const leftSlice2 = this.sliceWithBrackets(tokens, opIndex + 1, nextOpIndex);\r\n            const rightSlice2 = this.sliceWithBrackets(\r\n              tokens,\r\n              nextOpIndex + 1,\r\n              nextOpIndex2 || tokens.length\r\n            );\r\n\r\n            const left2 = this.createExpressionNode(leftSlice2);\r\n            const right2 = this.createExpressionNode(rightSlice2);\r\n            rightNode = new BinOpNode(left2, nextOp, right2, getTokenLoc(tokens[opIndex + 1]));\r\n\r\n            i++;\r\n            nextOpIndex = i + 1 < ops.length ? ops[i + 1] : null;\r\n            nextOp = nextOpIndex !== null ? getTokenValue(tokens[nextOpIndex]) : null;\r\n          } while (nextOpIndex !== null && (nextOp === '*' || nextOp === '/'));\r\n\r\n          // add up result\r\n          if (prevNode === null) {\r\n            const leftSlice = this.sliceWithBrackets(tokens, 0, opIndex);\r\n            prevNode = this.createExpressionNode(leftSlice);\r\n          }\r\n          prevNode = new BinOpNode(\r\n            prevNode,\r\n            op as ExpressionOperators,\r\n            rightNode,\r\n            getTokenLoc(tokens[0])\r\n          );\r\n        } else {\r\n          const leftSlice = prevNode ? [] : this.sliceWithBrackets(tokens, 0, opIndex);\r\n          const rightSlice = this.sliceWithBrackets(\r\n            tokens,\r\n            opIndex + 1,\r\n            nextOpIndex || tokens.length\r\n          );\r\n          const left: AstNode = prevNode || this.createExpressionNode(leftSlice);\r\n          const right = this.createExpressionNode(rightSlice);\r\n          prevNode = new BinOpNode(left, op as ExpressionOperators, right, getTokenLoc(tokens[0]));\r\n        }\r\n      }\r\n\r\n      if (prevNode === null) {\r\n        throw Error(`Can't create node ...`);\r\n      }\r\n\r\n      return prevNode;\r\n    }\r\n\r\n    // create chaining calls\r\n\r\n    const inds = findChainingCallTokensIndexes(tokens);\r\n\r\n    if (inds.length > 0) {\r\n      const chainingGroup = splitTokensByIndexes(tokens, inds);\r\n      const innerNodes: AstNode[] = [];\r\n\r\n      for (let i = 0; i < chainingGroup.length; i++) {\r\n        const chainLinkTokenks = chainingGroup[i];\r\n\r\n        if (i !== 0 && getTokenValue(chainLinkTokenks[0]) === '[') {\r\n          const nullCoelsing = getTokenValue(chainLinkTokenks[chainLinkTokenks.length - 1]) === '?';\r\n          if (nullCoelsing) {\r\n            chainLinkTokenks.pop();\r\n          }\r\n          const paramsTokensSlice = chainLinkTokenks.slice(1, chainLinkTokenks.length - 1);\r\n          const paramsNodes = this.createExpressionNode(paramsTokensSlice);\r\n\r\n          innerNodes.push(\r\n            new ChainingObjectAccessNode(\r\n              paramsNodes,\r\n              nullCoelsing,\r\n              getTokenLoc(chainLinkTokenks[0])\r\n            )\r\n          );\r\n          continue;\r\n        }\r\n\r\n        innerNodes.push(this.createExpressionNode(chainLinkTokenks));\r\n      }\r\n\r\n      return new ChainingCallsNode(innerNodes, getTokenLoc(tokens[0]));\r\n    }\r\n\r\n    // create function call node\r\n    if (tokens.length > 2 && getTokenValue(tokens[1]) === '(') {\r\n      const isNullCoelsing = getTokenValue(tokens[tokens.length - 1]) === '?';\r\n      if (isNullCoelsing) {\r\n        // remove '?'\r\n        tokens.pop();\r\n      }\r\n      const name = getTokenValue(tokens[0]) as string;\r\n      const paramsTokensSlice = tokens.slice(2, tokens.length - 1);\r\n      const paramsTokens = splitTokens(paramsTokensSlice, ',');\r\n      const paramsNodes = paramsTokens.map(tkns => this.createExpressionNode(tkns));\r\n      const node = new FunctionCallNode(name, paramsNodes, getTokenLoc(tokens[0]));\r\n      node.nullCoelsing = isNullCoelsing || undefined;\r\n      return node;\r\n    }\r\n\r\n    // create Object Node\r\n    if (getTokenValue(tokens[0]) === '{' && getTokenValue(tokens[tokens.length - 1]) === '}') {\r\n      const keyValueTokens = splitTokens(tokens.splice(1, tokens.length - 2), ',');\r\n      const props = [] as ObjectPropertyInfo[];\r\n      for (let i = 0; i < keyValueTokens.length; i++) {\r\n        if (!keyValueTokens[i].length) {\r\n          continue;\r\n        }\r\n        const keyValue = splitTokens(keyValueTokens[i], ':');\r\n        if (keyValue.length === 1) {\r\n          const pInfo = {\r\n            name: new ConstNode(keyValue[0][0]),\r\n            value: this.createExpressionNode(keyValue[0])\r\n          } as ObjectPropertyInfo;\r\n\r\n          props.push(pInfo);\r\n        } else if (keyValue.length === 2) {\r\n          let name: AstNode | null = null;\r\n          const namePart = keyValue[0];\r\n\r\n          if (namePart.length === 1) {\r\n            name = new ConstNode(namePart[0]);\r\n          } else if (\r\n            getTokenValue(namePart[0]) === '[' &&\r\n            getTokenValue(namePart[namePart.length - 1]) === ']'\r\n          ) {\r\n            name = this.createExpressionNode(namePart.slice(1, namePart.length - 1));\r\n          } else {\r\n            throw new Error(\r\n              `Incorrect JSON. Can't resolve Key field. That should either constant or expression in []`\r\n            );\r\n          }\r\n\r\n          const pInfo = {\r\n            name,\r\n            value: this.createExpressionNode(keyValue[1])\r\n          } as ObjectPropertyInfo;\r\n\r\n          props.push(pInfo);\r\n        } else {\r\n          throw Error('Incorrect JSON');\r\n        }\r\n      }\r\n\r\n      return new CreateObjectNode(props, getTokenLoc(tokens[0]));\r\n    }\r\n\r\n    // create Array Node\r\n    if (getTokenValue(tokens[0]) === '[' && getTokenValue(tokens[tokens.length - 1]) === ']') {\r\n      const items = splitTokens(tokens.splice(1, tokens.length - 2), ',')\r\n        .filter(tkns => tkns?.length)\r\n        .map(tkns => this.createExpressionNode(tkns));\r\n\r\n      return new CreateArrayNode(items, getTokenLoc(tokens[0]));\r\n    }\r\n\r\n    throw Error(`Undefined node '${getTokenValue(tokens[0])}'.`);\r\n  }\r\n}\r\n","import { getTokenType, getTokenValue, Token, TokenTypes } from '../common';\r\n\r\nconst SeparatorsMap: Record<string, string[]> = {\r\n  '\\n': ['\\n'],\r\n  '=': ['=', '==', '=>'],\r\n\r\n  '+': ['+', '++', '+='],\r\n  '-': ['-', '--', '-='],\r\n  '*': ['*', '**', '*='],\r\n  '/': ['/', '//', '/='],\r\n\r\n  '.': ['.'],\r\n  '?': ['?'],\r\n  '!': ['!='],\r\n  ':': [':'],\r\n  ',': [','],\r\n\r\n  '>': ['>', '>='],\r\n  '<': ['<', '<=', '<>'],\r\n\r\n  '(': ['('],\r\n  ')': [')'],\r\n  '{': ['{'],\r\n  '}': ['}'],\r\n  '[': ['['],\r\n  ']': [']']\r\n};\r\n\r\nconst escapeChars = ['\"', \"'\", '\\\\'];\r\nconst Keywords: string[] = ['async', 'def', 'for', 'while', 'if', 'return', 'in'];\r\n\r\nexport class Tokenizer {\r\n  private _startLine = 1;\r\n  private _startColumn = 1;\r\n  private _currentLine = 1;\r\n  private _currentColumn = 1;\r\n  private _tokenText = '';\r\n  private _cursor = 0;\r\n  private _script = '';\r\n\r\n  private get tokenText(): string {\r\n    return this._tokenText;\r\n  }\r\n  private set tokenText(value: string) {\r\n    if (!this._tokenText && value) {\r\n      this._startLine = this._currentLine;\r\n      this._startColumn = this._currentColumn;\r\n    }\r\n    this._tokenText = value;\r\n  }\r\n\r\n  /**\r\n   * Splits script code into a tokens\r\n   * @param script A jsPython text\r\n   */\r\n  tokenize(script: string): Token[] {\r\n    if (!script || !script.length) {\r\n      return [];\r\n    }\r\n\r\n    script = script\r\n      // eslint-disable-next-line no-control-regex\r\n      .replace(new RegExp('\\t', 'g'), '  ') // replace all tabs with 2 spaces\r\n      // eslint-disable-next-line no-control-regex\r\n      .replace(new RegExp('\\r', 'g'), ''); // remove all \\r symbols\r\n    this._script = script;\r\n\r\n    this._cursor = 0;\r\n    this._startLine = 1;\r\n    this._startColumn = 1;\r\n    this._currentLine = 1;\r\n    this._currentColumn = 1;\r\n\r\n    const tokens: Token[] = [];\r\n\r\n    let first = true;\r\n    // handle initial spaces\r\n    while (script[this._cursor] === '\\n') {\r\n      this.incrementCursor();\r\n      if (first) {\r\n        this._currentLine++;\r\n        first = false;\r\n      }\r\n      this._currentColumn = 1;\r\n    }\r\n\r\n    do {\r\n      const symbol = script[this._cursor];\r\n\r\n      if (symbol == ' ' && this.tokenText.length !== 0) {\r\n        this.tokenText = this.processToken(this.tokenText, tokens);\r\n        continue;\r\n      } else if (SeparatorsMap[symbol] !== undefined && !this.isPartOfNumber(symbol, tokens)) {\r\n        // handle numbers with floating point e.g. 3.14\r\n        this.tokenText = this.processToken(this.tokenText, tokens);\r\n        this.tokenText = symbol;\r\n\r\n        const sepsMap = SeparatorsMap[symbol];\r\n\r\n        if (sepsMap.length >= 1) {\r\n          // process longer operators\r\n          while (sepsMap.includes(this.tokenText + script[this._cursor + 1])) {\r\n            this.tokenText += script[this.incrementCursor()];\r\n          }\r\n        }\r\n        this.tokenText = this.processToken(this.tokenText, tokens, false, TokenTypes.Operator);\r\n      } else if (symbol === '#') {\r\n        let first = true;\r\n        while (script[this.incrementCursor()] !== '\\n') {\r\n          this.tokenText += script[this._cursor];\r\n\r\n          // correct start column\r\n          if (first) {\r\n            first = false;\r\n            this._startColumn = this._startColumn - 1;\r\n          }\r\n\r\n          if (this._cursor + 1 >= script.length) break;\r\n        }\r\n        this.tokenText = this.processToken(this.tokenText, tokens, true, TokenTypes.Comment);\r\n      } else if (symbol === '\"' || symbol === \"'\") {\r\n        // remember either it is single or double quote\r\n        const q = symbol;\r\n        // we are not expecting token to be added here.\r\n        // it should pass a failt to parser\r\n        this.tokenText = this.processToken(this.tokenText, tokens);\r\n\r\n        // handle \"\"\" comment \"\"\"\"\r\n        if (script[this._cursor + 1] === q && script[this._cursor + 2] === q) {\r\n          const cLine = this._currentLine;\r\n          const cColumn = this._currentColumn;\r\n          this.incrementCursor(2);\r\n          const passCond = true;\r\n          while (passCond) {\r\n            this.tokenText += script[this.incrementCursor()];\r\n            if (\r\n              this._cursor + 3 >= script.length ||\r\n              (script[this._cursor + 1] === q &&\r\n                script[this._cursor + 2] === q &&\r\n                script[this._cursor + 3] === q)\r\n            ) {\r\n              break;\r\n            }\r\n          }\r\n          // a special case when multiline string\r\n          this._startLine = cLine;\r\n          this._startColumn = cColumn;\r\n\r\n          this.incrementCursor(3);\r\n        } else {\r\n          while (script[this.incrementCursor()] !== q) {\r\n            if (\r\n              script[this._cursor] === '\\\\' &&\r\n              escapeChars.indexOf(script[this._cursor + 1]) >= 0\r\n            ) {\r\n              this._cursor++;\r\n            }\r\n\r\n            this.tokenText += script[this._cursor];\r\n            if (this._cursor + 1 >= script.length) {\r\n              throw new Error(`Line ${this._startLine}: End of string missing.`);\r\n            }\r\n          }\r\n\r\n          //start column needs to take into account a begining quote, not just a string\r\n          this._startColumn--;\r\n        }\r\n\r\n        // a special case when empty string\r\n        if (this.tokenText.length === 0) {\r\n          this._startLine = this._currentLine;\r\n          this._startColumn = this._currentColumn;\r\n        }\r\n        this.tokenText = this.processToken(this.tokenText, tokens, true, TokenTypes.LiteralString);\r\n      } else if (symbol != ' ') {\r\n        this.tokenText += symbol;\r\n      }\r\n    } while (this.incrementCursor() < script.length);\r\n\r\n    this.processToken(this.tokenText, tokens);\r\n\r\n    return tokens;\r\n  }\r\n\r\n  private incrementCursor(count = 1): number {\r\n    for (let i = 0; i < count; i++) {\r\n      this._cursor = this._cursor + 1;\r\n      if (this._script[this._cursor] === '\\n') {\r\n        this._currentLine++;\r\n        this._currentColumn = 0;\r\n      } else {\r\n        this._currentColumn++;\r\n      }\r\n    }\r\n\r\n    return this._cursor;\r\n  }\r\n\r\n  private recognizeToken(\r\n    tokenText: string,\r\n    type: TokenTypes | null = null\r\n  ): { value: string | number | boolean | null; type: TokenTypes } {\r\n    let value: string | number | boolean | null = tokenText;\r\n\r\n    if (type === null) {\r\n      if (tokenText === 'null') {\r\n        type = TokenTypes.LiteralNull;\r\n        value = null;\r\n      } else if (tokenText === 'true' || tokenText === 'false') {\r\n        type = TokenTypes.LiteralBool;\r\n        value = tokenText === 'true';\r\n      } else if (this.parseNumberOrNull(tokenText) !== null) {\r\n        type = TokenTypes.LiteralNumber;\r\n        value = this.parseNumberOrNull(tokenText);\r\n      } else if (Keywords.indexOf(tokenText) >= 0) {\r\n        type = TokenTypes.Keyword;\r\n      } else {\r\n        type = TokenTypes.Identifier;\r\n      }\r\n    }\r\n\r\n    return {\r\n      value: value,\r\n      type: type\r\n    };\r\n  }\r\n\r\n  private processToken(\r\n    strToken: string,\r\n    tokens: Token[],\r\n    allowEmptyString = false,\r\n    type: TokenTypes | null = null\r\n  ): string {\r\n    // ignore empty tokens\r\n    if ((!strToken.length && !allowEmptyString) || strToken === '\\n') return '';\r\n\r\n    const token = this.recognizeToken(strToken, type);\r\n    tokens.push([\r\n      token.value,\r\n      Uint16Array.of(\r\n        token.type as number,\r\n        this._startLine,\r\n        this._startColumn,\r\n        this._currentLine,\r\n        this._currentColumn\r\n      )\r\n    ] as Token);\r\n    return '';\r\n  }\r\n\r\n  private parseNumberOrNull(value: string | number): number | null {\r\n    if (typeof value === 'number') {\r\n      return value;\r\n    }\r\n\r\n    if (!value || typeof value !== 'string') {\r\n      return null;\r\n    }\r\n\r\n    value = value.trim();\r\n\r\n    // Just to make sure string contains digits only and '.', ','. Otherwise, parseFloat can incorrectly parse into number\r\n    for (let i = value.length - 1; i >= 0; i--) {\r\n      const d = value.charCodeAt(i);\r\n      if (d < 48 || d > 57) {\r\n        // '.' - 46 ',' - 44 '-' - 45(but only first char)\r\n        if (d !== 46 && d !== 44 && (d !== 45 || i !== 0)) return null;\r\n      }\r\n    }\r\n\r\n    const res = parseFloat(value);\r\n    return !isNaN(res) ? res : null;\r\n  }\r\n\r\n  private isPartOfNumber(symbol: string, currentTokens: Token[]): boolean {\r\n    if (symbol === '-' && !this.tokenText.length) {\r\n      // '-' needs to be handled e.g. -3; 2 + -2 etc\r\n      const prevToken = currentTokens.length !== 0 ? currentTokens[currentTokens.length - 1] : null;\r\n      return (\r\n        prevToken === null ||\r\n        (getTokenType(prevToken) === TokenTypes.Operator && getTokenValue(prevToken) !== ')')\r\n      );\r\n    } else if (symbol === '.' && this.parseNumberOrNull(this.tokenText) !== null) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import { AstBlock, ImportNode, Token } from './common';\r\nimport { getImportType } from './common/utils';\r\nimport { Evaluator } from './evaluator';\r\nimport { EvaluatorAsync } from './evaluator/evaluatorAsync';\r\nimport { BlockContext, Scope } from './evaluator/scope';\r\nimport { INITIAL_SCOPE, PackageToImport } from './initialScope';\r\nimport { Parser } from './parser';\r\nimport { Tokenizer } from './tokenizer';\r\n\r\nexport type PackageLoader = (packageName: string) => Record<string, unknown>;\r\nexport type ModuleLoader = (filePath: string) => Promise<string>;\r\n\r\nexport function jsPython(): Interpreter {\r\n  return Interpreter.create();\r\n}\r\n\r\nexport class Interpreter {\r\n  private readonly initialScope: Record<string, unknown> = { ...INITIAL_SCOPE };\r\n\r\n  private _lastExecutionContext: Record<string, unknown> | null = null;\r\n\r\n  private packageLoader?: PackageLoader;\r\n  private moduleLoader?: ModuleLoader;\r\n\r\n  static create(): Interpreter {\r\n    return new Interpreter();\r\n  }\r\n\r\n  get initialExecutionContext(): Record<string, unknown> {\r\n    return this.initialScope;\r\n  }\r\n\r\n  get lastExecutionContext(): Record<string, unknown> | null {\r\n    return this._lastExecutionContext;\r\n  }\r\n\r\n  cleanUp(): void {\r\n    this._lastExecutionContext = null;\r\n  }\r\n\r\n  jsPythonInfo(): string {\r\n    return INITIAL_SCOPE.jsPython();\r\n  }\r\n\r\n  tokenize(script: string): Token[] {\r\n    const tokenizer = new Tokenizer();\r\n    return tokenizer.tokenize(script);\r\n  }\r\n\r\n  parse(script: string, moduleName = 'main.jspy'): AstBlock {\r\n    const tokenizer = new Tokenizer();\r\n    const parser = new Parser();\r\n    const jspyAst = parser.parse(tokenizer.tokenize(script), moduleName);\r\n    return jspyAst;\r\n  }\r\n\r\n  eval(\r\n    codeOrAst: string | AstBlock,\r\n    scope: Record<string, unknown> = {},\r\n    entryFunctionName: string | [string, ...unknown[]] = '',\r\n    moduleName = 'main.jspy'\r\n  ): unknown {\r\n    const ast =\r\n      typeof codeOrAst === 'string'\r\n        ? this.parse(codeOrAst as string, moduleName)\r\n        : (codeOrAst as AstBlock);\r\n\r\n    const blockContext = {\r\n      moduleName: moduleName,\r\n      cancellationToken: { cancel: false },\r\n      blockScope: new Scope(scope)\r\n    } as BlockContext;\r\n\r\n    blockContext.blockScope.set('printExecutionContext', () =>\r\n      console.log(blockContext.blockScope.getScope())\r\n    );\r\n    blockContext.blockScope.set('getExecutionContext', () => blockContext.blockScope.getScope());\r\n    this._lastExecutionContext = blockContext.blockScope.getScope();\r\n\r\n    const result = new Evaluator().evalBlock(ast, blockContext);\r\n    if (!entryFunctionName || !entryFunctionName.length) {\r\n      return result;\r\n    } else {\r\n      const funcName = Array.isArray(entryFunctionName)? entryFunctionName[0] : entryFunctionName as string\r\n      const funcParams = Array.isArray(entryFunctionName)? entryFunctionName.slice(1) : []\r\n      const func = blockContext.blockScope.get(funcName);\r\n      if (typeof func !== 'function') {\r\n        throw Error(`Function ${entryFunctionName} does not exists or not a function`);\r\n      }\r\n      return func(...funcParams);\r\n    }\r\n  }\r\n\r\n  async evalAsync(\r\n    codeOrAst: string | AstBlock,\r\n    scope: Record<string, unknown> = {},\r\n    entryFunctionName: string | [string, ...unknown[]] = '',\r\n    moduleName = 'main.jspy',\r\n    ctxInitialized?: (ctx: BlockContext) => void\r\n  ): Promise<unknown> {\r\n    const ast =\r\n      typeof codeOrAst === 'string'\r\n        ? this.parse(codeOrAst as string, moduleName)\r\n        : (codeOrAst as AstBlock);\r\n    const evaluator = new EvaluatorAsync();\r\n    const blockContext = {\r\n      moduleName: moduleName,\r\n      cancellationToken: { cancel: false },\r\n      blockScope: new Scope(scope)\r\n    } as BlockContext;\r\n\r\n    if (typeof ctxInitialized === 'function') {\r\n      ctxInitialized(blockContext);\r\n    }\r\n\r\n    blockContext.blockScope.set('printExecutionContext', () =>\r\n      console.log(blockContext.blockScope.getScope())\r\n    );\r\n    blockContext.blockScope.set('getExecutionContext', () => blockContext.blockScope.getScope());\r\n    this._lastExecutionContext = blockContext.blockScope.getScope();\r\n\r\n    const result = await evaluator\r\n      .registerJsonFileLoader(\r\n        async (modulePath: string) =>\r\n          await (this.moduleLoader\r\n            ? this.moduleLoader(modulePath)\r\n            : Promise.reject('ModuleLoader is not registered'))\r\n      )\r\n      .registerModuleParser(async modulePath => await this.moduleParser(modulePath))\r\n      .registerBlockContextFactory((moduleName, ast: AstBlock) => {\r\n        // enrich context\r\n        const newContext = this.assignImportContext(ast, scope);\r\n        const moduleContext = {\r\n          moduleName,\r\n          blockScope: new Scope(newContext),\r\n          cancellationToken: blockContext.cancellationToken\r\n        };\r\n        moduleContext.blockScope.set('printExecutionContext', () =>\r\n          console.log(moduleContext.blockScope.getScope())\r\n        );\r\n        moduleContext.blockScope.set('getExecutionContext', () =>\r\n          moduleContext.blockScope.getScope()\r\n        );\r\n        return moduleContext;\r\n      })\r\n      .evalBlockAsync(ast, blockContext);\r\n\r\n    if (!entryFunctionName || !entryFunctionName.length) {\r\n      return result;\r\n    } else {\r\n      const funcName = Array.isArray(entryFunctionName)? entryFunctionName[0] : entryFunctionName as string\r\n      const funcParams = Array.isArray(entryFunctionName)? entryFunctionName.slice(1) : []\r\n\r\n      const func = blockContext.blockScope.get(funcName);\r\n      if (typeof func !== 'function') {\r\n        throw Error(`Function ${entryFunctionName} does not exists or not a function`);\r\n      }\r\n      return await func(...funcParams);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compatibility method (with v1). !\r\n   */\r\n  async evaluate(\r\n    script: string,\r\n    context: Record<string, unknown> = {},\r\n    entryFunctionName: string | [string, ...unknown[]] = '',\r\n    moduleName = 'main.jspy',\r\n    ctxInitialized?: (ctx: BlockContext) => void\r\n  ): Promise<unknown> {\r\n    if (!script || !script.length) {\r\n      return null;\r\n    }\r\n    const ast = this.parse(script, moduleName);\r\n\r\n    context = context && typeof context === 'object' ? context : {};\r\n    context = this.assignImportContext(ast, context);\r\n\r\n    const globalScope = {\r\n      ...this.initialScope,\r\n      ...context\r\n    } as Record<string, unknown>;\r\n\r\n    return await this.evalAsync(ast, globalScope, entryFunctionName, moduleName, ctxInitialized);\r\n  }\r\n\r\n  registerPackagesLoader(loader: PackageLoader): Interpreter {\r\n    if (typeof loader === 'function') {\r\n      this.packageLoader = loader;\r\n    } else {\r\n      throw Error('PackagesLoader');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  registerModuleLoader(loader: ModuleLoader): Interpreter {\r\n    if (typeof loader === 'function') {\r\n      this.moduleLoader = loader;\r\n    } else {\r\n      throw Error('ModuleLoader should be a function');\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  addFunction(\r\n    funcName: string,\r\n    fn: (...args: unknown[]) => void | unknown | Promise<unknown>\r\n  ): Interpreter {\r\n    this.initialScope[funcName] = fn;\r\n    return this;\r\n  }\r\n\r\n  assignGlobalContext(obj: Record<string, unknown>): Interpreter {\r\n    Object.assign(this.initialScope, obj);\r\n    return this;\r\n  }\r\n\r\n  hasFunction(scripts = '', funcName: string): boolean {\r\n    return scripts.indexOf(`def ${funcName}`) > -1;\r\n  }\r\n\r\n  assignImportContext(\r\n    ast: AstBlock,\r\n    context: Record<string, unknown>\r\n  ): Record<string, unknown> {\r\n    const nodeToPackage = (im: ImportNode): PackageToImport => {\r\n      return {\r\n        name: im.module.name,\r\n        as: im.module.alias,\r\n        properties: im.parts?.map(p => ({ name: p.name, as: p.alias }))\r\n      } as PackageToImport;\r\n    };\r\n\r\n    const importNodes = ast.body.filter(n => n.type === 'import') as ImportNode[];\r\n\r\n    const jsImport = importNodes\r\n      .filter(im => getImportType(im.module.name) === 'jsPackage')\r\n      .map(im => nodeToPackage(im));\r\n\r\n    if (jsImport.length && this.packageLoader) {\r\n      const libraries = this.packageResolver(jsImport);\r\n      context = { ...context, ...libraries };\r\n    }\r\n\r\n    return context as Record<string, unknown>;\r\n  }\r\n\r\n  private async moduleParser(modulePath: string): Promise<AstBlock> {\r\n    if (!this.moduleLoader) {\r\n      throw new Error('Module Loader is not registered');\r\n    }\r\n\r\n    const content = await this.moduleLoader(modulePath);\r\n    return this.parse(content, modulePath);\r\n  }\r\n\r\n  private packageResolver(packages: PackageToImport[]): Record<string, unknown> {\r\n    if (!this.packageLoader) {\r\n      throw Error('Package loader not provided.');\r\n    }\r\n    const libraries: Record<string, unknown> = {};\r\n    packages.forEach(({ name, as, properties }: PackageToImport) => {\r\n      const lib = (this.packageLoader && this.packageLoader(name)) || {};\r\n      if (properties?.length) {\r\n        properties.forEach(prop => {\r\n          libraries[prop.as || prop.name] = lib[prop.name];\r\n        });\r\n      } else if (as) {\r\n        libraries[as] = lib;\r\n      } else {\r\n        libraries[name] = lib;\r\n      }\r\n      if (as) {\r\n        libraries[as] = lib;\r\n      }\r\n    });\r\n    return libraries;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}