generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Wallet {
//   id          String @id @default(uuid())
//   userId      String
//   hashId      String
//   address     String
//   currency    Decimal
//   privateKey  String
//   publicKey  String
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt

//    @@index([storeId])
// }

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  products   Product[]   @relation("StoreToProduct")
  // file            File[]        @relation("StoreToFile")
  // wallet          Wallet[]      @relation("StoreToWallet")
  details    Detail[]    @relation("StoreToDetail")
  actors     Actor[]     @relation("StoreToActor")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String // Foreign Key to Store
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String // Foreign Key to Billboard
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id         String      @id @default(uuid())
  userId     String // Foreign Key 
  storeId    String // Foreign Key to Store
  name       String
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String // Foreign Key to Category
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  // fileId      String        // Foreign Key to File
  // file        File          @relation(fields: [fileId], references: [id])
  // walletId    String        // Foreign Key to Wallet
  // address     Wallet         @relation(fields: [walletId], references: [id])
  detailId   String // Foreign Key to Detail
  detail     Detail      @relation(fields: [detailId], references: [id])
  actorId    String // Foreign Key to Actor
  actor      Actor       @relation(fields: [actorId], references: [id])
  productinf String
  price      Decimal
  supply     Decimal
  isArchived Boolean     @default(false)
  isFeatured Boolean     @default(false)
  images     Image[]
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  // @@index([fileId])
  // @@index([walletId])

  @@index([storeId])
  @@index([categoryId])
  @@index([detailId])
  @@index([actorId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

// model File {
//   id          String @id @default(uuid())
//   data        Bytes
//   storeId     String    // Foreign Key to Store
//   store       Store     @relation("StoreToFile", fields: [storeId], references: [id])
//   productId   String
//   products    Product[] // Relation to Product model
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   @@index([productId])
//   @@index([storeId])

// }

model Detail {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToDetail", fields: [storeId], references: [id])
  name      String
  info      String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Actor {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToActor", fields: [storeId], references: [id])
  name      String
  nickname  String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
